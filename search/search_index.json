{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bit24 Python SDK","text":"<p>Bit24 is a cryptocurrency exchange that allows users to buy and sell cryptocurrencies.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>This is the Python SDK for Bit24. It provides a simple way to interact with the Bit24 API.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip</code> from PyPI:</p> <pre><code>pip install python-bit24\n</code></pre> <p>Or install from <code>git</code></p> <pre><code>pip install git+https://github.com/amiwrpremium/python-bit24.git\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>See Quick Start for usage guide.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>See documentation.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is an unofficial SDK. The SDK is provided as is and is not endorsed by Bit24, and I am in no way affiliated with Bit24.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Here are some snippets to get you started.</p>"},{"location":"quick_start/#initiate","title":"Initiate","text":"<p>Initiate client.</p> Reference <ul> <li>Code Reference: Client</li> </ul> SyncAsync client.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n</code></pre> client.py<pre><code>from bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n</code></pre>"},{"location":"quick_start/#with-request-params","title":"With Request Params","text":"<p>You can pass requests OR aiohttp params to client.</p> SyncAsync with_request_params.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\", requests_params={\n    \"timeout\": 10\n})\n</code></pre> async_with_request_params.py<pre><code>from bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\", requests_params={\n    \"timeout\": 10\n})\n</code></pre>"},{"location":"quick_start/#get-withdraw-networks","title":"Get Withdraw Networks","text":"<p>Get Withdraw Networks</p> <p>Warning</p> <p> Rate Limit: 120/minute</p> Reference <ul> <li>Sync Code Reference: Client.get_withdraw_networks</li> <li>Async Code Reference: AsyncClient.get_withdraw_networks</li> <li>API Documentation Reference: Get Withdraw Networks</li> </ul> SyncAsync get_withdraw_networks.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_withdraw_networks()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_withdraw_networks_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_withdraw_networks()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"data\": {\n    \"balance\": \"0\",\n    \"networks\": [\n      {\n        \"network_id\": 703,\n        \"network_name\": \"BTC\",\n        \"network_layer\": \"BTC\",\n        \"min_withdraw\": \"0.001\",\n        \"max_withdraw\": \"500\",\n        \"fee\": \"0.00022\",\n        \"address_regex\": \"^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^[(bc1q)|(bc1p)][0-9A-Za-z]{37,62}$\",\n        \"memo_regex\": null\n      }\n    ],\n    \"message\": \"\"\n  },\n  \"error\": null\n}\n</code></pre>"},{"location":"quick_start/#get-deposit-networks","title":"Get Deposit Networks","text":"<p>Get Deposit Networks</p> Reference <ul> <li>Sync Code Reference: Client.get_deposit_networks</li> <li>Async Code Reference: AsyncClient.get_deposit_networks</li> <li>API Documentation Reference: Get Deposit Networks</li> </ul> SyncAsync get_deposit_networks.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_deposit_networks()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_deposit_networks_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    user_info = await client.get_deposit_networks()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"data\": {\n    \"networks\": [\n      {\n        \"network_name\": \"BTC\",\n        \"network_layer\": \"BTC\",\n        \"description_deposit\": null,\n        \"min_deposit\": \"0.0005\",\n        \"address\": \"1B9Y7E5nnYrW7JR6xxXrTVRDN1vDDLjvNM\",\n        \"memo\": null\n      }\n    ],\n    \"message\": \"\"\n  },\n  \"error\": null\n}\n</code></pre>"},{"location":"quick_start/#get-asset-information","title":"Get Asset Information","text":"<p>Get Deposit Networks</p> Reference <ul> <li>Sync Code Reference: Client.get_assets_information</li> <li>Async Code Reference: AsyncClient.get_assets_information</li> <li>API Documentation Reference: Get Deposit Networks</li> </ul> SyncAsync get_assets_information.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_assets_information(\"bitcoin\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_assets_information_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_assets_information()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\",\n    \"asset\": [\n      {\n        \"id\": 1,\n        \"name\": \"bitcoin\",\n        \"fa_name\": \"\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646\",\n        \"symbol\": \"BTC\",\n        \"coin_type\": 0,\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/ca4e6136-b7e0-407d-81d6-fdf21910cc53.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/ca4e6136-b7e0-407d-81d6-fdf21910cc53.png\",\n        \"each_price\": \"63495.9000000000000000\",\n        \"change_24hr\": \"0.00\",\n        \"balance\": null,\n        \"available_balance\": null,\n        \"in_orders\": null,\n        \"balance_irt\": \"0\",\n        \"balance_usdt\": \"0.00\",\n        \"markets\": [\n          {\n            \"base_coin_symbol\": \"BTC\",\n            \"quote_coin_symbol\": \"IRT\",\n            \"is_active\": 1\n          },\n          {\n            \"base_coin_symbol\": \"BTC\",\n            \"quote_coin_symbol\": \"USDT\",\n            \"is_active\": 1\n          }\n        ]\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Bitcoin Cash\",\n        \"fa_name\": \"\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646 \u06a9\u0634\",\n        \"symbol\": \"BCH\",\n        \"coin_type\": 0,\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/8742adc8-9dc6-4611-9167-09652f10ae2a.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/8742adc8-9dc6-4611-9167-09652f10ae2a.png\",\n        \"each_price\": \"469.6600000000000000\",\n        \"change_24hr\": \"6.61\",\n        \"balance\": null,\n        \"available_balance\": null,\n        \"in_orders\": null,\n        \"balance_irt\": \"0\",\n        \"balance_usdt\": \"0.00\",\n        \"markets\": []\n      },\n      {\n        \"id\": 278,\n        \"name\": \"Bitcoin Gold\",\n        \"fa_name\": \"\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646 \u06af\u0644\u062f\",\n        \"symbol\": \"BTG\",\n        \"coin_type\": 0,\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/e9c508b8-076f-422d-b754-b7fce5f4fefc.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/e9c508b8-076f-422d-b754-b7fce5f4fefc.png\",\n        \"each_price\": \"0.0000000000000000\",\n        \"change_24hr\": \"0.00\",\n        \"balance\": null,\n        \"available_balance\": null,\n        \"in_orders\": null,\n        \"balance_irt\": \"0\",\n        \"balance_usdt\": \"0.00\",\n        \"markets\": []\n      },\n      {\n        \"id\": 299,\n        \"name\": \"Bitcoin Standard Hashrate Token\",\n        \"fa_name\": \"\u0628\u06cc\u062a\u06a9\u0648\u06cc\u0646 \u0627\u0633\u062a\u0627\u0646\u062f\u0627\u0631\u062f\",\n        \"symbol\": \"BTCST\",\n        \"coin_type\": 0,\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/50aa595e-e601-4d42-bca0-ef293c08a778.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/50aa595e-e601-4d42-bca0-ef293c08a778.png\",\n        \"each_price\": \"0.0000000000000000\",\n        \"change_24hr\": \"0.00\",\n        \"balance\": null,\n        \"available_balance\": null,\n        \"in_orders\": null,\n        \"balance_irt\": \"0\",\n        \"balance_usdt\": \"0.00\",\n        \"markets\": []\n      },\n      {\n        \"id\": 434,\n        \"name\": \"Super Bitcoin\",\n        \"fa_name\": \"\u0633\u0648\u067e\u0631 \u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646\",\n        \"symbol\": \"SBTC\",\n        \"coin_type\": 0,\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/SBTC.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/SBTC.png\",\n        \"each_price\": \"0.3897000000000000\",\n        \"change_24hr\": \"-3.46\",\n        \"balance\": null,\n        \"available_balance\": null,\n        \"in_orders\": null,\n        \"balance_irt\": \"0\",\n        \"balance_usdt\": \"0.00\",\n        \"markets\": []\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"quick_start/#get-asset-history","title":"Get Asset History","text":"<p>Get Deposit History</p> Reference <ul> <li>Sync Code Reference: Client.get_assets_information</li> <li>Async Code Reference: AsyncClient.get_assets_information</li> <li>API Documentation Reference: Get Asset History</li> </ul> SyncAsync get_assets_history.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_assets_history(\"bitcoin\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_assets_history_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_assets_history()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\",\n    \"has_paginate\": 1,\n    \"total_data\": 2,\n    \"current_page\": 1,\n    \"from\": 1,\n    \"to\": 2,\n    \"per_page\": 40,\n    \"results\": [\n      {\n        \"id\": 8920202,\n        \"name\": \"Toman\",\n        \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"symbol\": \"IRT\",\n        \"logo\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"value\": \"166800.00000000\",\n        \"done_value\": \"0.00000000\",\n        \"type\": 0,\n        \"transaction_code\": \"6W663612dbb4fbaas\",\n        \"type_text\": \"\u06a9\u0627\u0647\u0634\u06cc\",\n        \"reason_type\": \"2\",\n        \"reason_text\": null,\n        \"reason_type_text\": \"\u0645\u0639\u0627\u0645\u0644\u0647 \u062d\u0631\u0641\u0647\u200c\u0627\u06cc\",\n        \"reason_id\": 366287355,\n        \"balance_status\": 0,\n        \"balance_status_text\": \"\u062f\u0631 \u062d\u0627\u0644 \u0627\u0646\u062c\u0627\u0645\",\n        \"commission\": 0,\n        \"final_commission\": \"0\",\n        \"created_at\": \"2024-05-04 14:20:03\",\n        \"created_at_jalali\": \"1403/2/15 14:20:03\"\n      },\n      {\n        \"id\": 8918154,\n        \"name\": \"Toman\",\n        \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"symbol\": \"IRT\",\n        \"logo\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"value\": \"500000.00000000\",\n        \"done_value\": \"500000.00000000\",\n        \"type\": 1,\n        \"transaction_code\": \"VL6635f357c6bfbK4\",\n        \"type_text\": \" \u0627\u0641\u0632\u0627\u06cc\u0634\u06cc\",\n        \"reason_type\": \"0\",\n        \"reason_text\": \"\u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0627\u0632 \u062f\u0631\u06af\u0627\u0647 \u0628\u0627\u0646\u06a9\u06cc\",\n        \"reason_type_text\": \"\u0648\u0627\u0631\u06cc\u0632\",\n        \"reason_id\": 787573,\n        \"balance_status\": 1,\n        \"balance_status_text\": \"\u062a\u06a9\u0645\u06cc\u0644 \u0634\u062f\u0647\",\n        \"commission\": 0,\n        \"final_commission\": \"0\",\n        \"created_at\": \"2024-05-04 12:05:35\",\n        \"created_at_jalali\": \"1403/2/15 12:05:35\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"quick_start/#create-order","title":"Create Order","text":"<p>Create Order</p> Reference <ul> <li>Sync Code Reference: Client.create_order</li> <li>Async Code Reference: AsyncClient.create_order</li> <li>API Documentation Reference: Create Order</li> </ul> SyncAsync create_order.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.create_order(\n        base_coin_symbol=\"USDT\",\n        quote_coin_symbol=\"IRT\",\n        category_type=\"0\",\n        type=\"1\",\n        amount=2,\n        price=60_000,\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> create_order_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.create_order(\n        base_coin_symbol=\"USDT\",\n        quote_coin_symbol=\"IRT\",\n        category_type=\"0\",\n        type=\"1\",\n        amount=2,\n        price=60_000,\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\u0633\u0641\u0627\u0631\u0634 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f\",\n    \"order\": {\n      \"id\": 366365493,\n      \"type\": 1,\n      \"each_price\": \"60000\",\n      \"stop_price\": \"0\",\n      \"trigger_price\": \"0\",\n      \"amount\": \"2.0\",\n      \"available_amount\": \"2\",\n      \"done_value\": \"0.0\",\n      \"done_percent\": \"0.00\",\n      \"mean_value\": 0,\n      \"commission\": null,\n      \"total\": \"120000\",\n      \"created_at\": \"2024-05-04 15:43:07\",\n      \"created_at_jalali\": \"1403/2/15 15:43:07\",\n      \"base_coin\": {\n        \"id\": 6,\n        \"symbol\": \"USDT\",\n        \"name\": \"Tether\",\n        \"fa_name\": \"\u062a\u062a\u0631\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n      },\n      \"quote_coin\": {\n        \"id\": 524,\n        \"symbol\": \"IRT\",\n        \"name\": \"Toman\",\n        \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n      },\n      \"status\": 0,\n      \"status_text\": \"\u062f\u0631 \u062d\u0627\u0644 \u062a\u06a9\u0645\u06cc\u0644\",\n      \"category_type\": \"0\",\n      \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n      \"club_commission_discount_amount\": null,\n      \"conditions\": \"-\",\n      \"triggered_category_type\": null,\n      \"is_trade\": 0,\n      \"trailing_price_condition\": \"\",\n      \"activation_price_condition\": \"\",\n      \"delta\": \"% \"\n    }\n  }\n}\n</code></pre>"},{"location":"quick_start/#cancel-order","title":"Cancel Order","text":"<p>Cancel Order</p> Reference <ul> <li>Sync Code Reference: Client.cancel_order</li> <li>Async Code Reference: AsyncClient.cancel_order</li> <li>API Documentation Reference: Cancel Order</li> </ul> SyncAsync cancel_order.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.cancel_order(\n        order_id=366375085,\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> cancel_order_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.cancel_order(\n        order_id=366375085\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\u0644\u063a\u0648 \u0633\u0641\u0627\u0631\u0634/\u0633\u0641\u0627\u0631\u0634\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.\"\n  }\n}\n</code></pre>"},{"location":"quick_start/#get-ordertrade-history","title":"Get Order/Trade History","text":"<p>Get Orders and Trades History</p> Reference <ul> <li>Sync Code Reference: Client.get_orders_history</li> <li>Async Code Reference: AsyncClient.get_orders_history</li> <li>API Documentation Reference: Get Order History</li> </ul> SyncAsync get_orders_history.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_orders_history(\"0\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_orders_history_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_orders_history(\"0\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\",\n    \"has_paginate\": 1,\n    \"total_data\": 6,\n    \"current_page\": 1,\n    \"from\": 1,\n    \"to\": 6,\n    \"per_page\": 40,\n    \"results\": [\n      {\n        \"id\": 366382815,\n        \"type\": 1,\n        \"each_price\": \"60000\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"2.0\",\n        \"available_amount\": \"2.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"120000\",\n        \"created_at\": \"2024-05-04 16:08:20\",\n        \"created_at_jalali\": \"1403/2/15 16:08:20\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 2,\n        \"status_text\": \"\u0644\u063a\u0648 \u0634\u062f\u0647\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      },\n      {\n        \"id\": 366375085,\n        \"type\": 1,\n        \"each_price\": \"60000\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"2.0\",\n        \"available_amount\": \"2.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"120000\",\n        \"created_at\": \"2024-05-04 15:57:14\",\n        \"created_at_jalali\": \"1403/2/15 15:57:14\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 2,\n        \"status_text\": \"\u0644\u063a\u0648 \u0634\u062f\u0647\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      },\n      {\n        \"id\": 366365493,\n        \"type\": 1,\n        \"each_price\": \"60000\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"2.0\",\n        \"available_amount\": \"2.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"120000\",\n        \"created_at\": \"2024-05-04 15:43:07\",\n        \"created_at_jalali\": \"1403/2/15 15:43:07\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 2,\n        \"status_text\": \"\u0644\u063a\u0648 \u0634\u062f\u0647\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      },\n      {\n        \"id\": 366356907,\n        \"type\": 1,\n        \"each_price\": \"60000\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"2.0\",\n        \"available_amount\": \"2.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"120000\",\n        \"created_at\": \"2024-05-04 15:32:54\",\n        \"created_at_jalali\": \"1403/2/15 15:32:54\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 2,\n        \"status_text\": \"\u0644\u063a\u0648 \u0634\u062f\u0647\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      },\n      {\n        \"id\": 366287355,\n        \"type\": 1,\n        \"each_price\": \"55600\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"3.0\",\n        \"available_amount\": \"3.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"166800\",\n        \"created_at\": \"2024-05-04 14:20:03\",\n        \"created_at_jalali\": \"1403/2/15 14:20:03\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 0,\n        \"status_text\": \"\u062f\u0631 \u062d\u0627\u0644 \u062a\u06a9\u0645\u06cc\u0644\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      },\n      {\n        \"id\": 366270795,\n        \"type\": 1,\n        \"each_price\": \"61200\",\n        \"stop_price\": \"0\",\n        \"trigger_price\": \"0\",\n        \"amount\": \"3.0\",\n        \"available_amount\": \"3.00000000\",\n        \"done_value\": \"0.0\",\n        \"done_percent\": \"0.00\",\n        \"mean_value\": \"0.0000000000000000\",\n        \"commission\": \"0.0\",\n        \"total\": \"183600\",\n        \"created_at\": \"2024-05-04 14:01:16\",\n        \"created_at_jalali\": \"1403/2/15 14:01:16\",\n        \"base_coin\": {\n          \"id\": 6,\n          \"symbol\": \"USDT\",\n          \"name\": \"Tether\",\n          \"fa_name\": \"\u062a\u062a\u0631\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\"\n        },\n        \"quote_coin\": {\n          \"id\": 524,\n          \"symbol\": \"IRT\",\n          \"name\": \"Toman\",\n          \"fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n          \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n          \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\"\n        },\n        \"status\": 2,\n        \"status_text\": \"\u0644\u063a\u0648 \u0634\u062f\u0647\",\n        \"category_type\": 0,\n        \"category_type_text\": \"\u0639\u0627\u062f\u06cc\",\n        \"club_commission_discount_amount\": \"0.000000000000\",\n        \"conditions\": \"-\",\n        \"triggered_category_type\": null,\n        \"is_trade\": 0,\n        \"trailing_price_condition\": \"\",\n        \"activation_price_condition\": \"\",\n        \"delta\": \"% \"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"quick_start/#get-markets-information","title":"Get Markets Information","text":"<p>Get Markets Information</p> Reference <ul> <li>Sync Code Reference: Client.get_markets_information</li> <li>Async Code Reference: AsyncClient.get_markets_information</li> <li>API Documentation Reference: Get Markets Information</li> </ul> SyncAsync get_markets_information.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_markets_information(\n        order_id=366375085,\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_markets_information_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_markets_information()\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\",\n    \"has_paginate\": 1,\n    \"total_data\": 295,\n    \"current_page\": 1,\n    \"from\": 1,\n    \"to\": 40,\n    \"per_page\": 40,\n    \"results\": [\n      {\n        \"id\": 7,\n        \"base_coin_id\": 6,\n        \"base_coin_name\": \"Tether\",\n        \"base_coin_fa_name\": \"\u062a\u062a\u0631\",\n        \"base_coin_symbol\": \"USDT\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"61281\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"27677820011\",\n        \"base_coin_volume\": \"451654.1\",\n        \"24h_change\": \"-0.703\",\n        \"24h_change_volume\": \"-434\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"1.7\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/596ac4ed-3c63-45cf-9f30-c28646ec0532.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"61715\",\n        \"last_order\": \"61281\",\n        \"min_price\": \"61193\",\n        \"max_price\": \"62008\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-usdtirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 499,\n        \"base_coin_id\": 629,\n        \"base_coin_name\": \"dogwifhat\",\n        \"base_coin_fa_name\": \"\u0648\u06cc\u0641\",\n        \"base_coin_symbol\": \"WIF\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"208990\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"26451502170\",\n        \"base_coin_volume\": \"126568.26\",\n        \"24h_change\": \"18.744\",\n        \"24h_change_volume\": \"32990\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.48\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/WIF.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/WIF.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"176000\",\n        \"last_order\": \"208990\",\n        \"min_price\": \"176000\",\n        \"max_price\": \"212236\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-wifirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 21,\n        \"base_coin_id\": 172,\n        \"base_coin_name\": \"SHIBA INU\",\n        \"base_coin_fa_name\": \"\u0634\u06cc\u0628\u0627 \u0627\u06cc\u0646\u0648\",\n        \"base_coin_symbol\": \"SHIB\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1.500\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"23156408917\",\n        \"base_coin_volume\": \"15437605945\",\n        \"24h_change\": \"3.021\",\n        \"24h_change_volume\": \"0.044\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.000\",\n        \"market_order_base_coin_total_min\": \"66667\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/db261fcb-31e8-4034-a4ff-82cbf18f05e8.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/db261fcb-31e8-4034-a4ff-82cbf18f05e8.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1.456\",\n        \"last_order\": \"1.500\",\n        \"min_price\": \"1.449\",\n        \"max_price\": \"1.553\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 3,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-shibirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 19,\n        \"base_coin_id\": 20,\n        \"base_coin_name\": \"Dogecoin\",\n        \"base_coin_fa_name\": \"\u062f\u0648\u062c \u06a9\u0648\u06cc\u0646\",\n        \"base_coin_symbol\": \"DOGE\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"9822\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"9075576158\",\n        \"base_coin_volume\": \"924004\",\n        \"24h_change\": \"15.921\",\n        \"24h_change_volume\": \"1349\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"11\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/c9718cb5-4651-45a1-850a-91000fc82b25.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/c9718cb5-4651-45a1-850a-91000fc82b25.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"8473\",\n        \"last_order\": \"9822\",\n        \"min_price\": \"8436\",\n        \"max_price\": \"9918\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-dogeirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 313,\n        \"base_coin_id\": 441,\n        \"base_coin_name\": \"Pepe\",\n        \"base_coin_fa_name\": \"\u067e\u067e\u0647\",\n        \"base_coin_symbol\": \"PEPE\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"0.5394\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"7926476314\",\n        \"base_coin_volume\": \"14694987606\",\n        \"24h_change\": \"10.081\",\n        \"24h_change_volume\": \"0.0494\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.0000\",\n        \"market_order_base_coin_total_min\": \"185392\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/PEPE.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/PEPE.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"0.4900\",\n        \"last_order\": \"0.5394\",\n        \"min_price\": \"0.4797\",\n        \"max_price\": \"0.5400\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 4,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-pepeirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 1,\n        \"base_coin_id\": 1,\n        \"base_coin_name\": \"bitcoin\",\n        \"base_coin_fa_name\": \"\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646\",\n        \"base_coin_symbol\": \"BTC\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"3918338910\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"5834440922\",\n        \"base_coin_volume\": \"1.489008\",\n        \"24h_change\": \"4.712\",\n        \"24h_change_volume\": \"176344970\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.000026\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/ca4e6136-b7e0-407d-81d6-fdf21910cc53.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/ca4e6136-b7e0-407d-81d6-fdf21910cc53.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"3741993940\",\n        \"last_order\": \"3918338910\",\n        \"min_price\": \"3727007010\",\n        \"max_price\": \"3962814000\",\n        \"base_coin_decimal\": 6,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-btcirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 497,\n        \"base_coin_id\": 630,\n        \"base_coin_name\": \"Wen\",\n        \"base_coin_fa_name\": \"\u0648\u0646\",\n        \"base_coin_symbol\": \"WEN\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"13.12\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"4849549437\",\n        \"base_coin_volume\": \"369630292\",\n        \"24h_change\": \"1.942\",\n        \"24h_change_volume\": \"0.25\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.00\",\n        \"market_order_base_coin_total_min\": \"7622\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/WEN.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/WEN.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"12.87\",\n        \"last_order\": \"13.12\",\n        \"min_price\": \"12.26\",\n        \"max_price\": \"13.47\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 2,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-wenirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 307,\n        \"base_coin_id\": 404,\n        \"base_coin_name\": \"Toncoin\",\n        \"base_coin_fa_name\": \"\u062a\u0646 \u06a9\u0648\u06cc\u0646\",\n        \"base_coin_symbol\": \"TON\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"351788\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"4791427568\",\n        \"base_coin_volume\": \"13620.21\",\n        \"24h_change\": \"5.590\",\n        \"24h_change_volume\": \"18627\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.29\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/ton11122.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/ton11122.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"333161\",\n        \"last_order\": \"351788\",\n        \"min_price\": \"333161\",\n        \"max_price\": \"359013\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-tonirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 265,\n        \"base_coin_id\": 321,\n        \"base_coin_name\": \"Floki Inu\",\n        \"base_coin_fa_name\": \"\u0641\u0644\u0648\u06a9\u06cc \u0627\u06cc\u0646\u0648\",\n        \"base_coin_symbol\": \"FLOKI\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"12.32\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"4545605082\",\n        \"base_coin_volume\": \"368961451\",\n        \"24h_change\": \"20.547\",\n        \"24h_change_volume\": \"2.10\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.00\",\n        \"market_order_base_coin_total_min\": \"8117\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/32879dd0-cb5a-49ec-b08f-4ee525a2d14e.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/32879dd0-cb5a-49ec-b08f-4ee525a2d14e.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"10.22\",\n        \"last_order\": \"12.32\",\n        \"min_price\": \"10.22\",\n        \"max_price\": \"12.50\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 2,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-flokiirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 306,\n        \"base_coin_id\": 480,\n        \"base_coin_name\": \"SpaceFalcon\",\n        \"base_coin_fa_name\": \"\u0627\u0633\u067e\u06cc\u0633 \u0641\u0627\u0644\u06a9\u0648\u0646\",\n        \"base_coin_symbol\": \"FCON\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"42.62\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"2784542491\",\n        \"base_coin_volume\": \"65334173\",\n        \"24h_change\": \"7.953\",\n        \"24h_change_volume\": \"3.14\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.00\",\n        \"market_order_base_coin_total_min\": \"2347\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/FCON.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/FCON.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"39.48\",\n        \"last_order\": \"42.62\",\n        \"min_price\": \"37.50\",\n        \"max_price\": \"47.91\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 2,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-fconirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 481,\n        \"base_coin_id\": 67,\n        \"base_coin_name\": \"Solana\",\n        \"base_coin_fa_name\": \"\u0633\u0648\u0644\u0627\u0646\u0627\",\n        \"base_coin_symbol\": \"SOL\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"9046715\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"2489570311\",\n        \"base_coin_volume\": \"275.190\",\n        \"24h_change\": \"3.381\",\n        \"24h_change_volume\": \"295928\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.012\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/eb1e607f-998e-4d5e-b006-a78fdcce9ec3.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/eb1e607f-998e-4d5e-b006-a78fdcce9ec3.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"8750787\",\n        \"last_order\": \"9046715\",\n        \"min_price\": \"8648437\",\n        \"max_price\": \"9240785\",\n        \"base_coin_decimal\": 3,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-solirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 491,\n        \"base_coin_id\": 620,\n        \"base_coin_name\": \"Myro\",\n        \"base_coin_fa_name\": \"\u0645\u0627\u06cc\u0631\u0648\",\n        \"base_coin_symbol\": \"MYRO\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"10695\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1726320491\",\n        \"base_coin_volume\": \"161413.7\",\n        \"24h_change\": \"15.061\",\n        \"24h_change_volume\": \"1400\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"9.4\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/MYRO.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/MYRO.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"9295\",\n        \"last_order\": \"10695\",\n        \"min_price\": \"9211\",\n        \"max_price\": \"10993\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-myroirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 258,\n        \"base_coin_id\": 466,\n        \"base_coin_name\": \"Milady Meme Coin\",\n        \"base_coin_fa_name\": \"\u0644\u06cc\u062f\u06cc\u0632\",\n        \"base_coin_symbol\": \"LADYS\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"0.01087\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1660538753\",\n        \"base_coin_volume\": \"152763454799\",\n        \"24h_change\": \"10.042\",\n        \"24h_change_volume\": \"0.00099\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.00000\",\n        \"market_order_base_coin_total_min\": \"9199633\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/LADYS1.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/LADYS1.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"0.00987\",\n        \"last_order\": \"0.01087\",\n        \"min_price\": \"0.00972\",\n        \"max_price\": \"0.01104\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 5,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-ladysirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 487,\n        \"base_coin_id\": 389,\n        \"base_coin_name\": \"Bonk\",\n        \"base_coin_fa_name\": \"\u0628\u0646\u06a9\",\n        \"base_coin_symbol\": \"BONK\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1.754\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1581261005\",\n        \"base_coin_volume\": \"901517106\",\n        \"24h_change\": \"3.358\",\n        \"24h_change_volume\": \"0.057\",\n        \"total_min\": \"660000.00000000\",\n        \"market_order_quote_coin_total_min\": \"660000.000\",\n        \"market_order_base_coin_total_min\": \"376283\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/e3df71df-ea0c-4ed6-b968-cb3b6cf43d38.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/e3df71df-ea0c-4ed6-b968-cb3b6cf43d38.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1.697\",\n        \"last_order\": \"1.754\",\n        \"min_price\": \"1.619\",\n        \"max_price\": \"1.800\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 3,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-bonkirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 18,\n        \"base_coin_id\": 14,\n        \"base_coin_name\": \"Cardano\",\n        \"base_coin_fa_name\": \"\u06a9\u0627\u0631\u062f\u0627\u0646\u0648\",\n        \"base_coin_symbol\": \"ADA\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"28847\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1288963998\",\n        \"base_coin_volume\": \"44682.7\",\n        \"24h_change\": \"1.930\",\n        \"24h_change_volume\": \"546\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"3.5\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/179a5e93-2916-4f9f-b385-97b6aa8e7dfe.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/179a5e93-2916-4f9f-b385-97b6aa8e7dfe.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"28289\",\n        \"last_order\": \"28835\",\n        \"min_price\": \"28082\",\n        \"max_price\": \"29293\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-adairt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 9,\n        \"base_coin_id\": 11,\n        \"base_coin_name\": \"Tron\",\n        \"base_coin_fa_name\": \"\u062a\u0631\u0648\u0646\",\n        \"base_coin_symbol\": \"TRX\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"7552\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1242373515\",\n        \"base_coin_volume\": \"164509\",\n        \"24h_change\": \"-0.079\",\n        \"24h_change_volume\": \"-6\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"14\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/TRX.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/TRX.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"7558\",\n        \"last_order\": \"7552\",\n        \"min_price\": \"7489\",\n        \"max_price\": \"7689\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-trxirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 274,\n        \"base_coin_id\": 405,\n        \"base_coin_name\": \"Arbitrum\",\n        \"base_coin_fa_name\": \"\u0622\u0631\u0628\u06cc\u062a\u0631\u0648\u0645\",\n        \"base_coin_symbol\": \"ARB\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"66020\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1166794882\",\n        \"base_coin_volume\": \"17673.3\",\n        \"24h_change\": \"2.345\",\n        \"24h_change_volume\": \"1513\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"1.6\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/4220e9ec-f912-491d-ba89-6cd85abcad68.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/4220e9ec-f912-491d-ba89-6cd85abcad68.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"64507\",\n        \"last_order\": \"66020\",\n        \"min_price\": \"64100\",\n        \"max_price\": \"66709\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-arbirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 314,\n        \"base_coin_id\": 534,\n        \"base_coin_name\": \"Pepe 2\",\n        \"base_coin_fa_name\": \"\u067e\u067e\u0647 2\",\n        \"base_coin_symbol\": \"PEPE2\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"0.002911\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"1131869842\",\n        \"base_coin_volume\": \"388825091812\",\n        \"24h_change\": \"3.226\",\n        \"24h_change_volume\": \"0.000091\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.000000\",\n        \"market_order_base_coin_total_min\": \"34352457\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/PEPE2.0.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/PEPE2.0.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"0.002820\",\n        \"last_order\": \"0.002911\",\n        \"min_price\": \"0.002752\",\n        \"max_price\": \"0.003033\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 6,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-pepe2irt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 477,\n        \"base_coin_id\": 257,\n        \"base_coin_name\": \"babydoge\",\n        \"base_coin_fa_name\": \"\u0628\u06cc\u0628\u06cc \u062f\u0648\u062c\",\n        \"base_coin_symbol\": \"BABYDOGE\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"0.0001208\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"901964071\",\n        \"base_coin_volume\": \"7466589993075\",\n        \"24h_change\": \"2.896\",\n        \"24h_change_volume\": \"0.0000034\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.0000000\",\n        \"market_order_base_coin_total_min\": \"827814570\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/287754d0-921a-464e-a17f-75dc2bb31985.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/287754d0-921a-464e-a17f-75dc2bb31985.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"0.0001174\",\n        \"last_order\": \"0.0001208\",\n        \"min_price\": \"0.0001171\",\n        \"max_price\": \"0.0001255\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 7,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-babydogeirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 3,\n        \"base_coin_id\": 3,\n        \"base_coin_name\": \"Ethereum\",\n        \"base_coin_fa_name\": \"\u0627\u062a\u0631\u06cc\u0648\u0645\",\n        \"base_coin_symbol\": \"ETH\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"192808729\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"769842906\",\n        \"base_coin_volume\": \"3.99278\",\n        \"24h_change\": \"2.719\",\n        \"24h_change_volume\": \"5104372\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.00052\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/9510ed7b-dc8d-47a3-98ae-8b5fe6adb8eb.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/9510ed7b-dc8d-47a3-98ae-8b5fe6adb8eb.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"187704357\",\n        \"last_order\": \"192808729\",\n        \"min_price\": \"186493803\",\n        \"max_price\": \"194768655\",\n        \"base_coin_decimal\": 5,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-ethirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 32,\n        \"base_coin_id\": 111,\n        \"base_coin_name\": \"PancakeSwap\",\n        \"base_coin_fa_name\": \"\u067e\u0646\u06a9\u06cc\u06a9 \u0633\u0648\u0627\u067e\",\n        \"base_coin_symbol\": \"CAKE\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"166000\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"719617839\",\n        \"base_coin_volume\": \"4335.04\",\n        \"24h_change\": \"4.192\",\n        \"24h_change_volume\": \"6689\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.61\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/a5690177-d24d-4984-8a8f-50ceda849b8a.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/a5690177-d24d-4984-8a8f-50ceda849b8a.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"159556\",\n        \"last_order\": \"166245\",\n        \"min_price\": \"159432\",\n        \"max_price\": \"168641\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-cakeirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 286,\n        \"base_coin_id\": 379,\n        \"base_coin_name\": \"OpenDAO\",\n        \"base_coin_fa_name\": \"\u0627\u0648\u067e\u0646 \u062f\u0627\u0626\u0648\",\n        \"base_coin_symbol\": \"SOS\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"0.001748\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"688530034\",\n        \"base_coin_volume\": \"393895900662\",\n        \"24h_change\": \"12.051\",\n        \"24h_change_volume\": \"0.000188\",\n        \"total_min\": \"660000.00000000\",\n        \"market_order_quote_coin_total_min\": \"660000.000000\",\n        \"market_order_base_coin_total_min\": \"377574371\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/245398a5-7da7-4efb-823e-97b6a30ddba7.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/245398a5-7da7-4efb-823e-97b6a30ddba7.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"0.001560\",\n        \"last_order\": \"0.001748\",\n        \"min_price\": \"0.001560\",\n        \"max_price\": \"0.001829\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 6,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-sosirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 20,\n        \"base_coin_id\": 4,\n        \"base_coin_name\": \"Ripple\",\n        \"base_coin_fa_name\": \"\u0631\u06cc\u067e\u0644\",\n        \"base_coin_symbol\": \"XRP\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"32869\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"563893499\",\n        \"base_coin_volume\": \"17155.7\",\n        \"24h_change\": \"1.988\",\n        \"24h_change_volume\": \"641\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"3.1\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/ad5efb7b-e514-498e-b7e9-e9bd02137e79.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/ad5efb7b-e514-498e-b7e9-e9bd02137e79.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"32228\",\n        \"last_order\": \"32869\",\n        \"min_price\": \"32206\",\n        \"max_price\": \"33015\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-xrpirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 25,\n        \"base_coin_id\": 45,\n        \"base_coin_name\": \"Uniswap\",\n        \"base_coin_fa_name\": \"\u06cc\u0648\u0646\u06cc \u0633\u0648\u0622\u067e\",\n        \"base_coin_symbol\": \"UNI\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"464212\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"535329249\",\n        \"base_coin_volume\": \"1153.19\",\n        \"24h_change\": \"4.230\",\n        \"24h_change_volume\": \"18843\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.22\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/75f8f05b-b5cb-4573-a997-5292a9fe2b80.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/75f8f05b-b5cb-4573-a997-5292a9fe2b80.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"445369\",\n        \"last_order\": \"464212\",\n        \"min_price\": \"442931\",\n        \"max_price\": \"474472\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-uniirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 289,\n        \"base_coin_id\": 350,\n        \"base_coin_name\": \"Green Satoshi Token\",\n        \"base_coin_fa_name\": \"\u062c\u06cc \u0627\u0633 \u062a\u06cc\",\n        \"base_coin_symbol\": \"GST\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1942\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"446606630\",\n        \"base_coin_volume\": \"229972\",\n        \"24h_change\": \"2.210\",\n        \"24h_change_volume\": \"42\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"52\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/6e1b17df-d336-4ada-9d05-bfbb965410c0.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/6e1b17df-d336-4ada-9d05-bfbb965410c0.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1900\",\n        \"last_order\": \"1942\",\n        \"min_price\": \"1900\",\n        \"max_price\": \"2011\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-gstirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 483,\n        \"base_coin_id\": 62,\n        \"base_coin_name\": \"Fantom\",\n        \"base_coin_fa_name\": \"\u0641\u0627\u0646\u062a\u0648\u0645\",\n        \"base_coin_symbol\": \"FTM\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"43096\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"420030828\",\n        \"base_coin_volume\": \"9746.3\",\n        \"24h_change\": \"1.831\",\n        \"24h_change_volume\": \"775\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"2.4\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/1b310cd6-c884-4999-8bbc-49f4dbc6415c.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/1b310cd6-c884-4999-8bbc-49f4dbc6415c.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"42321\",\n        \"last_order\": \"43096\",\n        \"min_price\": \"42036\",\n        \"max_price\": \"43903\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-ftmirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 288,\n        \"base_coin_id\": 450,\n        \"base_coin_name\": \"Sui\",\n        \"base_coin_fa_name\": \"\u0633\u0648\u06cc\u06cc\",\n        \"base_coin_symbol\": \"SUI\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"67675\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"415267534\",\n        \"base_coin_volume\": \"6136.2\",\n        \"24h_change\": \"-0.649\",\n        \"24h_change_volume\": \"-442\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"1.5\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/SUI.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/SUI.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"68055\",\n        \"last_order\": \"67613\",\n        \"min_price\": \"67501\",\n        \"max_price\": \"70338\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-suiirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 226,\n        \"base_coin_id\": 354,\n        \"base_coin_name\": \"JasmyCoin\",\n        \"base_coin_fa_name\": \"\u062c\u0633\u0645\u06cc \u06a9\u0648\u06cc\u0646\",\n        \"base_coin_symbol\": \"JASMY\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1161\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"388906805\",\n        \"base_coin_volume\": \"334975\",\n        \"24h_change\": \"6.416\",\n        \"24h_change_volume\": \"70\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"87\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/da8d91c4-de73-4d1c-b170-b464d7d013e9.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/da8d91c4-de73-4d1c-b170-b464d7d013e9.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1091\",\n        \"last_order\": \"1161\",\n        \"min_price\": \"1082\",\n        \"max_price\": \"1168\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-jasmyirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 325,\n        \"base_coin_id\": 363,\n        \"base_coin_name\": \"Optimism\",\n        \"base_coin_fa_name\": \"\u0622\u067e\u062a\u06cc\u0645\u06cc\u0632\u0645\",\n        \"base_coin_symbol\": \"OP\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"179609\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"383720525\",\n        \"base_coin_volume\": \"2136.42\",\n        \"24h_change\": \"0.414\",\n        \"24h_change_volume\": \"741\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.56\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/176388e7-7656-4a9f-890e-3b7e2d12dbb0.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/176388e7-7656-4a9f-890e-3b7e2d12dbb0.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"178868\",\n        \"last_order\": \"179609\",\n        \"min_price\": \"173438\",\n        \"max_price\": \"184108\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-opirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 176,\n        \"base_coin_id\": 27,\n        \"base_coin_name\": \"Algorand\",\n        \"base_coin_fa_name\": \"\u0622\u0644\u06af\u0648\u0631\u0627\u0646\u062f\",\n        \"base_coin_symbol\": \"ALGO\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"11861\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"371211693\",\n        \"base_coin_volume\": \"31296.8\",\n        \"24h_change\": \"3.192\",\n        \"24h_change_volume\": \"367\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"8.5\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/ee17b4a3-2aba-48b1-8f28-9f6941cfadf9.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/ee17b4a3-2aba-48b1-8f28-9f6941cfadf9.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"11494\",\n        \"last_order\": \"11861\",\n        \"min_price\": \"11426\",\n        \"max_price\": \"11982\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-algoirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 273,\n        \"base_coin_id\": 494,\n        \"base_coin_name\": \"Orbofi AI\",\n        \"base_coin_fa_name\": \"\u0627\u0648\u0628\u06cc\",\n        \"base_coin_symbol\": \"OBI\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1305\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"348250244\",\n        \"base_coin_volume\": \"266858\",\n        \"24h_change\": \"21.529\",\n        \"24h_change_volume\": \"228\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"77\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/OBI.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/OBI.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1059\",\n        \"last_order\": \"1287\",\n        \"min_price\": \"1048\",\n        \"max_price\": \"1483\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-obiirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 17,\n        \"base_coin_id\": 7,\n        \"base_coin_name\": \"Binance Coin\",\n        \"base_coin_fa_name\": \"\u0628\u0627\u06cc\u0646\u0646\u0633 \u06a9\u0648\u06cc\u0646\",\n        \"base_coin_symbol\": \"BNB\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"36227441\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"332163953\",\n        \"base_coin_volume\": \"9.1688\",\n        \"24h_change\": \"2.902\",\n        \"24h_change_volume\": \"1021730\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.0028\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/8cdfc019-7c47-49ad-b031-40c36017d810.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/8cdfc019-7c47-49ad-b031-40c36017d810.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"35205711\",\n        \"last_order\": \"36227441\",\n        \"min_price\": \"34984397\",\n        \"max_price\": \"36494100\",\n        \"base_coin_decimal\": 4,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-bnbirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 305,\n        \"base_coin_id\": 136,\n        \"base_coin_name\": \"Akropolis\",\n        \"base_coin_fa_name\": \"\u0622\u06a9\u0631\u0648 \u067e\u0644\u06cc\u0633\",\n        \"base_coin_symbol\": \"AKRO\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"435.3\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"328616248\",\n        \"base_coin_volume\": \"754919\",\n        \"24h_change\": \"1.610\",\n        \"24h_change_volume\": \"6.9\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.0\",\n        \"market_order_base_coin_total_min\": \"230\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/b922c8b1-9a06-4a9a-a1ea-37163b5e52c8.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/b922c8b1-9a06-4a9a-a1ea-37163b5e52c8.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"428.4\",\n        \"last_order\": \"435.3\",\n        \"min_price\": \"428.0\",\n        \"max_price\": \"442.0\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 1,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-akroirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 501,\n        \"base_coin_id\": 120,\n        \"base_coin_name\": \"Fetch.AI\",\n        \"base_coin_fa_name\": \"\u0641\u0686\",\n        \"base_coin_symbol\": \"FET\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"134510\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"318181024\",\n        \"base_coin_volume\": \"2365.48\",\n        \"24h_change\": \"4.993\",\n        \"24h_change_volume\": \"6397\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"0.75\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/41fd8935-e43d-4aa7-98ec-d6390f3ad887.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/41fd8935-e43d-4aa7-98ec-d6390f3ad887.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"128113\",\n        \"last_order\": \"134510\",\n        \"min_price\": \"126053\",\n        \"max_price\": \"138221\",\n        \"base_coin_decimal\": 2,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-fetirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 261,\n        \"base_coin_id\": 523,\n        \"base_coin_name\": \"Candy Pocket\",\n        \"base_coin_fa_name\": \"\u06a9\u0646\u062f\u06cc\",\n        \"base_coin_symbol\": \"CANDY\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"447.4\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"309801380\",\n        \"base_coin_volume\": \"692448\",\n        \"24h_change\": \"-1.993\",\n        \"24h_change_volume\": \"-9.1\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.0\",\n        \"market_order_base_coin_total_min\": \"224\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/CANDY.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/CANDY.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"456.5\",\n        \"last_order\": \"447.4\",\n        \"min_price\": \"418.7\",\n        \"max_price\": \"462.7\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 1,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-candyirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 279,\n        \"base_coin_id\": 423,\n        \"base_coin_name\": \"Kaspa\",\n        \"base_coin_fa_name\": \"\u06a9\u0627\u0633\u067e\u0627\",\n        \"base_coin_symbol\": \"KAS\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"6891\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"306228771\",\n        \"base_coin_volume\": \"44438\",\n        \"24h_change\": \"4.440\",\n        \"24h_change_volume\": \"293\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"15\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/Kaspa.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/Kaspa.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"6598\",\n        \"last_order\": \"6891\",\n        \"min_price\": \"6555\",\n        \"max_price\": \"7066\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-kasirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 332,\n        \"base_coin_id\": 490,\n        \"base_coin_name\": \"suterusu\",\n        \"base_coin_fa_name\": \"\u0633\u0648\u062a\u0631\",\n        \"base_coin_symbol\": \"SUTER\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"25.13\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"281562087\",\n        \"base_coin_volume\": \"11204221\",\n        \"24h_change\": \"8.132\",\n        \"24h_change_volume\": \"1.89\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.00\",\n        \"market_order_base_coin_total_min\": \"3980\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/SUTER.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/SUTER.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"23.24\",\n        \"last_order\": \"25.13\",\n        \"min_price\": \"23.08\",\n        \"max_price\": \"26.25\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 2,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-suterirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 309,\n        \"base_coin_id\": 513,\n        \"base_coin_name\": \"Victoria VR\",\n        \"base_coin_fa_name\": \"\u0648\u06cc\u06a9\u062a\u0648\u0631\u06cc\u0627\",\n        \"base_coin_symbol\": \"VR\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"1137\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"280353641\",\n        \"base_coin_volume\": \"246573\",\n        \"24h_change\": \"1.427\",\n        \"24h_change_volume\": \"16\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"88\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/VR.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/VR.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"1121\",\n        \"last_order\": \"1137\",\n        \"min_price\": \"1121\",\n        \"max_price\": \"1201\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-vrirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 60,\n        \"base_coin_id\": 64,\n        \"base_coin_name\": \"1INCH\",\n        \"base_coin_fa_name\": \"\u0648\u0627\u0646 \u0627\u06cc\u0646\u0686\",\n        \"base_coin_symbol\": \"1INCH\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"24044\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"254374243\",\n        \"base_coin_volume\": \"10579.5\",\n        \"24h_change\": \"3.335\",\n        \"24h_change_volume\": \"776\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000\",\n        \"market_order_base_coin_total_min\": \"4.2\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/bcb2e41a-cd02-4bef-a7a4-95e7f1b05df1.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/bcb2e41a-cd02-4bef-a7a4-95e7f1b05df1.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"23268\",\n        \"last_order\": \"24044\",\n        \"min_price\": \"23089\",\n        \"max_price\": \"24054\",\n        \"base_coin_decimal\": 1,\n        \"quote_coin_decimal\": 0,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-1inchirt.png\",\n        \"is_favorite\": false\n      },\n      {\n        \"id\": 246,\n        \"base_coin_id\": 69,\n        \"base_coin_name\": \"Terra Classic\",\n        \"base_coin_fa_name\": \"\u0644\u0648\u0646\u0627 \u06a9\u0644\u0627\u0633\u06cc\u06a9\",\n        \"base_coin_symbol\": \"LUNC\",\n        \"quote_coin_id\": 524,\n        \"quote_coin_symbol\": \"IRT\",\n        \"quote_coin_name\": \"Toman\",\n        \"quote_coin_fa_name\": \"\u062a\u0648\u0645\u0627\u0646\",\n        \"each_price\": \"6.644\",\n        \"other_side_each_price\": null,\n        \"quote_coin_volume\": \"252488593\",\n        \"base_coin_volume\": \"38002497\",\n        \"24h_change\": \"3.328\",\n        \"24h_change_volume\": \"0.214\",\n        \"total_min\": \"100000.00000000\",\n        \"market_order_quote_coin_total_min\": \"100000.000\",\n        \"market_order_base_coin_total_min\": \"15052\",\n        \"web_icon\": \"https://storage.bit24.exchange/exchange/icons/b49342ab-188f-4a0f-ace0-6bacfc0c94a1.png\",\n        \"app_icon\": \"https://storage.bit24.exchange/exchange/icons/b49342ab-188f-4a0f-ace0-6bacfc0c94a1.png\",\n        \"quote_web_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"quote_app_icon\": \"https://storage.bit24.exchange/exchange/icons/IRT.png\",\n        \"is_active\": 1,\n        \"first_order\": \"6.430\",\n        \"last_order\": \"6.644\",\n        \"min_price\": \"6.421\",\n        \"max_price\": \"6.765\",\n        \"base_coin_decimal\": 0,\n        \"quote_coin_decimal\": 3,\n        \"daily_chart_icon\": \"http://price-storage.bit24.cash/price-pro/daily-kucoin-luncirt.png\",\n        \"is_favorite\": false\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"quick_start/#get-order-book","title":"Get Order Book","text":"<p>Get Order Book</p> Reference <ul> <li>Sync Code Reference: Client.get_order_book</li> <li>Async Code Reference: AsyncClient.get_order_book</li> <li>API Documentation Reference: Get Order Book</li> </ul> SyncAsync get_order_book.py<pre><code>from bit24 import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    data = client.get_order_book(\n        \"USDT\", \"IRT\"\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_order_book_async.py<pre><code>import asyncio\nfrom bit24 import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    data = await client.get_order_book(\n        \"USDT\", \"IRT\"\n    )\n    print(data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n  \"success\": true,\n  \"status_code\": 200,\n  \"error\": null,\n  \"data\": {\n    \"message\": \"\",\n    \"USDTIRT\": {\n      \"id\": 7,\n      \"market_symbol\": \"USDTIRT\",\n      \"buy_orders\": [\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61189.0000000000000000\",\n          \"available_amount\": \"2522.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61183.0000000000000000\",\n          \"available_amount\": \"1081.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61161.0000000000000000\",\n          \"available_amount\": \"999.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61152.0000000000000000\",\n          \"available_amount\": \"1852.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61143.0000000000000000\",\n          \"available_amount\": \"1304.300000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61129.0000000000000000\",\n          \"available_amount\": \"835.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61119.0000000000000000\",\n          \"available_amount\": \"1399.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61105.0000000000000000\",\n          \"available_amount\": \"2528.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61097.0000000000000000\",\n          \"available_amount\": \"1920.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61088.0000000000000000\",\n          \"available_amount\": \"680.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61073.0000000000000000\",\n          \"available_amount\": \"1837.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61057.0000000000000000\",\n          \"available_amount\": \"1543.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61049.0000000000000000\",\n          \"available_amount\": \"396.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61044.0000000000000000\",\n          \"available_amount\": \"1053.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61026.0000000000000000\",\n          \"available_amount\": \"1367.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61017.0000000000000000\",\n          \"available_amount\": \"1642.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61010.0000000000000000\",\n          \"available_amount\": \"1287.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60993.0000000000000000\",\n          \"available_amount\": \"690.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60981.0000000000000000\",\n          \"available_amount\": \"2513.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60978.0000000000000000\",\n          \"available_amount\": \"337.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60966.0000000000000000\",\n          \"available_amount\": \"2012.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60953.0000000000000000\",\n          \"available_amount\": \"1087.600000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60935.0000000000000000\",\n          \"available_amount\": \"96.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60929.0000000000000000\",\n          \"available_amount\": \"1591.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60913.0000000000000000\",\n          \"available_amount\": \"2758.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"60903.0000000000000000\",\n          \"available_amount\": \"413.600000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"57130.0000000000000000\",\n          \"available_amount\": \"48.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"53107.0000000000000000\",\n          \"available_amount\": \"70.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"50589.0000000000000000\",\n          \"available_amount\": \"28.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"49387.0000000000000000\",\n          \"available_amount\": \"42.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"44877.0000000000000000\",\n          \"available_amount\": \"44.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"44638.0000000000000000\",\n          \"available_amount\": \"17.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"41605.0000000000000000\",\n          \"available_amount\": \"2.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"38988.0000000000000000\",\n          \"available_amount\": \"97.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"37540.0000000000000000\",\n          \"available_amount\": \"108.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"35417.0000000000000000\",\n          \"available_amount\": \"96.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"33277.0000000000000000\",\n          \"available_amount\": \"105.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"32406.0000000000000000\",\n          \"available_amount\": \"143.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"30500.0000000000000000\",\n          \"available_amount\": \"161.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"28632.0000000000000000\",\n          \"available_amount\": \"84.100000000000\"\n        }\n      ],\n      \"sell_orders\": [\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61413.0000000000000000\",\n          \"available_amount\": \"968.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61423.0000000000000000\",\n          \"available_amount\": \"370.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61428.0000000000000000\",\n          \"available_amount\": \"2193.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61444.0000000000000000\",\n          \"available_amount\": \"210.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61454.0000000000000000\",\n          \"available_amount\": \"1941.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61459.0000000000000000\",\n          \"available_amount\": \"1349.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61471.0000000000000000\",\n          \"available_amount\": \"664.600000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61478.0000000000000000\",\n          \"available_amount\": \"1561.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61482.0000000000000000\",\n          \"available_amount\": \"1925.300000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61493.0000000000000000\",\n          \"available_amount\": \"1235.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61507.0000000000000000\",\n          \"available_amount\": \"811.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61510.0000000000000000\",\n          \"available_amount\": \"1179.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61521.0000000000000000\",\n          \"available_amount\": \"2273.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61530.0000000000000000\",\n          \"available_amount\": \"212.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61539.0000000000000000\",\n          \"available_amount\": \"1582.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61552.0000000000000000\",\n          \"available_amount\": \"1004.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61559.0000000000000000\",\n          \"available_amount\": \"608.200000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61563.0000000000000000\",\n          \"available_amount\": \"1290.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61573.0000000000000000\",\n          \"available_amount\": \"239.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61587.0000000000000000\",\n          \"available_amount\": \"2101.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61597.0000000000000000\",\n          \"available_amount\": \"2364.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61601.0000000000000000\",\n          \"available_amount\": \"70.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61611.0000000000000000\",\n          \"available_amount\": \"112.600000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61624.0000000000000000\",\n          \"available_amount\": \"1606.100000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61630.0000000000000000\",\n          \"available_amount\": \"1070.400000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"61643.0000000000000000\",\n          \"available_amount\": \"1356.700000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"66825.0000000000000000\",\n          \"available_amount\": \"69.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"70680.0000000000000000\",\n          \"available_amount\": \"43.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"71477.0000000000000000\",\n          \"available_amount\": \"29.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"76903.0000000000000000\",\n          \"available_amount\": \"15.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"82117.0000000000000000\",\n          \"available_amount\": \"33.300000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"86728.0000000000000000\",\n          \"available_amount\": \"27.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"89994.0000000000000000\",\n          \"available_amount\": \"52.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"94469.0000000000000000\",\n          \"available_amount\": \"44.600000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"98720.0000000000000000\",\n          \"available_amount\": \"30.300000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"104265.0000000000000000\",\n          \"available_amount\": \"41.800000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"109439.0000000000000000\",\n          \"available_amount\": \"33.000000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"111344.0000000000000000\",\n          \"available_amount\": \"31.500000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"117072.0000000000000000\",\n          \"available_amount\": \"26.900000000000\"\n        },\n        {\n          \"market_id\": 7,\n          \"each_price\": \"124419.0000000000000000\",\n          \"available_amount\": \"28.700000000000\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"quick_start/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Quick Start</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>_utils</li> <li>clients<ul> <li>_abstract</li> <li>_core</li> <li>async_client</li> <li>client</li> </ul> </li> <li>enums</li> <li>exceptions</li> <li>types<ul> <li>client</li> <li>responses<ul> <li>assets_history</li> <li>assets_information</li> <li>base</li> <li>cancel_order</li> <li>coin_info</li> <li>create_order</li> <li>deposit_networks</li> <li>markets_info</li> <li>order_book</li> <li>orders_history</li> <li>submit_withdraw</li> <li>withdraw_networks</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/_utils/","title":"_utils","text":""},{"location":"reference/_utils/#src.bit24._utils--utils","title":"Utils","text":"<p>This module contains utility functions.</p>"},{"location":"reference/_utils/#src.bit24._utils--functions","title":"Functions","text":"<ul> <li><code>get_loop</code>: Get event loop.</li> </ul>"},{"location":"reference/_utils/#src.bit24._utils.get_loop","title":"<code>get_loop()</code>","text":"<p>Get event loop.</p> <p>Returns:</p> Type Description <code>AbstractEventLoop</code> <p>asyncio.AbstractEventLoop: The event loop.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_loop()\n&lt;_UnixSelectorEventLoop running=True closed=False debug=False&gt;\n</code></pre> Source code in <code>src/bit24/_utils.py</code> <pre><code>def get_loop() -&gt; asyncio.AbstractEventLoop:\n    \"\"\"\n    Get event loop.\n\n    Returns:\n        asyncio.AbstractEventLoop: The event loop.\n\n    Examples:\n        &gt;&gt;&gt; get_loop()\n        &lt;_UnixSelectorEventLoop running=True closed=False debug=False&gt;\n    \"\"\"\n    try:\n        return asyncio.get_event_loop()\n    except RuntimeError as e:\n        if str(e).startswith(\"There is no current event loop in thread\"):\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            return loop\n        raise\n</code></pre>"},{"location":"reference/enums/","title":"enums","text":""},{"location":"reference/enums/#src.bit24.enums--enums","title":"Enums","text":"<p>Enum classes for the Bit24 API.</p>"},{"location":"reference/enums/#src.bit24.enums--enums_1","title":"Enums","text":"<ul> <li><code>HTTPMethod</code>: HTTP methods.</li> <li><code>WithoutIrt</code>: Without IRT.</li> <li><code>WithoutZero</code>: Without zero.</li> <li><code>TransactionType</code>: Transaction type.</li> <li><code>CoinType</code>: Coin type.</li> <li><code>ReasonType</code>: Reason type.</li> <li><code>BalanceStatus</code>: Balance status.</li> <li><code>OrderType</code>: Order type.</li> <li><code>OrderCategoryType</code>: Order category type.</li> <li><code>OrderStatus</code>: Order status.</li> <li><code>IsTrade</code>: Is trade.</li> </ul>"},{"location":"reference/enums/#src.bit24.enums.BalanceStatus","title":"<code>BalanceStatus</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Balance status.</p> <p>Attributes:</p> Name Type Description <code>IN_PROGRESS</code> <code>str</code> <p>In progress.</p> <code>COMPLETED</code> <code>str</code> <p>Completed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; BalanceStatus.IN_PROGRESS\n0\n</code></pre> <pre><code>&gt;&gt;&gt; BalanceStatus.COMPLETED\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class BalanceStatus(StrEnum):\n    \"\"\"\n    Balance status.\n\n    Attributes:\n        IN_PROGRESS (str): In progress.\n        COMPLETED (str): Completed.\n\n    Examples:\n        &gt;&gt;&gt; BalanceStatus.IN_PROGRESS\n        0\n\n        &gt;&gt;&gt; BalanceStatus.COMPLETED\n        1\n    \"\"\"\n\n    IN_PROGRESS = \"0\"\n    COMPLETED = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.CoinType","title":"<code>CoinType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Coin type.</p> <p>Attributes:</p> Name Type Description <code>CRYPTO</code> <code>str</code> <p>Crypto.</p> <code>FIAT</code> <code>str</code> <p>Fiat.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CoinType.CRYPTO\n0\n</code></pre> <pre><code>&gt;&gt;&gt; CoinType.FIAT\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class CoinType(StrEnum):\n    \"\"\"\n    Coin type.\n\n    Attributes:\n        CRYPTO (str): Crypto.\n        FIAT (str): Fiat.\n\n    Examples:\n        &gt;&gt;&gt; CoinType.CRYPTO\n        0\n\n        &gt;&gt;&gt; CoinType.FIAT\n        1\n    \"\"\"\n\n    CRYPTO = \"0\"\n    FIAT = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.HTTPMethod","title":"<code>HTTPMethod</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>HTTP methods.</p> <p>Attributes:</p> Name Type Description <code>GET</code> <code>str</code> <p>GET.</p> <code>POST</code> <code>str</code> <p>POST.</p> <code>PUT</code> <code>str</code> <p>PUT.</p> <code>DELETE</code> <code>str</code> <p>DELETE.</p> <code>PATCH</code> <code>str</code> <p>PATCH.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; HTTPMethod.GET\n'GET'\n</code></pre> <pre><code>&gt;&gt;&gt; HTTPMethod.POST\n'POST'\n</code></pre> <pre><code>&gt;&gt;&gt; HTTPMethod.PUT\n'PUT'\n</code></pre> <pre><code>&gt;&gt;&gt; HTTPMethod.DELETE\n'DELETE'\n</code></pre> <pre><code>&gt;&gt;&gt; HTTPMethod.PATCH\n'PATCH'\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class HTTPMethod(StrEnum):\n    \"\"\"\n    HTTP methods.\n\n    Attributes:\n        GET (str): GET.\n        POST (str): POST.\n        PUT (str): PUT.\n        DELETE (str): DELETE.\n        PATCH (str): PATCH.\n\n    Examples:\n        &gt;&gt;&gt; HTTPMethod.GET\n        'GET'\n\n        &gt;&gt;&gt; HTTPMethod.POST\n        'POST'\n\n        &gt;&gt;&gt; HTTPMethod.PUT\n        'PUT'\n\n        &gt;&gt;&gt; HTTPMethod.DELETE\n        'DELETE'\n\n        &gt;&gt;&gt; HTTPMethod.PATCH\n        'PATCH'\n    \"\"\"\n\n    GET = \"GET\"\n    POST = \"POST\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n    PATCH = \"PATCH\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.IsTrade","title":"<code>IsTrade</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Is trade.</p> <p>Attributes:</p> Name Type Description <code>ORDER</code> <code>str</code> <p>Order.</p> <code>TRADE</code> <code>str</code> <p>Trade.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; IsTrade.ORDER\n0\n</code></pre> <pre><code>&gt;&gt;&gt; IsTrade.TRADE\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class IsTrade(StrEnum):\n    \"\"\"\n    Is trade.\n\n    Attributes:\n        ORDER (str): Order.\n        TRADE (str): Trade.\n\n    Examples:\n        &gt;&gt;&gt; IsTrade.ORDER\n        0\n\n        &gt;&gt;&gt; IsTrade.TRADE\n        1\n    \"\"\"\n\n    ORDER = \"0\"\n    TRADE = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.OrderCategoryType","title":"<code>OrderCategoryType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Order category type.</p> <p>Attributes:</p> Name Type Description <code>LIMIT</code> <code>str</code> <p>Limit.</p> <code>MARKET</code> <code>str</code> <p>Market.</p> <code>STOP_LIMIT_OR_STOP_MARKET</code> <code>str</code> <p>Stop limit or stop market.</p> <code>OCO</code> <code>str</code> <p>OCO.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderCategoryType.LIMIT\n0\n</code></pre> <pre><code>&gt;&gt;&gt; OrderCategoryType.MARKET\n1\n</code></pre> <pre><code>&gt;&gt;&gt; OrderCategoryType.STOP_LIMIT_OR_STOP_MARKET\n2\n</code></pre> <pre><code>&gt;&gt;&gt; OrderCategoryType.OCO\n3\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class OrderCategoryType(StrEnum):\n    \"\"\"\n    Order category type.\n\n    Attributes:\n        LIMIT (str): Limit.\n        MARKET (str): Market.\n        STOP_LIMIT_OR_STOP_MARKET (str): Stop limit or stop market.\n        OCO (str): OCO.\n\n    Examples:\n        &gt;&gt;&gt; OrderCategoryType.LIMIT\n        0\n\n        &gt;&gt;&gt; OrderCategoryType.MARKET\n        1\n\n        &gt;&gt;&gt; OrderCategoryType.STOP_LIMIT_OR_STOP_MARKET\n        2\n\n        &gt;&gt;&gt; OrderCategoryType.OCO\n        3\n    \"\"\"\n\n    LIMIT = \"0\"\n    MARKET = \"1\"\n    STOP_LIMIT_OR_STOP_MARKET = \"2\"\n    OCO = \"3\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.OrderStatus","title":"<code>OrderStatus</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Order status.</p> <p>Attributes:</p> Name Type Description <code>OPEN</code> <code>str</code> <p>Open.</p> <code>DONE_OR_CANCELLED</code> <code>str</code> <p>Done or cancelled.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderStatus.OPEN\n0\n</code></pre> <pre><code>&gt;&gt;&gt; OrderStatus.DONE_OR_CANCELLED\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class OrderStatus(StrEnum):\n    \"\"\"\n    Order status.\n\n    Attributes:\n        OPEN (str): Open.\n        DONE_OR_CANCELLED (str): Done or cancelled.\n\n    Examples:\n        &gt;&gt;&gt; OrderStatus.OPEN\n        0\n\n        &gt;&gt;&gt; OrderStatus.DONE_OR_CANCELLED\n        1\n    \"\"\"\n\n    OPEN = \"0\"\n    DONE_OR_CANCELLED = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.OrderType","title":"<code>OrderType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Order type.</p> <p>Attributes:</p> Name Type Description <code>SELL</code> <p>Sell.</p> <code>BUY</code> <p>Buy.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderType.SELL\n0\n</code></pre> <pre><code>&gt;&gt;&gt; OrderType.BUY\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class OrderType(StrEnum):\n    \"\"\"\n    Order type.\n\n    Attributes:\n        SELL: Sell.\n        BUY: Buy.\n\n    Examples:\n        &gt;&gt;&gt; OrderType.SELL\n        0\n\n        &gt;&gt;&gt; OrderType.BUY\n        1\n    \"\"\"\n\n    SELL = \"0\"\n    BUY = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.ReasonType","title":"<code>ReasonType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Reason type.</p> <p>Attributes:</p> Name Type Description <code>DEPOSIT</code> <code>str</code> <p>Deposit.</p> <code>WITHDRAWAL</code> <code>str</code> <p>Withdrawal.</p> <code>PROFESSIONAL_TRADING</code> <code>str</code> <p>Professional trading.</p> <code>PROFESSIONAL_TRADING_REFERRAL_COMMISSION</code> <code>str</code> <p>Professional trading referral commission.</p> <code>INSTANT_TRADING</code> <code>str</code> <p>Instant trading.</p> <code>SUPPORT</code> <code>str</code> <p>Support.</p> <code>DEPOSIT_WITH_PAYMENT_ID</code> <code>str</code> <p>Deposit with payment ID.</p> <code>GIFT_CODE</code> <code>str</code> <p>Gift code.</p> <code>INSTANT_TRADING_REFERRAL_COMMISSION</code> <code>str</code> <p>Instant trading referral commission.</p> <code>REFERRAL_COMMISSION</code> <code>str</code> <p>Referral commission.</p> <code>SMALL_ASSET_TRADING</code> <code>str</code> <p>Small asset trading.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ReasonType.DEPOSIT\n0\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.WITHDRAWAL\n1\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.PROFESSIONAL_TRADING\n2\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.PROFESSIONAL_TRADING_REFERRAL_COMMISSION\n3\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.INSTANT_TRADING\n6\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.SUPPORT\n7\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.DEPOSIT_WITH_PAYMENT_ID\n8\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.GIFT_CODE\n9\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.INSTANT_TRADING_REFERRAL_COMMISSION\n10\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.REFERRAL_COMMISSION\n11\n</code></pre> <pre><code>&gt;&gt;&gt; ReasonType.SMALL_ASSET_TRADING\n12\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class ReasonType(StrEnum):\n    \"\"\"\n    Reason type.\n\n    Attributes:\n        DEPOSIT (str): Deposit.\n        WITHDRAWAL (str): Withdrawal.\n        PROFESSIONAL_TRADING (str): Professional trading.\n        PROFESSIONAL_TRADING_REFERRAL_COMMISSION (str): Professional trading referral commission.\n        INSTANT_TRADING (str): Instant trading.\n        SUPPORT (str): Support.\n        DEPOSIT_WITH_PAYMENT_ID (str): Deposit with payment ID.\n        GIFT_CODE (str): Gift code.\n        INSTANT_TRADING_REFERRAL_COMMISSION (str): Instant trading referral commission.\n        REFERRAL_COMMISSION (str): Referral commission.\n        SMALL_ASSET_TRADING (str): Small asset trading.\n\n    Examples:\n        &gt;&gt;&gt; ReasonType.DEPOSIT\n        0\n\n        &gt;&gt;&gt; ReasonType.WITHDRAWAL\n        1\n\n        &gt;&gt;&gt; ReasonType.PROFESSIONAL_TRADING\n        2\n\n        &gt;&gt;&gt; ReasonType.PROFESSIONAL_TRADING_REFERRAL_COMMISSION\n        3\n\n        &gt;&gt;&gt; ReasonType.INSTANT_TRADING\n        6\n\n        &gt;&gt;&gt; ReasonType.SUPPORT\n        7\n\n        &gt;&gt;&gt; ReasonType.DEPOSIT_WITH_PAYMENT_ID\n        8\n\n        &gt;&gt;&gt; ReasonType.GIFT_CODE\n        9\n\n        &gt;&gt;&gt; ReasonType.INSTANT_TRADING_REFERRAL_COMMISSION\n        10\n\n        &gt;&gt;&gt; ReasonType.REFERRAL_COMMISSION\n        11\n\n        &gt;&gt;&gt; ReasonType.SMALL_ASSET_TRADING\n        12\n    \"\"\"\n\n    DEPOSIT = \"0\"\n    WITHDRAWAL = \"1\"\n    PROFESSIONAL_TRADING = \"2\"\n    PROFESSIONAL_TRADING_REFERRAL_COMMISSION = \"3\"\n    INSTANT_TRADING = \"6\"\n    SUPPORT = \"7\"\n    DEPOSIT_WITH_PAYMENT_ID = \"8\"\n    GIFT_CODE = \"9\"\n    INSTANT_TRADING_REFERRAL_COMMISSION = \"10\"\n    REFERRAL_COMMISSION = \"11\"\n    SMALL_ASSET_TRADING = \"12\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.StrEnum","title":"<code>StrEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enum class for older Python versions</p> Source code in <code>src/bit24/enums.py</code> <pre><code>class StrEnum(str, Enum):  # type: ignore[no-redef] # noqa: UP042\n    \"\"\"Enum class for older Python versions\"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: The string representation.\n        \"\"\"\n        return str(self.value)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Representation.\n\n        Returns:\n            str: The representation.\n        \"\"\"\n        return str(self.value)\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.StrEnum.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The representation.</p> Source code in <code>src/bit24/enums.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Representation.\n\n    Returns:\n        str: The representation.\n    \"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.StrEnum.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation.</p> Source code in <code>src/bit24/enums.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: The string representation.\n    \"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.TransactionType","title":"<code>TransactionType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Transaction type.</p> <p>Attributes:</p> Name Type Description <code>DECREASING</code> <code>str</code> <p>Decreasing.</p> <code>INCREASING</code> <code>str</code> <p>Increasing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TransactionType.DECREASING\n0\n</code></pre> <pre><code>&gt;&gt;&gt; TransactionType.INCREASING\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class TransactionType(StrEnum):\n    \"\"\"\n    Transaction type.\n\n    Attributes:\n        DECREASING (str): Decreasing.\n        INCREASING (str): Increasing.\n\n    Examples:\n        &gt;&gt;&gt; TransactionType.DECREASING\n        0\n\n        &gt;&gt;&gt; TransactionType.INCREASING\n        1\n    \"\"\"\n\n    DECREASING = \"0\"\n    INCREASING = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.WithoutIrt","title":"<code>WithoutIrt</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Without IRT.</p> <p>Attributes:</p> Name Type Description <code>ALL</code> <code>str</code> <p>All.</p> <code>WITHOUT_IRT</code> <code>str</code> <p>Without IRT.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithoutIrt.ALL\n0\n</code></pre> <pre><code>&gt;&gt;&gt; WithoutIrt.WITHOUT_IRT\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class WithoutIrt(StrEnum):\n    \"\"\"\n    Without IRT.\n\n    Attributes:\n        ALL (str): All.\n        WITHOUT_IRT (str): Without IRT.\n\n    Examples:\n        &gt;&gt;&gt; WithoutIrt.ALL\n        0\n\n        &gt;&gt;&gt; WithoutIrt.WITHOUT_IRT\n        1\n    \"\"\"\n\n    ALL = \"0\"\n    WITHOUT_IRT = \"1\"\n</code></pre>"},{"location":"reference/enums/#src.bit24.enums.WithoutZero","title":"<code>WithoutZero</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Without zero.</p> <p>Attributes:</p> Name Type Description <code>ALL</code> <code>str</code> <p>All.</p> <code>WITHOUT_ZERO</code> <code>str</code> <p>Without zero.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithoutZero.ALL\n0\n</code></pre> <pre><code>&gt;&gt;&gt; WithoutZero.WITHOUT_ZERO\n1\n</code></pre> Source code in <code>src/bit24/enums.py</code> <pre><code>class WithoutZero(StrEnum):\n    \"\"\"\n    Without zero.\n\n    Attributes:\n        ALL (str): All.\n        WITHOUT_ZERO (str): Without zero.\n\n    Examples:\n        &gt;&gt;&gt; WithoutZero.ALL\n        0\n\n        &gt;&gt;&gt; WithoutZero.WITHOUT_ZERO\n        1\n    \"\"\"\n\n    ALL = \"0\"\n    WITHOUT_ZERO = \"1\"\n</code></pre>"},{"location":"reference/exceptions/","title":"exceptions","text":""},{"location":"reference/exceptions/#src.bit24.exceptions--exceptions","title":"Exceptions.","text":"<p>Exceptions for the bit24 package.</p>"},{"location":"reference/exceptions/#src.bit24.exceptions--classes","title":"Classes:","text":"<ul> <li><code>APIError</code>: API Exception.</li> <li><code>RequestError</code>: Request Exception.</li> </ul>"},{"location":"reference/exceptions/#src.bit24.exceptions.APIError","title":"<code>APIError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>API Exception.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>URL.</p> <code>request</code> <code>Http</code> <p>Request.</p> <code>response</code> <code>HttpResponse</code> <p>Response.</p> <code>message</code> <p>(str): Message.</p> Source code in <code>src/bit24/exceptions.py</code> <pre><code>class APIError(Exception):\n    \"\"\"\n    API Exception.\n\n    Attributes:\n        url (str): URL.\n        request (t.Http): Request.\n        response (t.HttpResponse): Response.\n        message: (str): Message.\n    \"\"\"\n\n    def __init__(self, response: t.HttpResponse, status_code: int, text: str):\n        \"\"\"\n        Constructor.\n\n        Args:\n            response (HttpResponse): Response.\n            status_code (int): Status code.\n            text (str): Text.\n        \"\"\"\n        self.request = getattr(response, \"request\", None)\n        self.url = getattr(response, \"url\", None)\n        self.response = response\n\n        try:\n            json_res: rt.BaseResponse = json.loads(text)\n        except ValueError:\n            self.message = f\"Invalid JSON error message from Bit24: {response.text}\"\n        else:\n            error: rt.Error | dict[str, Any] = json_res.get(\"error\", {}) or {}\n            self.status_code = json_res.get(\"status_code\", status_code)\n            self.message = error.get(\"message\", \"Unknown error\") or \"Unknown error\"\n            self.errors = error.get(\"errors\", []) or []\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: String representation.\n        \"\"\"\n        return f\"APIError(code={self.status_code}): '{self.message}' | Errors: {self.errors}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bit24.exceptions.APIError.__init__","title":"<code>__init__(response, status_code, text)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>HttpResponse</code> <p>Response.</p> required <code>status_code</code> <code>int</code> <p>Status code.</p> required <code>text</code> <code>str</code> <p>Text.</p> required Source code in <code>src/bit24/exceptions.py</code> <pre><code>def __init__(self, response: t.HttpResponse, status_code: int, text: str):\n    \"\"\"\n    Constructor.\n\n    Args:\n        response (HttpResponse): Response.\n        status_code (int): Status code.\n        text (str): Text.\n    \"\"\"\n    self.request = getattr(response, \"request\", None)\n    self.url = getattr(response, \"url\", None)\n    self.response = response\n\n    try:\n        json_res: rt.BaseResponse = json.loads(text)\n    except ValueError:\n        self.message = f\"Invalid JSON error message from Bit24: {response.text}\"\n    else:\n        error: rt.Error | dict[str, Any] = json_res.get(\"error\", {}) or {}\n        self.status_code = json_res.get(\"status_code\", status_code)\n        self.message = error.get(\"message\", \"Unknown error\") or \"Unknown error\"\n        self.errors = error.get(\"errors\", []) or []\n</code></pre>"},{"location":"reference/exceptions/#src.bit24.exceptions.APIError.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation.</p> Source code in <code>src/bit24/exceptions.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: String representation.\n    \"\"\"\n    return f\"APIError(code={self.status_code}): '{self.message}' | Errors: {self.errors}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bit24.exceptions.RequestError","title":"<code>RequestError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Request Exception.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> Source code in <code>src/bit24/exceptions.py</code> <pre><code>class RequestError(Exception):\n    \"\"\"\n    Request Exception.\n\n    Attributes:\n        message (str): Message.\n    \"\"\"\n\n    def __init__(self, message: str):\n        \"\"\"\n        Constructor.\n\n        Args:\n            message (str): Message.\n        \"\"\"\n        self.message = message\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: String representation.\n        \"\"\"\n        return f\"RequestError: {self.message}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bit24.exceptions.RequestError.__init__","title":"<code>__init__(message)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message.</p> required Source code in <code>src/bit24/exceptions.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"\n    Constructor.\n\n    Args:\n        message (str): Message.\n    \"\"\"\n    self.message = message\n</code></pre>"},{"location":"reference/exceptions/#src.bit24.exceptions.RequestError.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation.</p> Source code in <code>src/bit24/exceptions.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: String representation.\n    \"\"\"\n    return f\"RequestError: {self.message}\"\n</code></pre>"},{"location":"reference/clients/","title":"clients","text":""},{"location":"reference/clients/#src.bit24.clients--clients","title":"Clients","text":"<p>This package contains the clients for the different services that the application uses.</p>"},{"location":"reference/clients/#src.bit24.clients--modules","title":"Modules","text":"<ul> <li>Core - Core client.</li> <li>Abstract - Abstract client.</li> <li>Sync Client - Sync client (use requests).</li> <li>Async Client - Async client (use aiohttp).</li> </ul>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>             Bases: <code>AbstractClient</code>, <code>CoreClient</code></p> <p>Main client class that is used to interact with the API.</p> <p>Attributes:</p> Name Type Description <code>BASE_URL</code> <code>str</code> <p>The base URL of the API.</p> <code>API_VERSION</code> <code>str</code> <p>The API version.</p> <code>REQUEST_TIMEOUT</code> <code>int</code> <p>The request timeout.</p> <code>WITHDRAW_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the withdrawal networks.</p> <code>SUBMIT_WITHDRAW_URI</code> <code>str</code> <p>The URI for submitting a withdrawal.</p> <code>DEPOSIT_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the deposit networks.</p> <code>ASSETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the assets' information.</p> <code>ASSETS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the assets' history.</p> <code>CREATE_ORDER_URI</code> <code>str</code> <p>The URI for creating an order.</p> <code>CANCEL_ORDER_URI</code> <code>str</code> <p>The URI for cancelling an order.</p> <code>ORDERS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the orders' history.</p> <code>MARKETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the markets' information.</p> <code>ORDER_BOOK_URI</code> <code>str</code> <p>The URI for getting the order book.</p> <p>Methods:</p> Name Description <code>_get_headers</code> <p>Get the headers.</p> <code>_get_request_kwargs</code> <p>Get the request keyword arguments.</p> <code>_hmac_signature</code> <p>Generate the HMAC signature.</p> <code>_order_params</code> <p>Order the parameters.</p> <code>_generate_signature</code> <p>Generate the signature.</p> <code>_create_api_uri</code> <p>Create the API URI.</p> <code>_get_kwargs_from_locals</code> <p>Get the keyword arguments from the locals.</p> <code>_init_session</code> <p>Initialize the session.</p> <code>_request</code> <p>Make a request.</p> <code>_request_api</code> <p>Make a request to the API.</p> <code>_get</code> <p>Make a GET request to the API.</p> <code>_post</code> <p>Make a POST request to the API.</p> <code>_handle_response</code> <p>Handle the response.</p> <code>get_withdraw_networks</code> <p>Get the withdrawal networks.</p> <code>submit_withdraw</code> <p>Submit a withdrawal.</p> <code>get_deposit_networks</code> <p>Get the deposit networks.</p> <code>get_assets_information</code> <p>Get the assets' information.</p> <code>get_assets_history</code> <p>Get the assets' history.</p> <code>create_order</code> <p>Create an order.</p> <code>cancel_order</code> <p>Cancel an order.</p> <code>get_orders_history</code> <p>Get the orders' history.</p> <code>get_markets_information</code> <p>Get the markets' information.</p> <code>get_order_book</code> <p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>Optional[Dict[str, Any]]</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>Optional[Dict[str, Any]]</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>class AsyncClient(AbstractClient, CoreClient):\n    \"\"\"\n    Main client class that is used to interact with the API.\n\n    Attributes:\n        BASE_URL (str): The base URL of the API.\n        API_VERSION (str): The API version.\n        REQUEST_TIMEOUT (int): The request timeout.\n        WITHDRAW_NETWORKS_URI (str): The URI for getting the withdrawal networks.\n        SUBMIT_WITHDRAW_URI (str): The URI for submitting a withdrawal.\n        DEPOSIT_NETWORKS_URI (str): The URI for getting the deposit networks.\n        ASSETS_INFORMATION_URI (str): The URI for getting the assets' information.\n        ASSETS_HISTORY_URI (str): The URI for getting the assets' history.\n        CREATE_ORDER_URI (str): The URI for creating an order.\n        CANCEL_ORDER_URI (str): The URI for cancelling an order.\n        ORDERS_HISTORY_URI (str): The URI for getting the orders' history.\n        MARKETS_INFORMATION_URI (str): The URI for getting the markets' information.\n        ORDER_BOOK_URI (str): The URI for getting the order book.\n\n    Methods:\n        _get_headers: Get the headers.\n        _get_request_kwargs: Get the request keyword arguments.\n        _hmac_signature: Generate the HMAC signature.\n        _order_params: Order the parameters.\n        _generate_signature: Generate the signature.\n        _create_api_uri: Create the API URI.\n        _get_kwargs_from_locals: Get the keyword arguments from the locals.\n        _init_session: Initialize the session.\n        _request: Make a request.\n        _request_api: Make a request to the API.\n        _get: Make a GET request to the API.\n        _post: Make a POST request to the API.\n        _handle_response: Handle the response.\n        get_withdraw_networks: Get the withdrawal networks.\n        submit_withdraw: Submit a withdrawal.\n        get_deposit_networks: Get the deposit networks.\n        get_assets_information: Get the assets' information.\n        get_assets_history: Get the assets' history.\n        create_order: Create an order.\n        cancel_order: Cancel an order.\n        get_orders_history: Get the orders' history.\n        get_markets_information: Get the markets' information.\n        get_order_book: Get the order book.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (Optional[Dict[str, Any]]): The session parameters.\n        requests_params (Optional[Dict[str, Any]]): The requests parameters.\n    \"\"\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        api_key: str,\n        api_secret: str | None = None,\n        session_params: dict[str, Any] | None = None,\n        requests_params: dict[str, Any] | None = None,\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the core client.\n\n        Args:\n            api_key (str): The API key.\n            api_secret (str | None): The API secret.\n            session_params (dict[str, Any] | None): The session parameters.\n            requests_params (dict[str, Any] | None): The requests parameters.\n            loop (Optional[AbstractEventLoop]): The event loop.\n        \"\"\"\n        super().__init__(api_key, api_secret, session_params, requests_params)\n        self.loop = loop or get_loop()\n        self.session = self._init_session()\n\n    def _init_session(self) -&gt; aiohttp.ClientSession:\n        \"\"\"\n        (Private)\n\n        Initialize the session.\n\n        Returns:\n            ClientSession: The session.\n        \"\"\"\n        return aiohttp.ClientSession(\n            loop=self.loop,\n            headers=self._get_headers(),\n            **self._session_params,\n        )\n\n    async def _request(  # type: ignore[override]\n        self,\n        method: enums.HTTPMethod | str,\n        uri: str,\n        signed: bool = False,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            uri (str): The URI.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        async with getattr(self.session, method.lower())(uri, **kwargs) as response:\n            return await self._handle_response(response)\n\n    async def _request_api(  # type: ignore[override]\n        self,\n        method: enums.HTTPMethod | str,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        uri = self._create_api_uri(path, version)\n        return await self._request(method, uri, signed, **kwargs)\n\n    async def _get(  # type: ignore[override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a GET request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return await self._request_api(\n            enums.HTTPMethod.GET, path, signed, version, **kwargs\n        )\n\n    async def _post(  # type: ignore[override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a POST request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return await self._request_api(\n            enums.HTTPMethod.POST, path, signed, version, **kwargs\n        )\n\n    @staticmethod\n    async def _handle_response(response: aiohttp.ClientResponse) -&gt; rt.BaseResponse:  # type: ignore[override]\n        \"\"\"\n        (Private)\n\n        Handle the response.\n\n        Args:\n            response (HttpResponse): The response.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        if not str(response.status).startswith(\"2\"):\n            raise APIError(response, response.status, await response.text())\n        try:\n            _: rt.BaseResponse = await response.json()\n        except ValueError as exc:\n            msg = f\"Invalid Response: {await response.text()}\"\n            raise RequestError(msg) from exc\n        else:\n            return _\n\n    async def get_withdraw_networks(  # type: ignore[override]\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n        \"\"\"\n        Get the withdrawal networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse[WithdrawalNetworksResponse]: The response.\n\n        Raises:\n            APIError: An error occurred.\n            RequestError: An error occurred.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n\n    async def submit_withdraw(  # type: ignore[override] # noqa: PLR0913\n        self,\n        symbol: str,\n        network_id: int,\n        address: str,\n        value: str,\n        memo: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n        \"\"\"\n        Submit a withdrawal.\n\n        Args:\n            symbol (str): The symbol\n            network_id (int): The network ID.\n            address (str): The address.\n            value (str): The value.\n            memo (str | None): The memo.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n\n    async def get_deposit_networks(  # type: ignore[override]\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n        \"\"\"\n        Get the deposit networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n\n    async def get_assets_information(  # type: ignore[override]\n        self,\n        name: str | None = None,\n        alphabet: str | None = None,\n        without_irt: str | None = None,\n        without_zero: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n        \"\"\"\n        Get the assets' information.\n\n        Args:\n            name (str | None): The name.\n            alphabet (str | None): The starting alphabet.\n            without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n            without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `without_irt` and `without_zero` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n\n    async def get_assets_history(  # type: ignore[override]\n        self,\n        type: str | enums.TransactionType | None = None,  # noqa: A002\n        symbol: str | None = None,\n        coin_type: str | enums.CoinType | None = None,\n        reason_type: str | enums.ReasonType | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n        \"\"\"\n        Get the assets' history.\n\n        Args:\n            type (str | enums.TransactionType | None): The transaction type.\n            symbol (str | None): The symbol.\n            coin_type (str | enums.CoinType | None): The coin type.\n            reason_type (str | enums.ReasonType | None): The reason type.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ASSETS_HISTORY_URI, **kwargs)\n\n    async def create_order(  # type: ignore[override] # noqa: PLR0913, PLR0917\n        self,\n        base_coin_symbol: str,\n        quote_coin_symbol: str,\n        category_type: str | enums.OrderCategoryType,\n        type: str | enums.OrderType,  # noqa: A002\n        amount: float | None = None,\n        price: float | None = None,\n        quote_coin_amount: float | None = None,\n        stop_price: float | None = None,\n        trigger_price: float | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n        \"\"\"\n        Create an order.\n\n        Args:\n            base_coin_symbol (str): The base coin symbol.\n            quote_coin_symbol (str): The quote coin symbol.\n            category_type (str | enums.OrderCategoryType): The order category type.\n            type (str | enums.OrderType): The order type.\n            amount (float | None): The amount.\n            price (float | None): The price.\n            quote_coin_amount (float | None): The quote coin amount.\n            stop_price (float | None): The stop price.\n            trigger_price (float | None): The trigger price.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `category_type` and `type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n\n    async def cancel_order(  # type: ignore[override]\n        self, order_id: int, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n        \"\"\"\n        Cancel an order.\n\n        Args:\n            order_id (int): The order ID.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n\n    async def get_orders_history(  # type: ignore[override] # noqa: PLR0913, PLR0917\n        self,\n        is_trade: str | enums.IsTrade,\n        market_id: int | None = None,\n        type: str | enums.OrderType | None = None,  # noqa: A002\n        category_type: str | enums.OrderCategoryType | None = None,\n        from_date: str | None = None,\n        to_date: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n        \"\"\"\n        Get the orders' history.\n\n        Args:\n            is_trade (str | enums.IsTrade): If the order is a trade.\n            market_id (int | None): The market ID.\n            type (str | enums.OrderType | None): The order type.\n            category_type (str | enums.OrderCategoryType | None): The order category type.\n            from_date (str | None): The start date.\n            to_date (str | None): The end date.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ORDERS_HISTORY_URI, **kwargs)\n\n    async def get_markets_information(  # type: ignore[override]\n        self, page: int | None = None, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n        \"\"\"\n        Get the markets' information.\n\n        Args:\n            page (int | None): The page.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n\n    async def get_order_book(  # type: ignore[override]\n        self, base_coin: str, quote_coin: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n        \"\"\"\n        Get the order book.\n\n        Args:\n            base_coin (str): The base coin.\n            quote_coin (str): The quote coin.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ORDER_BOOK_URI, **kwargs)\n\n    async def close_connection(self) -&gt; None:  # type: ignore[override]\n        \"\"\"\n        Close the connection.\n\n        Returns:\n            None\n        \"\"\"\n        await self.session.close()\n        await asyncio.sleep(0.250)\n        self.loop.stop()\n        self.loop.close()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.__init__","title":"<code>__init__(api_key, api_secret=None, session_params=None, requests_params=None, loop=None)</code>","text":"<p>Initialize the core client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>dict[str, Any] | None</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>dict[str, Any] | None</code> <p>The requests parameters.</p> <code>None</code> <code>loop</code> <code>Optional[AbstractEventLoop]</code> <p>The event loop.</p> <code>None</code> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    api_key: str,\n    api_secret: str | None = None,\n    session_params: dict[str, Any] | None = None,\n    requests_params: dict[str, Any] | None = None,\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the core client.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (dict[str, Any] | None): The session parameters.\n        requests_params (dict[str, Any] | None): The requests parameters.\n        loop (Optional[AbstractEventLoop]): The event loop.\n    \"\"\"\n    super().__init__(api_key, api_secret, session_params, requests_params)\n    self.loop = loop or get_loop()\n    self.session = self._init_session()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>async</code>","text":"<p>Cancel an order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>int</code> <p>The order ID.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CancelOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def cancel_order(  # type: ignore[override]\n    self, order_id: int, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n    \"\"\"\n    Cancel an order.\n\n    Args:\n        order_id (int): The order ID.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.close_connection","title":"<code>close_connection()</code>  <code>async</code>","text":"<p>Close the connection.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def close_connection(self) -&gt; None:  # type: ignore[override]\n    \"\"\"\n    Close the connection.\n\n    Returns:\n        None\n    \"\"\"\n    await self.session.close()\n    await asyncio.sleep(0.250)\n    self.loop.stop()\n    self.loop.close()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.create_order","title":"<code>create_order(base_coin_symbol, quote_coin_symbol, category_type, type, amount=None, price=None, quote_coin_amount=None, stop_price=None, trigger_price=None, **kwargs)</code>  <code>async</code>","text":"<p>Create an order.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin_symbol</code> <code>str</code> <p>The base coin symbol.</p> required <code>quote_coin_symbol</code> <code>str</code> <p>The quote coin symbol.</p> required <code>category_type</code> <code>str | OrderCategoryType</code> <p>The order category type.</p> required <code>type</code> <code>str | OrderType</code> <p>The order type.</p> required <code>amount</code> <code>float | None</code> <p>The amount.</p> <code>None</code> <code>price</code> <code>float | None</code> <p>The price.</p> <code>None</code> <code>quote_coin_amount</code> <code>float | None</code> <p>The quote coin amount.</p> <code>None</code> <code>stop_price</code> <code>float | None</code> <p>The stop price.</p> <code>None</code> <code>trigger_price</code> <code>float | None</code> <p>The trigger price.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CreateOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>category_type</code> and <code>type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def create_order(  # type: ignore[override] # noqa: PLR0913, PLR0917\n    self,\n    base_coin_symbol: str,\n    quote_coin_symbol: str,\n    category_type: str | enums.OrderCategoryType,\n    type: str | enums.OrderType,  # noqa: A002\n    amount: float | None = None,\n    price: float | None = None,\n    quote_coin_amount: float | None = None,\n    stop_price: float | None = None,\n    trigger_price: float | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n    \"\"\"\n    Create an order.\n\n    Args:\n        base_coin_symbol (str): The base coin symbol.\n        quote_coin_symbol (str): The quote coin symbol.\n        category_type (str | enums.OrderCategoryType): The order category type.\n        type (str | enums.OrderType): The order type.\n        amount (float | None): The amount.\n        price (float | None): The price.\n        quote_coin_amount (float | None): The quote coin amount.\n        stop_price (float | None): The stop price.\n        trigger_price (float | None): The trigger price.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `category_type` and `type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_assets_history","title":"<code>get_assets_history(type=None, symbol=None, coin_type=None, reason_type=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the assets' history.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | TransactionType | None</code> <p>The transaction type.</p> <code>None</code> <code>symbol</code> <code>str | None</code> <p>The symbol.</p> <code>None</code> <code>coin_type</code> <code>str | CoinType | None</code> <p>The coin type.</p> <code>None</code> <code>reason_type</code> <code>str | ReasonType | None</code> <p>The reason type.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetsHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>type</code>, <code>coin_type</code>, and <code>reason_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_assets_history(  # type: ignore[override]\n    self,\n    type: str | enums.TransactionType | None = None,  # noqa: A002\n    symbol: str | None = None,\n    coin_type: str | enums.CoinType | None = None,\n    reason_type: str | enums.ReasonType | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n    \"\"\"\n    Get the assets' history.\n\n    Args:\n        type (str | enums.TransactionType | None): The transaction type.\n        symbol (str | None): The symbol.\n        coin_type (str | enums.CoinType | None): The coin type.\n        reason_type (str | enums.ReasonType | None): The reason type.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ASSETS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_assets_information","title":"<code>get_assets_information(name=None, alphabet=None, without_irt=None, without_zero=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the assets' information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name.</p> <code>None</code> <code>alphabet</code> <code>str | None</code> <p>The starting alphabet.</p> <code>None</code> <code>without_irt</code> <code>str | WithoutIrt | None</code> <p>If the IRT should be excluded.</p> <code>None</code> <code>without_zero</code> <code>str | WithoutZero | None</code> <p>If the zero balances should be excluded.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetInformationResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>without_irt</code> and <code>without_zero</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_assets_information(  # type: ignore[override]\n    self,\n    name: str | None = None,\n    alphabet: str | None = None,\n    without_irt: str | None = None,\n    without_zero: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n    \"\"\"\n    Get the assets' information.\n\n    Args:\n        name (str | None): The name.\n        alphabet (str | None): The starting alphabet.\n        without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n        without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `without_irt` and `without_zero` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_deposit_networks","title":"<code>get_deposit_networks(symbol, **kwargs)</code>  <code>async</code>","text":"<p>Get the deposit networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[DepositNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_deposit_networks(  # type: ignore[override]\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n    \"\"\"\n    Get the deposit networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_markets_information","title":"<code>get_markets_information(page=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the markets' information.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int | None</code> <p>The page.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[MarketListResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_markets_information(  # type: ignore[override]\n    self, page: int | None = None, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n    \"\"\"\n    Get the markets' information.\n\n    Args:\n        page (int | None): The page.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_order_book","title":"<code>get_order_book(base_coin, quote_coin, **kwargs)</code>  <code>async</code>","text":"<p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin</code> <code>str</code> <p>The base coin.</p> required <code>quote_coin</code> <code>str</code> <p>The quote coin.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[dict[str, OrderBookResponse]]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_order_book(  # type: ignore[override]\n    self, base_coin: str, quote_coin: str, **kwargs: Any\n) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n    \"\"\"\n    Get the order book.\n\n    Args:\n        base_coin (str): The base coin.\n        quote_coin (str): The quote coin.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ORDER_BOOK_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_orders_history","title":"<code>get_orders_history(is_trade, market_id=None, type=None, category_type=None, from_date=None, to_date=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the orders' history.</p> <p>Parameters:</p> Name Type Description Default <code>is_trade</code> <code>str | IsTrade</code> <p>If the order is a trade.</p> required <code>market_id</code> <code>int | None</code> <p>The market ID.</p> <code>None</code> <code>type</code> <code>str | OrderType | None</code> <p>The order type.</p> <code>None</code> <code>category_type</code> <code>str | OrderCategoryType | None</code> <p>The order category type.</p> <code>None</code> <code>from_date</code> <code>str | None</code> <p>The start date.</p> <code>None</code> <code>to_date</code> <code>str | None</code> <p>The end date.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[OrdersHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>is_trade</code>, <code>type</code>, and <code>category_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_orders_history(  # type: ignore[override] # noqa: PLR0913, PLR0917\n    self,\n    is_trade: str | enums.IsTrade,\n    market_id: int | None = None,\n    type: str | enums.OrderType | None = None,  # noqa: A002\n    category_type: str | enums.OrderCategoryType | None = None,\n    from_date: str | None = None,\n    to_date: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n    \"\"\"\n    Get the orders' history.\n\n    Args:\n        is_trade (str | enums.IsTrade): If the order is a trade.\n        market_id (int | None): The market ID.\n        type (str | enums.OrderType | None): The order type.\n        category_type (str | enums.OrderCategoryType | None): The order category type.\n        from_date (str | None): The start date.\n        to_date (str | None): The end date.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ORDERS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.get_withdraw_networks","title":"<code>get_withdraw_networks(symbol, **kwargs)</code>  <code>async</code>","text":"<p>Get the withdrawal networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[WithdrawalNetworksResponse]</code> <p>BaseResponse[WithdrawalNetworksResponse]: The response.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>An error occurred.</p> <code>RequestError</code> <p>An error occurred.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_withdraw_networks(  # type: ignore[override]\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n    \"\"\"\n    Get the withdrawal networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        BaseResponse[WithdrawalNetworksResponse]: The response.\n\n    Raises:\n        APIError: An error occurred.\n        RequestError: An error occurred.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.AsyncClient.submit_withdraw","title":"<code>submit_withdraw(symbol, network_id, address, value, memo=None, **kwargs)</code>  <code>async</code>","text":"<p>Submit a withdrawal.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol</p> required <code>network_id</code> <code>int</code> <p>The network ID.</p> required <code>address</code> <code>str</code> <p>The address.</p> required <code>value</code> <code>str</code> <p>The value.</p> required <code>memo</code> <code>str | None</code> <p>The memo.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[SubmitWithdrawResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def submit_withdraw(  # type: ignore[override] # noqa: PLR0913\n    self,\n    symbol: str,\n    network_id: int,\n    address: str,\n    value: str,\n    memo: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n    \"\"\"\n    Submit a withdrawal.\n\n    Args:\n        symbol (str): The symbol\n        network_id (int): The network ID.\n        address (str): The address.\n        value (str): The value.\n        memo (str | None): The memo.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client","title":"<code>Client</code>","text":"<p>             Bases: <code>AbstractClient</code>, <code>CoreClient</code></p> <p>Main client class that is used to interact with the API.</p> <p>Attributes:</p> Name Type Description <code>BASE_URL</code> <code>str</code> <p>The base URL of the API.</p> <code>API_VERSION</code> <code>str</code> <p>The API version.</p> <code>REQUEST_TIMEOUT</code> <code>int</code> <p>The request timeout.</p> <code>WITHDRAW_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the withdrawal networks.</p> <code>SUBMIT_WITHDRAW_URI</code> <code>str</code> <p>The URI for submitting a withdrawal.</p> <code>DEPOSIT_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the deposit networks.</p> <code>ASSETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the assets' information.</p> <code>ASSETS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the assets' history.</p> <code>CREATE_ORDER_URI</code> <code>str</code> <p>The URI for creating an order.</p> <code>CANCEL_ORDER_URI</code> <code>str</code> <p>The URI for cancelling an order.</p> <code>ORDERS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the orders' history.</p> <code>MARKETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the markets' information.</p> <code>ORDER_BOOK_URI</code> <code>str</code> <p>The URI for getting the order book.</p> <p>Methods:</p> Name Description <code>_get_headers</code> <p>Get the headers.</p> <code>_get_request_kwargs</code> <p>Get the request keyword arguments.</p> <code>_hmac_signature</code> <p>Generate the HMAC signature.</p> <code>_order_params</code> <p>Order the parameters.</p> <code>_generate_signature</code> <p>Generate the signature.</p> <code>_create_api_uri</code> <p>Create the API URI.</p> <code>_get_kwargs_from_locals</code> <p>Get the keyword arguments from the locals.</p> <code>_init_session</code> <p>Initialize the session.</p> <code>_request</code> <p>Make a request.</p> <code>_request_api</code> <p>Make a request to the API.</p> <code>_get</code> <p>Make a GET request to the API.</p> <code>_post</code> <p>Make a POST request to the API.</p> <code>_handle_response</code> <p>Handle the response.</p> <code>get_withdraw_networks</code> <p>Get the withdrawal networks.</p> <code>submit_withdraw</code> <p>Submit a withdrawal.</p> <code>get_deposit_networks</code> <p>Get the deposit networks.</p> <code>get_assets_information</code> <p>Get the assets' information.</p> <code>get_assets_history</code> <p>Get the assets' history.</p> <code>create_order</code> <p>Create an order.</p> <code>cancel_order</code> <p>Cancel an order.</p> <code>get_orders_history</code> <p>Get the orders' history.</p> <code>get_markets_information</code> <p>Get the markets' information.</p> <code>get_order_book</code> <p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>Optional[Dict[str, Any]]</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>Optional[Dict[str, Any]]</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/client.py</code> <pre><code>class Client(AbstractClient, CoreClient):\n    \"\"\"\n    Main client class that is used to interact with the API.\n\n    Attributes:\n        BASE_URL (str): The base URL of the API.\n        API_VERSION (str): The API version.\n        REQUEST_TIMEOUT (int): The request timeout.\n        WITHDRAW_NETWORKS_URI (str): The URI for getting the withdrawal networks.\n        SUBMIT_WITHDRAW_URI (str): The URI for submitting a withdrawal.\n        DEPOSIT_NETWORKS_URI (str): The URI for getting the deposit networks.\n        ASSETS_INFORMATION_URI (str): The URI for getting the assets' information.\n        ASSETS_HISTORY_URI (str): The URI for getting the assets' history.\n        CREATE_ORDER_URI (str): The URI for creating an order.\n        CANCEL_ORDER_URI (str): The URI for cancelling an order.\n        ORDERS_HISTORY_URI (str): The URI for getting the orders' history.\n        MARKETS_INFORMATION_URI (str): The URI for getting the markets' information.\n        ORDER_BOOK_URI (str): The URI for getting the order book.\n\n    Methods:\n        _get_headers: Get the headers.\n        _get_request_kwargs: Get the request keyword arguments.\n        _hmac_signature: Generate the HMAC signature.\n        _order_params: Order the parameters.\n        _generate_signature: Generate the signature.\n        _create_api_uri: Create the API URI.\n        _get_kwargs_from_locals: Get the keyword arguments from the locals.\n        _init_session: Initialize the session.\n        _request: Make a request.\n        _request_api: Make a request to the API.\n        _get: Make a GET request to the API.\n        _post: Make a POST request to the API.\n        _handle_response: Handle the response.\n        get_withdraw_networks: Get the withdrawal networks.\n        submit_withdraw: Submit a withdrawal.\n        get_deposit_networks: Get the deposit networks.\n        get_assets_information: Get the assets' information.\n        get_assets_history: Get the assets' history.\n        create_order: Create an order.\n        cancel_order: Cancel an order.\n        get_orders_history: Get the orders' history.\n        get_markets_information: Get the markets' information.\n        get_order_book: Get the order book.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (Optional[Dict[str, Any]]): The session parameters.\n        requests_params (Optional[Dict[str, Any]]): The requests parameters.\n    \"\"\"\n\n    def __init__(\n        self,\n        api_key: str,\n        api_secret: str | None = None,\n        session_params: dict[str, Any] | None = None,\n        requests_params: dict[str, Any] | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the core client.\n\n        Args:\n            api_key (str): The API key.\n            api_secret (str | None): The API secret.\n            session_params (dict[str, Any] | None): The session parameters.\n            requests_params (dict[str, Any] | None): The requests parameters.\n        \"\"\"\n        super().__init__(api_key, api_secret, session_params, requests_params)\n        self.session = self._init_session()\n\n    def _init_session(self) -&gt; requests.Session:\n        \"\"\"\n        (Private)\n\n        Initialize the session.\n\n        Returns:\n            requests.Session: The session.\n        \"\"\"\n        session = requests.Session()\n        session.headers.update(self._get_headers())\n        return session\n\n    def _request(\n        self,\n        method: enums.HTTPMethod | str,\n        uri: str,\n        signed: bool = False,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            uri (str): The URI.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        with getattr(self.session, method.lower())(uri, **kwargs) as response:\n            return self._handle_response(response)\n\n    def _request_api(\n        self,\n        method: enums.HTTPMethod | str,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        uri = self._create_api_uri(path, version)\n        return self._request(method, uri, signed, **kwargs)\n\n    def _get(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a GET request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return self._request_api(enums.HTTPMethod.GET, path, signed, version, **kwargs)\n\n    def _post(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a POST request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return self._request_api(enums.HTTPMethod.POST, path, signed, version, **kwargs)\n\n    @staticmethod\n    def _handle_response(response: requests.Response) -&gt; rt.BaseResponse:  # type: ignore[override]\n        \"\"\"\n        (Private)\n\n        Handle the response.\n\n        Args:\n            response (HttpResponse): The response.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        if not str(response.status_code).startswith(\"2\"):\n            raise APIError(response, response.status_code, response.text)\n        try:\n            _: rt.BaseResponse = response.json()\n        except ValueError as exc:\n            msg = f\"Invalid Response: {response.text}\"\n            raise RequestError(msg) from exc\n        else:\n            return _\n\n    def get_withdraw_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n        \"\"\"\n        Get the withdrawal networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse[WithdrawalNetworksResponse]: The response.\n\n        Raises:\n            APIError: An error occurred.\n            RequestError: An error occurred.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n\n    def submit_withdraw(  # noqa: PLR0913\n        self,\n        symbol: str,\n        network_id: int,\n        address: str,\n        value: str,\n        memo: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n        \"\"\"\n        Submit a withdrawal.\n\n        Args:\n            symbol (str): The symbol\n            network_id (int): The network ID.\n            address (str): The address.\n            value (str): The value.\n            memo (Optional[str]): The memo.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n\n    def get_deposit_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n        \"\"\"\n        Get the deposit networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n\n    def get_assets_information(\n        self,\n        name: str | None = None,\n        alphabet: str | None = None,\n        without_irt: str | None = None,\n        without_zero: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n        \"\"\"\n        Get the assets' information.\n\n        Args:\n            name (str | None): The name.\n            alphabet (str | None): The starting alphabet.\n            without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n            without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `without_irt` and `without_zero` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n\n    def get_assets_history(\n        self,\n        type: str | enums.TransactionType | None = None,  # noqa: A002\n        symbol: str | None = None,\n        coin_type: str | enums.CoinType | None = None,\n        reason_type: str | enums.ReasonType | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n        \"\"\"\n        Get the assets' history.\n\n        Args:\n            type (str | enums.TransactionType): The transaction type.\n            symbol (str | None): The symbol.\n            coin_type (str | enums.CoinType | None): The coin type.\n            reason_type (str | enums.ReasonType | None): The reason type.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ASSETS_HISTORY_URI, **kwargs)\n\n    def create_order(  # noqa: PLR0913, PLR0917\n        self,\n        base_coin_symbol: str,\n        quote_coin_symbol: str,\n        category_type: str | enums.OrderCategoryType,\n        type: str | enums.OrderType,  # noqa: A002\n        amount: float | None = None,\n        price: float | None = None,\n        quote_coin_amount: float | None = None,\n        stop_price: float | None = None,\n        trigger_price: float | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n        \"\"\"\n        Create an order.\n\n        Args:\n            base_coin_symbol (str): The base coin symbol.\n            quote_coin_symbol (str): The quote coin symbol.\n            category_type (str | enums.OrderCategoryType): The order category type.\n            type (str | enums.OrderType): The order type.\n            amount (float | None): The amount.\n            price (float | None): The price.\n            quote_coin_amount (float | None): The quote coin amount.\n            stop_price (float | None): The stop price.\n            trigger_price (float | None): The trigger price.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `category_type` and `type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n\n    def cancel_order(\n        self, order_id: int, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n        \"\"\"\n        Cancel an order.\n\n        Args:\n            order_id (int): The order ID.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n\n    def get_orders_history(  # noqa: PLR0913, PLR0917\n        self,\n        is_trade: str | enums.IsTrade,\n        market_id: int | None = None,\n        type: str | enums.OrderType | None = None,  # noqa: A002\n        category_type: str | enums.OrderCategoryType | None = None,\n        from_date: str | None = None,\n        to_date: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n        \"\"\"\n        Get the orders; history.\n\n        Args:\n            is_trade (str | enums.IsTrade): If the order is a trade.\n            market_id (int | None): The market ID.\n            type (str | enums.OrderType | None): The order type.\n            category_type (str | enums.OrderCategoryType | None): The order category type.\n            from_date (str | None): The start date.\n            to_date (str | None): The end date.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ORDERS_HISTORY_URI, **kwargs)\n\n    def get_markets_information(\n        self, page: int | None = None, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n        \"\"\"\n        Get the markets' information.\n\n        Args:\n            page (int | None): The page.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n\n    def get_order_book(\n        self, base_coin: str, quote_coin: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n        \"\"\"\n        Get the order book.\n\n        Args:\n            base_coin (str): The base coin.\n            quote_coin (str): The quote coin.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ORDER_BOOK_URI, **kwargs)\n\n    def close_connection(self) -&gt; None:\n        \"\"\"\n        Close the connection.\n\n        Returns:\n            None\n        \"\"\"\n        self.session.close()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.__init__","title":"<code>__init__(api_key, api_secret=None, session_params=None, requests_params=None)</code>","text":"<p>Initialize the core client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>dict[str, Any] | None</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>dict[str, Any] | None</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def __init__(\n    self,\n    api_key: str,\n    api_secret: str | None = None,\n    session_params: dict[str, Any] | None = None,\n    requests_params: dict[str, Any] | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the core client.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (dict[str, Any] | None): The session parameters.\n        requests_params (dict[str, Any] | None): The requests parameters.\n    \"\"\"\n    super().__init__(api_key, api_secret, session_params, requests_params)\n    self.session = self._init_session()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>","text":"<p>Cancel an order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>int</code> <p>The order ID.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CancelOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def cancel_order(\n    self, order_id: int, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n    \"\"\"\n    Cancel an order.\n\n    Args:\n        order_id (int): The order ID.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.close_connection","title":"<code>close_connection()</code>","text":"<p>Close the connection.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def close_connection(self) -&gt; None:\n    \"\"\"\n    Close the connection.\n\n    Returns:\n        None\n    \"\"\"\n    self.session.close()\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.create_order","title":"<code>create_order(base_coin_symbol, quote_coin_symbol, category_type, type, amount=None, price=None, quote_coin_amount=None, stop_price=None, trigger_price=None, **kwargs)</code>","text":"<p>Create an order.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin_symbol</code> <code>str</code> <p>The base coin symbol.</p> required <code>quote_coin_symbol</code> <code>str</code> <p>The quote coin symbol.</p> required <code>category_type</code> <code>str | OrderCategoryType</code> <p>The order category type.</p> required <code>type</code> <code>str | OrderType</code> <p>The order type.</p> required <code>amount</code> <code>float | None</code> <p>The amount.</p> <code>None</code> <code>price</code> <code>float | None</code> <p>The price.</p> <code>None</code> <code>quote_coin_amount</code> <code>float | None</code> <p>The quote coin amount.</p> <code>None</code> <code>stop_price</code> <code>float | None</code> <p>The stop price.</p> <code>None</code> <code>trigger_price</code> <code>float | None</code> <p>The trigger price.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CreateOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>category_type</code> and <code>type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def create_order(  # noqa: PLR0913, PLR0917\n    self,\n    base_coin_symbol: str,\n    quote_coin_symbol: str,\n    category_type: str | enums.OrderCategoryType,\n    type: str | enums.OrderType,  # noqa: A002\n    amount: float | None = None,\n    price: float | None = None,\n    quote_coin_amount: float | None = None,\n    stop_price: float | None = None,\n    trigger_price: float | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n    \"\"\"\n    Create an order.\n\n    Args:\n        base_coin_symbol (str): The base coin symbol.\n        quote_coin_symbol (str): The quote coin symbol.\n        category_type (str | enums.OrderCategoryType): The order category type.\n        type (str | enums.OrderType): The order type.\n        amount (float | None): The amount.\n        price (float | None): The price.\n        quote_coin_amount (float | None): The quote coin amount.\n        stop_price (float | None): The stop price.\n        trigger_price (float | None): The trigger price.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `category_type` and `type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_assets_history","title":"<code>get_assets_history(type=None, symbol=None, coin_type=None, reason_type=None, **kwargs)</code>","text":"<p>Get the assets' history.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | TransactionType</code> <p>The transaction type.</p> <code>None</code> <code>symbol</code> <code>str | None</code> <p>The symbol.</p> <code>None</code> <code>coin_type</code> <code>str | CoinType | None</code> <p>The coin type.</p> <code>None</code> <code>reason_type</code> <code>str | ReasonType | None</code> <p>The reason type.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetsHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>type</code>, <code>coin_type</code>, and <code>reason_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_assets_history(\n    self,\n    type: str | enums.TransactionType | None = None,  # noqa: A002\n    symbol: str | None = None,\n    coin_type: str | enums.CoinType | None = None,\n    reason_type: str | enums.ReasonType | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n    \"\"\"\n    Get the assets' history.\n\n    Args:\n        type (str | enums.TransactionType): The transaction type.\n        symbol (str | None): The symbol.\n        coin_type (str | enums.CoinType | None): The coin type.\n        reason_type (str | enums.ReasonType | None): The reason type.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ASSETS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_assets_information","title":"<code>get_assets_information(name=None, alphabet=None, without_irt=None, without_zero=None, **kwargs)</code>","text":"<p>Get the assets' information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name.</p> <code>None</code> <code>alphabet</code> <code>str | None</code> <p>The starting alphabet.</p> <code>None</code> <code>without_irt</code> <code>str | WithoutIrt | None</code> <p>If the IRT should be excluded.</p> <code>None</code> <code>without_zero</code> <code>str | WithoutZero | None</code> <p>If the zero balances should be excluded.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetInformationResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>without_irt</code> and <code>without_zero</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_assets_information(\n    self,\n    name: str | None = None,\n    alphabet: str | None = None,\n    without_irt: str | None = None,\n    without_zero: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n    \"\"\"\n    Get the assets' information.\n\n    Args:\n        name (str | None): The name.\n        alphabet (str | None): The starting alphabet.\n        without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n        without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `without_irt` and `without_zero` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_deposit_networks","title":"<code>get_deposit_networks(symbol, **kwargs)</code>","text":"<p>Get the deposit networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[DepositNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_deposit_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n    \"\"\"\n    Get the deposit networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_markets_information","title":"<code>get_markets_information(page=None, **kwargs)</code>","text":"<p>Get the markets' information.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int | None</code> <p>The page.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[MarketListResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_markets_information(\n    self, page: int | None = None, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n    \"\"\"\n    Get the markets' information.\n\n    Args:\n        page (int | None): The page.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_order_book","title":"<code>get_order_book(base_coin, quote_coin, **kwargs)</code>","text":"<p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin</code> <code>str</code> <p>The base coin.</p> required <code>quote_coin</code> <code>str</code> <p>The quote coin.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[dict[str, OrderBookResponse]]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_order_book(\n    self, base_coin: str, quote_coin: str, **kwargs: Any\n) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n    \"\"\"\n    Get the order book.\n\n    Args:\n        base_coin (str): The base coin.\n        quote_coin (str): The quote coin.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ORDER_BOOK_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_orders_history","title":"<code>get_orders_history(is_trade, market_id=None, type=None, category_type=None, from_date=None, to_date=None, **kwargs)</code>","text":"<p>Get the orders; history.</p> <p>Parameters:</p> Name Type Description Default <code>is_trade</code> <code>str | IsTrade</code> <p>If the order is a trade.</p> required <code>market_id</code> <code>int | None</code> <p>The market ID.</p> <code>None</code> <code>type</code> <code>str | OrderType | None</code> <p>The order type.</p> <code>None</code> <code>category_type</code> <code>str | OrderCategoryType | None</code> <p>The order category type.</p> <code>None</code> <code>from_date</code> <code>str | None</code> <p>The start date.</p> <code>None</code> <code>to_date</code> <code>str | None</code> <p>The end date.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[OrdersHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>is_trade</code>, <code>type</code>, and <code>category_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_orders_history(  # noqa: PLR0913, PLR0917\n    self,\n    is_trade: str | enums.IsTrade,\n    market_id: int | None = None,\n    type: str | enums.OrderType | None = None,  # noqa: A002\n    category_type: str | enums.OrderCategoryType | None = None,\n    from_date: str | None = None,\n    to_date: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n    \"\"\"\n    Get the orders; history.\n\n    Args:\n        is_trade (str | enums.IsTrade): If the order is a trade.\n        market_id (int | None): The market ID.\n        type (str | enums.OrderType | None): The order type.\n        category_type (str | enums.OrderCategoryType | None): The order category type.\n        from_date (str | None): The start date.\n        to_date (str | None): The end date.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ORDERS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.get_withdraw_networks","title":"<code>get_withdraw_networks(symbol, **kwargs)</code>","text":"<p>Get the withdrawal networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[WithdrawalNetworksResponse]</code> <p>BaseResponse[WithdrawalNetworksResponse]: The response.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>An error occurred.</p> <code>RequestError</code> <p>An error occurred.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_withdraw_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n    \"\"\"\n    Get the withdrawal networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        BaseResponse[WithdrawalNetworksResponse]: The response.\n\n    Raises:\n        APIError: An error occurred.\n        RequestError: An error occurred.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bit24.clients.Client.submit_withdraw","title":"<code>submit_withdraw(symbol, network_id, address, value, memo=None, **kwargs)</code>","text":"<p>Submit a withdrawal.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol</p> required <code>network_id</code> <code>int</code> <p>The network ID.</p> required <code>address</code> <code>str</code> <p>The address.</p> required <code>value</code> <code>str</code> <p>The value.</p> required <code>memo</code> <code>Optional[str]</code> <p>The memo.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[SubmitWithdrawResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def submit_withdraw(  # noqa: PLR0913\n    self,\n    symbol: str,\n    network_id: int,\n    address: str,\n    value: str,\n    memo: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n    \"\"\"\n    Submit a withdrawal.\n\n    Args:\n        symbol (str): The symbol\n        network_id (int): The network ID.\n        address (str): The address.\n        value (str): The value.\n        memo (Optional[str]): The memo.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/_abstract/","title":"_abstract","text":""},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract--abstract-client","title":"Abstract Client","text":"<p>This module contains the abstract client class that is used by the main client class.</p>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient","title":"<code>AbstractClient</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract client class that contains the abstract methods that the main client class should implement.</p> <p>Methods:</p> Name Description <code>_init_session</code> <p>Initialize the session.</p> <code>_request</code> <p>Make a request.</p> <code>_request_api</code> <p>Make a request to the API.</p> <code>_get</code> <p>Make a GET request to the API.</p> <code>_post</code> <p>Make a POST request to the API.</p> <code>_handle_response</code> <p>Handle the response.</p> <code>get_withdraw_networks</code> <p>Get the withdrawal networks.</p> <code>submit_withdraw</code> <p>Submit a withdrawal.</p> <code>get_deposit_networks</code> <p>Get the deposit networks.</p> <code>get_assets_information</code> <p>Get the assets' information.</p> <code>get_assets_history</code> <p>Get the assets' history.</p> <code>create_order</code> <p>Create an order.</p> <code>cancel_order</code> <p>Cancel an order.</p> <code>get_orders_history</code> <p>Get the orders' history.</p> <code>get_markets_information</code> <p>Get the markets' information.</p> <code>get_order_book</code> <p>Get the order book.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>class AbstractClient(ABC):\n    \"\"\"\n    Abstract client class that contains the abstract methods that the main client class should implement.\n\n    Methods:\n        _init_session: Initialize the session.\n        _request: Make a request.\n        _request_api: Make a request to the API.\n        _get: Make a GET request to the API.\n        _post: Make a POST request to the API.\n        _handle_response: Handle the response.\n        get_withdraw_networks: Get the withdrawal networks.\n        submit_withdraw: Submit a withdrawal.\n        get_deposit_networks: Get the deposit networks.\n        get_assets_information: Get the assets' information.\n        get_assets_history: Get the assets' history.\n        create_order: Create an order.\n        cancel_order: Cancel an order.\n        get_orders_history: Get the orders' history.\n        get_markets_information: Get the markets' information.\n        get_order_book: Get the order book.\n    \"\"\"\n\n    @abstractmethod\n    def _init_session(self) -&gt; t.HttpSession:\n        \"\"\"\n        (Abstract, Private)\n\n        Initialize the session.\n\n        Returns:\n            requests.Session: The session.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def _request(\n        self, method: enums.HTTPMethod, uri: str, signed: bool = False, **kwargs: Any\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Abstract, Private)\n\n        Make a request.\n\n        Args:\n            method (HTTPMethod): The HTTP method.\n            uri (str): The URI.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def _request_api(\n        self,\n        method: enums.HTTPMethod,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Abstract, Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod): The HTTP method.\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def _get(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Abstract, Private)\n\n        Make a GET request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def _post(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Abstract, Private)\n\n        Make a POST request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @staticmethod\n    @abstractmethod\n    def _handle_response(response: t.HttpResponse) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Abstract, Private)\n\n        Handle the response.\n\n        Args:\n            response (HttpResponse): The response.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_withdraw_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the withdrawal networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def submit_withdraw(  # noqa: PLR0913\n        self,\n        symbol: str,\n        network_id: int,\n        address: str,\n        value: str,\n        memo: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n        \"\"\"\n        (Abstract)\n\n        Submit a withdrawal.\n\n        Args:\n            symbol (str): The symbol\n            network_id (int): The network ID.\n            address (str): The address.\n            value (str): The value.\n            memo (str | None): The memo.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_deposit_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the deposit networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_assets_information(\n        self,\n        name: str | None = None,\n        alphabet: str | None = None,\n        without_irt: str | None = None,\n        without_zero: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the assets' information.\n\n        Args:\n            name (str | None): The name.\n            alphabet (str | None): The starting alphabet.\n            without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n            without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n            kwargs: The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `without_irt` and `without_zero` respective enums for better readability.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_assets_history(\n        self,\n        type: str | enums.TransactionType | None = None,  # noqa: A002\n        symbol: str | None = None,\n        coin_type: str | enums.CoinType | None = None,\n        reason_type: str | enums.ReasonType | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the assets' history.\n\n        Args:\n            type (str | enums.TransactionType | None): The transaction type.\n            symbol (str | None): The symbol.\n            coin_type (str | enums.CoinType | None): The coin type.\n            reason_type (str | enums.ReasonType | None): The reason type.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def create_order(  # noqa: PLR0913, PLR0917\n        self,\n        base_coin_symbol: str,\n        quote_coin_symbol: str,\n        category_type: str | enums.OrderCategoryType,\n        type: str | enums.OrderType,  # noqa: A002\n        amount: float | None = None,\n        price: float | None = None,\n        quote_coin_amount: float | None = None,\n        stop_price: float | None = None,\n        trigger_price: float | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n        \"\"\"\n        (Abstract)\n\n        Create an order.\n\n        Args:\n            base_coin_symbol (str): The base coin symbol.\n            quote_coin_symbol (str): The quote coin symbol.\n            category_type (str | enums.OrderCategoryType): The order category type.\n            type (str | enums.OrderType): The order type.\n            amount (float | None): The amount.\n            price (float | None): The price.\n            quote_coin_amount (float | None): The quote coin amount.\n            stop_price (float | None): The stop price.\n            trigger_price (float | None): The trigger price.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `category_type` and `type` respective enums for better readability.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def cancel_order(\n        self, order_id: int, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n        \"\"\"\n        (Abstract)\n\n        Cancel an order.\n\n        Args:\n            order_id (int): The order ID.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_orders_history(  # noqa: PLR0913, PLR0917\n        self,\n        is_trade: str | enums.IsTrade,\n        market_id: int | None = None,\n        type: str | enums.OrderType | None = None,  # noqa: A002\n        category_type: str | enums.OrderCategoryType | None = None,\n        from_date: str | None = None,\n        to_date: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the orders' history.\n\n        Args:\n            is_trade (str | enums.IsTrade): If the order is a trade.\n            market_id (int | None): The market ID.\n            type (str | enums.OrderType | None): The order type.\n            category_type (str | enums.OrderCategoryType | None): The order category type.\n            from_date (str | None): The start date.\n            to_date (str | None): The end date.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_markets_information(\n        self, page: int | None = None, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n        \"\"\"\n        (Abstract)\n\n        Get the markets' information.\n\n        Args:\n            page (int | None): The page.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_order_book(\n        self, base_coin: str, quote_coin: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n        \"\"\"\n        (Abstract)\n\n        Get the order book.\n\n        Args:\n            base_coin (str): The base coin.\n            quote_coin (str): The quote coin.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def close_connection(self) -&gt; None:\n        \"\"\"\n        (Abstract)\n\n        Close the connection.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Cancel an order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>int</code> <p>The order ID.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CancelOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef cancel_order(\n    self, order_id: int, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n    \"\"\"\n    (Abstract)\n\n    Cancel an order.\n\n    Args:\n        order_id (int): The order ID.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.close_connection","title":"<code>close_connection()</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Close the connection.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef close_connection(self) -&gt; None:\n    \"\"\"\n    (Abstract)\n\n    Close the connection.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.create_order","title":"<code>create_order(base_coin_symbol, quote_coin_symbol, category_type, type, amount=None, price=None, quote_coin_amount=None, stop_price=None, trigger_price=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Create an order.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin_symbol</code> <code>str</code> <p>The base coin symbol.</p> required <code>quote_coin_symbol</code> <code>str</code> <p>The quote coin symbol.</p> required <code>category_type</code> <code>str | OrderCategoryType</code> <p>The order category type.</p> required <code>type</code> <code>str | OrderType</code> <p>The order type.</p> required <code>amount</code> <code>float | None</code> <p>The amount.</p> <code>None</code> <code>price</code> <code>float | None</code> <p>The price.</p> <code>None</code> <code>quote_coin_amount</code> <code>float | None</code> <p>The quote coin amount.</p> <code>None</code> <code>stop_price</code> <code>float | None</code> <p>The stop price.</p> <code>None</code> <code>trigger_price</code> <code>float | None</code> <p>The trigger price.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CreateOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>category_type</code> and <code>type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef create_order(  # noqa: PLR0913, PLR0917\n    self,\n    base_coin_symbol: str,\n    quote_coin_symbol: str,\n    category_type: str | enums.OrderCategoryType,\n    type: str | enums.OrderType,  # noqa: A002\n    amount: float | None = None,\n    price: float | None = None,\n    quote_coin_amount: float | None = None,\n    stop_price: float | None = None,\n    trigger_price: float | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n    \"\"\"\n    (Abstract)\n\n    Create an order.\n\n    Args:\n        base_coin_symbol (str): The base coin symbol.\n        quote_coin_symbol (str): The quote coin symbol.\n        category_type (str | enums.OrderCategoryType): The order category type.\n        type (str | enums.OrderType): The order type.\n        amount (float | None): The amount.\n        price (float | None): The price.\n        quote_coin_amount (float | None): The quote coin amount.\n        stop_price (float | None): The stop price.\n        trigger_price (float | None): The trigger price.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `category_type` and `type` respective enums for better readability.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_assets_history","title":"<code>get_assets_history(type=None, symbol=None, coin_type=None, reason_type=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the assets' history.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | TransactionType | None</code> <p>The transaction type.</p> <code>None</code> <code>symbol</code> <code>str | None</code> <p>The symbol.</p> <code>None</code> <code>coin_type</code> <code>str | CoinType | None</code> <p>The coin type.</p> <code>None</code> <code>reason_type</code> <code>str | ReasonType | None</code> <p>The reason type.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetsHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>type</code>, <code>coin_type</code>, and <code>reason_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_assets_history(\n    self,\n    type: str | enums.TransactionType | None = None,  # noqa: A002\n    symbol: str | None = None,\n    coin_type: str | enums.CoinType | None = None,\n    reason_type: str | enums.ReasonType | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the assets' history.\n\n    Args:\n        type (str | enums.TransactionType | None): The transaction type.\n        symbol (str | None): The symbol.\n        coin_type (str | enums.CoinType | None): The coin type.\n        reason_type (str | enums.ReasonType | None): The reason type.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_assets_information","title":"<code>get_assets_information(name=None, alphabet=None, without_irt=None, without_zero=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the assets' information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name.</p> <code>None</code> <code>alphabet</code> <code>str | None</code> <p>The starting alphabet.</p> <code>None</code> <code>without_irt</code> <code>str | WithoutIrt | None</code> <p>If the IRT should be excluded.</p> <code>None</code> <code>without_zero</code> <code>str | WithoutZero | None</code> <p>If the zero balances should be excluded.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetInformationResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>without_irt</code> and <code>without_zero</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_assets_information(\n    self,\n    name: str | None = None,\n    alphabet: str | None = None,\n    without_irt: str | None = None,\n    without_zero: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the assets' information.\n\n    Args:\n        name (str | None): The name.\n        alphabet (str | None): The starting alphabet.\n        without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n        without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n        kwargs: The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `without_irt` and `without_zero` respective enums for better readability.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_deposit_networks","title":"<code>get_deposit_networks(symbol, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the deposit networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[DepositNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_deposit_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the deposit networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_markets_information","title":"<code>get_markets_information(page=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the markets' information.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int | None</code> <p>The page.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[MarketListResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_markets_information(\n    self, page: int | None = None, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the markets' information.\n\n    Args:\n        page (int | None): The page.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_order_book","title":"<code>get_order_book(base_coin, quote_coin, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin</code> <code>str</code> <p>The base coin.</p> required <code>quote_coin</code> <code>str</code> <p>The quote coin.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[dict[str, OrderBookResponse]]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_order_book(\n    self, base_coin: str, quote_coin: str, **kwargs: Any\n) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n    \"\"\"\n    (Abstract)\n\n    Get the order book.\n\n    Args:\n        base_coin (str): The base coin.\n        quote_coin (str): The quote coin.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_orders_history","title":"<code>get_orders_history(is_trade, market_id=None, type=None, category_type=None, from_date=None, to_date=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the orders' history.</p> <p>Parameters:</p> Name Type Description Default <code>is_trade</code> <code>str | IsTrade</code> <p>If the order is a trade.</p> required <code>market_id</code> <code>int | None</code> <p>The market ID.</p> <code>None</code> <code>type</code> <code>str | OrderType | None</code> <p>The order type.</p> <code>None</code> <code>category_type</code> <code>str | OrderCategoryType | None</code> <p>The order category type.</p> <code>None</code> <code>from_date</code> <code>str | None</code> <p>The start date.</p> <code>None</code> <code>to_date</code> <code>str | None</code> <p>The end date.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[OrdersHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>is_trade</code>, <code>type</code>, and <code>category_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_orders_history(  # noqa: PLR0913, PLR0917\n    self,\n    is_trade: str | enums.IsTrade,\n    market_id: int | None = None,\n    type: str | enums.OrderType | None = None,  # noqa: A002\n    category_type: str | enums.OrderCategoryType | None = None,\n    from_date: str | None = None,\n    to_date: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the orders' history.\n\n    Args:\n        is_trade (str | enums.IsTrade): If the order is a trade.\n        market_id (int | None): The market ID.\n        type (str | enums.OrderType | None): The order type.\n        category_type (str | enums.OrderCategoryType | None): The order category type.\n        from_date (str | None): The start date.\n        to_date (str | None): The end date.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.get_withdraw_networks","title":"<code>get_withdraw_networks(symbol, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Get the withdrawal networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[WithdrawalNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef get_withdraw_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n    \"\"\"\n    (Abstract)\n\n    Get the withdrawal networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_abstract/#src.bit24.clients._abstract.AbstractClient.submit_withdraw","title":"<code>submit_withdraw(symbol, network_id, address, value, memo=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>(Abstract)</p> <p>Submit a withdrawal.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol</p> required <code>network_id</code> <code>int</code> <p>The network ID.</p> required <code>address</code> <code>str</code> <p>The address.</p> required <code>value</code> <code>str</code> <p>The value.</p> required <code>memo</code> <code>str | None</code> <p>The memo.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[SubmitWithdrawResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/_abstract.py</code> <pre><code>@abstractmethod\ndef submit_withdraw(  # noqa: PLR0913\n    self,\n    symbol: str,\n    network_id: int,\n    address: str,\n    value: str,\n    memo: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n    \"\"\"\n    (Abstract)\n\n    Submit a withdrawal.\n\n    Args:\n        symbol (str): The symbol\n        network_id (int): The network ID.\n        address (str): The address.\n        value (str): The value.\n        memo (str | None): The memo.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/_core/","title":"_core","text":""},{"location":"reference/clients/_core/#src.bit24.clients._core--core-client","title":"Core Client","text":"<p>This module contains the core client class that is used by the main client class.</p>"},{"location":"reference/clients/_core/#src.bit24.clients._core.CoreClient","title":"<code>CoreClient</code>","text":"<p>Core client class that contains the base URL and the API version.</p> <p>Attributes:</p> Name Type Description <code>BASE_URL</code> <code>str</code> <p>The base URL of the API.</p> <code>API_VERSION</code> <code>str</code> <p>The API version.</p> <code>REQUEST_TIMEOUT</code> <code>int</code> <p>The request timeout.</p> <code>WITHDRAW_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the withdrawal networks.</p> <code>SUBMIT_WITHDRAW_URI</code> <code>str</code> <p>The URI for submitting a withdrawal.</p> <code>DEPOSIT_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the deposit networks.</p> <code>ASSETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the assets' information.</p> <code>ASSETS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the assets' history.</p> <code>CREATE_ORDER_URI</code> <code>str</code> <p>The URI for creating an order.</p> <code>CANCEL_ORDER_URI</code> <code>str</code> <p>The URI for cancelling an order.</p> <code>ORDERS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the orders' history.</p> <code>MARKETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the markets' information.</p> <code>ORDER_BOOK_URI</code> <code>str</code> <p>The URI for getting the order book.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>Optional[Dict[str, Any]]</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>Optional[Dict[str, Any]]</code> <p>The requests parameters.</p> <code>None</code> <p>Methods:</p> Name Description <code>_get_headers</code> <p>Get the headers.</p> <code>_get_request_kwargs</code> <p>Get the request keyword arguments.</p> <code>_hmac_signature</code> <p>Generate the HMAC signature.</p> <code>_order_params</code> <p>Order the parameters.</p> <code>_generate_signature</code> <p>Generate the signature.</p> <code>_create_api_uri</code> <p>Create the API URI.</p> <code>_get_kwargs_from_locals</code> <p>Get the keyword arguments from the locals.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = CoreClient(\"api_key\", \"api_secret\")\n</code></pre> Source code in <code>src/bit24/clients/_core.py</code> <pre><code>class CoreClient:\n    \"\"\"\n    Core client class that contains the base URL and the API version.\n\n    Attributes:\n        BASE_URL (str): The base URL of the API.\n        API_VERSION (str): The API version.\n        REQUEST_TIMEOUT (int): The request timeout.\n        WITHDRAW_NETWORKS_URI (str): The URI for getting the withdrawal networks.\n        SUBMIT_WITHDRAW_URI (str): The URI for submitting a withdrawal.\n        DEPOSIT_NETWORKS_URI (str): The URI for getting the deposit networks.\n        ASSETS_INFORMATION_URI (str): The URI for getting the assets' information.\n        ASSETS_HISTORY_URI (str): The URI for getting the assets' history.\n        CREATE_ORDER_URI (str): The URI for creating an order.\n        CANCEL_ORDER_URI (str): The URI for cancelling an order.\n        ORDERS_HISTORY_URI (str): The URI for getting the orders' history.\n        MARKETS_INFORMATION_URI (str): The URI for getting the markets' information.\n        ORDER_BOOK_URI (str): The URI for getting the order book.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (Optional[Dict[str, Any]]): The session parameters.\n        requests_params (Optional[Dict[str, Any]]): The requests parameters.\n\n    Methods:\n        _get_headers: Get the headers.\n        _get_request_kwargs: Get the request keyword arguments.\n        _hmac_signature: Generate the HMAC signature.\n        _order_params: Order the parameters.\n        _generate_signature: Generate the signature.\n        _create_api_uri: Create the API URI.\n        _get_kwargs_from_locals: Get the keyword arguments from the locals.\n\n    Examples:\n        &gt;&gt;&gt; client = CoreClient(\"api_key\", \"api_secret\")\n    \"\"\"\n\n    BASE_URL: str = \"https://rest.bit24.cash\"\n\n    API_VERSION: str = \"v1\"\n\n    REQUEST_TIMEOUT: int = 10\n\n    WITHDRAW_NETWORKS_URI: str = \"lite/capi/{}/withdraw/networks\"\n    SUBMIT_WITHDRAW_URI: str = \"lite/capi/{}/withdraw/submit\"\n    DEPOSIT_NETWORKS_URI: str = \"lite/capi/{}/deposit/networks\"\n    ASSETS_INFORMATION_URI: str = \"pro/capi/{}/wallet/assets\"\n    ASSETS_HISTORY_URI: str = \"pro/capi/{}/wallet/assets/history\"\n    CREATE_ORDER_URI: str = \"pro/capi/{}/orders/submit\"\n    CANCEL_ORDER_URI: str = \"pro/capi/{}/orders/cancel\"\n    ORDERS_HISTORY_URI: str = \"pro/capi/{}/orders/get-history\"\n    MARKETS_INFORMATION_URI: str = \"pro/capi/{}/markets\"\n    ORDER_BOOK_URI: str = \"pro/capi/{}/markets/orderbooks\"\n\n    def __init__(\n        self,\n        api_key: str,\n        api_secret: str | None = None,\n        session_params: dict[str, Any] | None = None,\n        requests_params: dict[str, Any] | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the core client.\n\n        Args:\n            api_key (str): The API key.\n            api_secret (str | None): The API secret.\n            session_params (dict[str, Any] | None): The session parameters.\n            requests_params (dict[str, Any] | None): The requests parameters.\n        \"\"\"\n        self.API_KEY = api_key\n        self.API_SECRET = api_secret\n\n        self._session_params = session_params or {}\n        self._requests_params = requests_params or {}\n\n    def _get_headers(self) -&gt; dict[str, str]:\n        \"\"\"\n        (Private)\n\n        Get the headers.\n\n        Returns:\n            dict[str, str]: The headers.\n        \"\"\"\n        return {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-BIT24-APIKEY\": self.API_KEY,\n        }\n\n    def _get_request_kwargs(\n        self, method: enums.HTTPMethod | str, signed: bool, **kwargs: Any\n    ) -&gt; dict[str, Any]:\n        \"\"\"\n        (Private)\n\n        Get the request keyword arguments.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            Dict[str, Any]: The request keyword arguments.\n        \"\"\"\n        kwargs[\"timeout\"] = self.REQUEST_TIMEOUT\n\n        if self._requests_params:\n            kwargs.update(self._requests_params)\n\n        data = kwargs.get(\"data\", None)\n        if data and isinstance(data, dict):\n            kwargs[\"data\"] = data\n\n            if \"requests_params\" in kwargs[\"data\"]:\n                kwargs.update(kwargs[\"data\"][\"requests_params\"])\n                del kwargs[\"data\"][\"requests_params\"]\n\n        if signed is True:\n            kwargs[\"data\"][\"signature\"] = self._generate_signature(kwargs[\"data\"])\n\n        if data:\n            kwargs[\"data\"] = self._order_params(kwargs[\"data\"])\n            null_args = [\n                i for i, (key, value) in enumerate(kwargs[\"data\"]) if value is None\n            ]\n            for i in reversed(null_args):\n                del kwargs[\"data\"][i]\n            kwargs[\"data\"] = \"&amp;\".join([f\"{d[0]}={d[1]}\" for d in kwargs[\"data\"]])\n\n        if data and method == enums.HTTPMethod.GET:\n            kwargs[\"params\"] = \"&amp;\".join(\n                f\"{data[0]}={data[1]}\" for data in kwargs[\"data\"]\n            )\n            del kwargs[\"data\"]\n\n        return kwargs\n\n    def _hmac_signature(self, query_string: str) -&gt; str:\n        \"\"\"\n        (Private)\n\n        Generate the HMAC signature.\n\n        Args:\n            query_string (str): The query string.\n\n        Returns:\n            str: The HMAC signature.\n        \"\"\"\n        assert self.API_SECRET, \"API Secret required for private endpoints\"\n        return hmac.new(\n            self.API_SECRET.encode(\"utf-8\"), query_string.encode(\"utf-8\"), sha256\n        ).hexdigest()\n\n    @staticmethod\n    def _order_params(data: dict[str, Any]) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        (Private, Static)\n\n        Order the parameters.\n\n        Args:\n            data (Dict[str, Any]): The data.\n\n        Returns:\n            List[Tuple[str, str]]: The ordered parameters.\n\n        \"\"\"\n        data = dict(filter(lambda el: el[1] is not None, data.items()))\n        has_signature = False\n        params = []\n        for key, value in data.items():\n            if key == \"signature\":\n                has_signature = True\n            else:\n                params.append((key, str(value)))\n        params.sort(key=itemgetter(0))\n        if has_signature:\n            params.append((\"signature\", data[\"signature\"]))\n        return params\n\n    def _generate_signature(self, data: dict[str, Any]) -&gt; str:\n        \"\"\"\n        (Private)\n\n        Generate the signature.\n\n        Args:\n            data (Dict[str, Any]): The data.\n\n        Returns:\n            str: The signature.\n        \"\"\"\n        query_string = \"&amp;\".join([f\"{d[0]}={d[1]}\" for d in self._order_params(data)])\n        return self._hmac_signature(query_string)\n\n    def _create_api_uri(self, path: str, version: str = API_VERSION) -&gt; str:\n        \"\"\"\n        (Private)\n\n        Create the API URI.\n\n        Args:\n            path (str): The path.\n            version (str): The version.\n\n        Returns:\n            str: The API URI.\n        \"\"\"\n        return self.BASE_URL + \"/\" + path.format(version)\n\n    @staticmethod\n    def _get_kwargs_from_locals(\n        locals_: dict[str, Any],\n        exclude: list[str] | None = None,\n        exclude_none: bool = True,\n    ) -&gt; dict[str, Any]:\n        \"\"\"\n        (Private, Static)\n\n        Get the keyword arguments from the locals.\n\n        Args:\n            locals_ (Dict[str, Any]): The locals.\n            exclude (List[str]): The exclude list.\n            exclude_none (bool): If exclude None.\n\n        Returns:\n            Dict[str, Any]: The keyword arguments.\n        \"\"\"\n        if exclude is None:\n            exclude = [\"self\", \"kwargs\"]\n\n        return {\n            key: value\n            for key, value in locals_.items()\n            if key not in exclude and (not exclude_none or value is not None)\n        }\n</code></pre>"},{"location":"reference/clients/_core/#src.bit24.clients._core.CoreClient.__init__","title":"<code>__init__(api_key, api_secret=None, session_params=None, requests_params=None)</code>","text":"<p>Initialize the core client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>dict[str, Any] | None</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>dict[str, Any] | None</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/_core.py</code> <pre><code>def __init__(\n    self,\n    api_key: str,\n    api_secret: str | None = None,\n    session_params: dict[str, Any] | None = None,\n    requests_params: dict[str, Any] | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the core client.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (dict[str, Any] | None): The session parameters.\n        requests_params (dict[str, Any] | None): The requests parameters.\n    \"\"\"\n    self.API_KEY = api_key\n    self.API_SECRET = api_secret\n\n    self._session_params = session_params or {}\n    self._requests_params = requests_params or {}\n</code></pre>"},{"location":"reference/clients/async_client/","title":"async_client","text":""},{"location":"reference/clients/async_client/#src.bit24.clients.async_client--async-client","title":"Async Client","text":"<p>This module contains the main client class that is used to interact with the API.</p>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client--classes","title":"Classes","text":"<ul> <li><code>AsyncClient</code>: The main client class.</li> </ul>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>             Bases: <code>AbstractClient</code>, <code>CoreClient</code></p> <p>Main client class that is used to interact with the API.</p> <p>Attributes:</p> Name Type Description <code>BASE_URL</code> <code>str</code> <p>The base URL of the API.</p> <code>API_VERSION</code> <code>str</code> <p>The API version.</p> <code>REQUEST_TIMEOUT</code> <code>int</code> <p>The request timeout.</p> <code>WITHDRAW_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the withdrawal networks.</p> <code>SUBMIT_WITHDRAW_URI</code> <code>str</code> <p>The URI for submitting a withdrawal.</p> <code>DEPOSIT_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the deposit networks.</p> <code>ASSETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the assets' information.</p> <code>ASSETS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the assets' history.</p> <code>CREATE_ORDER_URI</code> <code>str</code> <p>The URI for creating an order.</p> <code>CANCEL_ORDER_URI</code> <code>str</code> <p>The URI for cancelling an order.</p> <code>ORDERS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the orders' history.</p> <code>MARKETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the markets' information.</p> <code>ORDER_BOOK_URI</code> <code>str</code> <p>The URI for getting the order book.</p> <p>Methods:</p> Name Description <code>_get_headers</code> <p>Get the headers.</p> <code>_get_request_kwargs</code> <p>Get the request keyword arguments.</p> <code>_hmac_signature</code> <p>Generate the HMAC signature.</p> <code>_order_params</code> <p>Order the parameters.</p> <code>_generate_signature</code> <p>Generate the signature.</p> <code>_create_api_uri</code> <p>Create the API URI.</p> <code>_get_kwargs_from_locals</code> <p>Get the keyword arguments from the locals.</p> <code>_init_session</code> <p>Initialize the session.</p> <code>_request</code> <p>Make a request.</p> <code>_request_api</code> <p>Make a request to the API.</p> <code>_get</code> <p>Make a GET request to the API.</p> <code>_post</code> <p>Make a POST request to the API.</p> <code>_handle_response</code> <p>Handle the response.</p> <code>get_withdraw_networks</code> <p>Get the withdrawal networks.</p> <code>submit_withdraw</code> <p>Submit a withdrawal.</p> <code>get_deposit_networks</code> <p>Get the deposit networks.</p> <code>get_assets_information</code> <p>Get the assets' information.</p> <code>get_assets_history</code> <p>Get the assets' history.</p> <code>create_order</code> <p>Create an order.</p> <code>cancel_order</code> <p>Cancel an order.</p> <code>get_orders_history</code> <p>Get the orders' history.</p> <code>get_markets_information</code> <p>Get the markets' information.</p> <code>get_order_book</code> <p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>Optional[Dict[str, Any]]</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>Optional[Dict[str, Any]]</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>class AsyncClient(AbstractClient, CoreClient):\n    \"\"\"\n    Main client class that is used to interact with the API.\n\n    Attributes:\n        BASE_URL (str): The base URL of the API.\n        API_VERSION (str): The API version.\n        REQUEST_TIMEOUT (int): The request timeout.\n        WITHDRAW_NETWORKS_URI (str): The URI for getting the withdrawal networks.\n        SUBMIT_WITHDRAW_URI (str): The URI for submitting a withdrawal.\n        DEPOSIT_NETWORKS_URI (str): The URI for getting the deposit networks.\n        ASSETS_INFORMATION_URI (str): The URI for getting the assets' information.\n        ASSETS_HISTORY_URI (str): The URI for getting the assets' history.\n        CREATE_ORDER_URI (str): The URI for creating an order.\n        CANCEL_ORDER_URI (str): The URI for cancelling an order.\n        ORDERS_HISTORY_URI (str): The URI for getting the orders' history.\n        MARKETS_INFORMATION_URI (str): The URI for getting the markets' information.\n        ORDER_BOOK_URI (str): The URI for getting the order book.\n\n    Methods:\n        _get_headers: Get the headers.\n        _get_request_kwargs: Get the request keyword arguments.\n        _hmac_signature: Generate the HMAC signature.\n        _order_params: Order the parameters.\n        _generate_signature: Generate the signature.\n        _create_api_uri: Create the API URI.\n        _get_kwargs_from_locals: Get the keyword arguments from the locals.\n        _init_session: Initialize the session.\n        _request: Make a request.\n        _request_api: Make a request to the API.\n        _get: Make a GET request to the API.\n        _post: Make a POST request to the API.\n        _handle_response: Handle the response.\n        get_withdraw_networks: Get the withdrawal networks.\n        submit_withdraw: Submit a withdrawal.\n        get_deposit_networks: Get the deposit networks.\n        get_assets_information: Get the assets' information.\n        get_assets_history: Get the assets' history.\n        create_order: Create an order.\n        cancel_order: Cancel an order.\n        get_orders_history: Get the orders' history.\n        get_markets_information: Get the markets' information.\n        get_order_book: Get the order book.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (Optional[Dict[str, Any]]): The session parameters.\n        requests_params (Optional[Dict[str, Any]]): The requests parameters.\n    \"\"\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        api_key: str,\n        api_secret: str | None = None,\n        session_params: dict[str, Any] | None = None,\n        requests_params: dict[str, Any] | None = None,\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the core client.\n\n        Args:\n            api_key (str): The API key.\n            api_secret (str | None): The API secret.\n            session_params (dict[str, Any] | None): The session parameters.\n            requests_params (dict[str, Any] | None): The requests parameters.\n            loop (Optional[AbstractEventLoop]): The event loop.\n        \"\"\"\n        super().__init__(api_key, api_secret, session_params, requests_params)\n        self.loop = loop or get_loop()\n        self.session = self._init_session()\n\n    def _init_session(self) -&gt; aiohttp.ClientSession:\n        \"\"\"\n        (Private)\n\n        Initialize the session.\n\n        Returns:\n            ClientSession: The session.\n        \"\"\"\n        return aiohttp.ClientSession(\n            loop=self.loop,\n            headers=self._get_headers(),\n            **self._session_params,\n        )\n\n    async def _request(  # type: ignore[override]\n        self,\n        method: enums.HTTPMethod | str,\n        uri: str,\n        signed: bool = False,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            uri (str): The URI.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        async with getattr(self.session, method.lower())(uri, **kwargs) as response:\n            return await self._handle_response(response)\n\n    async def _request_api(  # type: ignore[override]\n        self,\n        method: enums.HTTPMethod | str,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        uri = self._create_api_uri(path, version)\n        return await self._request(method, uri, signed, **kwargs)\n\n    async def _get(  # type: ignore[override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a GET request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return await self._request_api(\n            enums.HTTPMethod.GET, path, signed, version, **kwargs\n        )\n\n    async def _post(  # type: ignore[override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a POST request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return await self._request_api(\n            enums.HTTPMethod.POST, path, signed, version, **kwargs\n        )\n\n    @staticmethod\n    async def _handle_response(response: aiohttp.ClientResponse) -&gt; rt.BaseResponse:  # type: ignore[override]\n        \"\"\"\n        (Private)\n\n        Handle the response.\n\n        Args:\n            response (HttpResponse): The response.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        if not str(response.status).startswith(\"2\"):\n            raise APIError(response, response.status, await response.text())\n        try:\n            _: rt.BaseResponse = await response.json()\n        except ValueError as exc:\n            msg = f\"Invalid Response: {await response.text()}\"\n            raise RequestError(msg) from exc\n        else:\n            return _\n\n    async def get_withdraw_networks(  # type: ignore[override]\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n        \"\"\"\n        Get the withdrawal networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse[WithdrawalNetworksResponse]: The response.\n\n        Raises:\n            APIError: An error occurred.\n            RequestError: An error occurred.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n\n    async def submit_withdraw(  # type: ignore[override] # noqa: PLR0913\n        self,\n        symbol: str,\n        network_id: int,\n        address: str,\n        value: str,\n        memo: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n        \"\"\"\n        Submit a withdrawal.\n\n        Args:\n            symbol (str): The symbol\n            network_id (int): The network ID.\n            address (str): The address.\n            value (str): The value.\n            memo (str | None): The memo.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n\n    async def get_deposit_networks(  # type: ignore[override]\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n        \"\"\"\n        Get the deposit networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n\n    async def get_assets_information(  # type: ignore[override]\n        self,\n        name: str | None = None,\n        alphabet: str | None = None,\n        without_irt: str | None = None,\n        without_zero: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n        \"\"\"\n        Get the assets' information.\n\n        Args:\n            name (str | None): The name.\n            alphabet (str | None): The starting alphabet.\n            without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n            without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `without_irt` and `without_zero` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n\n    async def get_assets_history(  # type: ignore[override]\n        self,\n        type: str | enums.TransactionType | None = None,  # noqa: A002\n        symbol: str | None = None,\n        coin_type: str | enums.CoinType | None = None,\n        reason_type: str | enums.ReasonType | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n        \"\"\"\n        Get the assets' history.\n\n        Args:\n            type (str | enums.TransactionType | None): The transaction type.\n            symbol (str | None): The symbol.\n            coin_type (str | enums.CoinType | None): The coin type.\n            reason_type (str | enums.ReasonType | None): The reason type.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ASSETS_HISTORY_URI, **kwargs)\n\n    async def create_order(  # type: ignore[override] # noqa: PLR0913, PLR0917\n        self,\n        base_coin_symbol: str,\n        quote_coin_symbol: str,\n        category_type: str | enums.OrderCategoryType,\n        type: str | enums.OrderType,  # noqa: A002\n        amount: float | None = None,\n        price: float | None = None,\n        quote_coin_amount: float | None = None,\n        stop_price: float | None = None,\n        trigger_price: float | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n        \"\"\"\n        Create an order.\n\n        Args:\n            base_coin_symbol (str): The base coin symbol.\n            quote_coin_symbol (str): The quote coin symbol.\n            category_type (str | enums.OrderCategoryType): The order category type.\n            type (str | enums.OrderType): The order type.\n            amount (float | None): The amount.\n            price (float | None): The price.\n            quote_coin_amount (float | None): The quote coin amount.\n            stop_price (float | None): The stop price.\n            trigger_price (float | None): The trigger price.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `category_type` and `type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n\n    async def cancel_order(  # type: ignore[override]\n        self, order_id: int, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n        \"\"\"\n        Cancel an order.\n\n        Args:\n            order_id (int): The order ID.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return await self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n\n    async def get_orders_history(  # type: ignore[override] # noqa: PLR0913, PLR0917\n        self,\n        is_trade: str | enums.IsTrade,\n        market_id: int | None = None,\n        type: str | enums.OrderType | None = None,  # noqa: A002\n        category_type: str | enums.OrderCategoryType | None = None,\n        from_date: str | None = None,\n        to_date: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n        \"\"\"\n        Get the orders' history.\n\n        Args:\n            is_trade (str | enums.IsTrade): If the order is a trade.\n            market_id (int | None): The market ID.\n            type (str | enums.OrderType | None): The order type.\n            category_type (str | enums.OrderCategoryType | None): The order category type.\n            from_date (str | None): The start date.\n            to_date (str | None): The end date.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ORDERS_HISTORY_URI, **kwargs)\n\n    async def get_markets_information(  # type: ignore[override]\n        self, page: int | None = None, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n        \"\"\"\n        Get the markets' information.\n\n        Args:\n            page (int | None): The page.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n\n    async def get_order_book(  # type: ignore[override]\n        self, base_coin: str, quote_coin: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n        \"\"\"\n        Get the order book.\n\n        Args:\n            base_coin (str): The base coin.\n            quote_coin (str): The quote coin.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return await self._get(self.ORDER_BOOK_URI, **kwargs)\n\n    async def close_connection(self) -&gt; None:  # type: ignore[override]\n        \"\"\"\n        Close the connection.\n\n        Returns:\n            None\n        \"\"\"\n        await self.session.close()\n        await asyncio.sleep(0.250)\n        self.loop.stop()\n        self.loop.close()\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.__init__","title":"<code>__init__(api_key, api_secret=None, session_params=None, requests_params=None, loop=None)</code>","text":"<p>Initialize the core client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>dict[str, Any] | None</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>dict[str, Any] | None</code> <p>The requests parameters.</p> <code>None</code> <code>loop</code> <code>Optional[AbstractEventLoop]</code> <p>The event loop.</p> <code>None</code> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    api_key: str,\n    api_secret: str | None = None,\n    session_params: dict[str, Any] | None = None,\n    requests_params: dict[str, Any] | None = None,\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the core client.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (dict[str, Any] | None): The session parameters.\n        requests_params (dict[str, Any] | None): The requests parameters.\n        loop (Optional[AbstractEventLoop]): The event loop.\n    \"\"\"\n    super().__init__(api_key, api_secret, session_params, requests_params)\n    self.loop = loop or get_loop()\n    self.session = self._init_session()\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>async</code>","text":"<p>Cancel an order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>int</code> <p>The order ID.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CancelOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def cancel_order(  # type: ignore[override]\n    self, order_id: int, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n    \"\"\"\n    Cancel an order.\n\n    Args:\n        order_id (int): The order ID.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.close_connection","title":"<code>close_connection()</code>  <code>async</code>","text":"<p>Close the connection.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def close_connection(self) -&gt; None:  # type: ignore[override]\n    \"\"\"\n    Close the connection.\n\n    Returns:\n        None\n    \"\"\"\n    await self.session.close()\n    await asyncio.sleep(0.250)\n    self.loop.stop()\n    self.loop.close()\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.create_order","title":"<code>create_order(base_coin_symbol, quote_coin_symbol, category_type, type, amount=None, price=None, quote_coin_amount=None, stop_price=None, trigger_price=None, **kwargs)</code>  <code>async</code>","text":"<p>Create an order.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin_symbol</code> <code>str</code> <p>The base coin symbol.</p> required <code>quote_coin_symbol</code> <code>str</code> <p>The quote coin symbol.</p> required <code>category_type</code> <code>str | OrderCategoryType</code> <p>The order category type.</p> required <code>type</code> <code>str | OrderType</code> <p>The order type.</p> required <code>amount</code> <code>float | None</code> <p>The amount.</p> <code>None</code> <code>price</code> <code>float | None</code> <p>The price.</p> <code>None</code> <code>quote_coin_amount</code> <code>float | None</code> <p>The quote coin amount.</p> <code>None</code> <code>stop_price</code> <code>float | None</code> <p>The stop price.</p> <code>None</code> <code>trigger_price</code> <code>float | None</code> <p>The trigger price.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CreateOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>category_type</code> and <code>type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def create_order(  # type: ignore[override] # noqa: PLR0913, PLR0917\n    self,\n    base_coin_symbol: str,\n    quote_coin_symbol: str,\n    category_type: str | enums.OrderCategoryType,\n    type: str | enums.OrderType,  # noqa: A002\n    amount: float | None = None,\n    price: float | None = None,\n    quote_coin_amount: float | None = None,\n    stop_price: float | None = None,\n    trigger_price: float | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n    \"\"\"\n    Create an order.\n\n    Args:\n        base_coin_symbol (str): The base coin symbol.\n        quote_coin_symbol (str): The quote coin symbol.\n        category_type (str | enums.OrderCategoryType): The order category type.\n        type (str | enums.OrderType): The order type.\n        amount (float | None): The amount.\n        price (float | None): The price.\n        quote_coin_amount (float | None): The quote coin amount.\n        stop_price (float | None): The stop price.\n        trigger_price (float | None): The trigger price.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `category_type` and `type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_assets_history","title":"<code>get_assets_history(type=None, symbol=None, coin_type=None, reason_type=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the assets' history.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | TransactionType | None</code> <p>The transaction type.</p> <code>None</code> <code>symbol</code> <code>str | None</code> <p>The symbol.</p> <code>None</code> <code>coin_type</code> <code>str | CoinType | None</code> <p>The coin type.</p> <code>None</code> <code>reason_type</code> <code>str | ReasonType | None</code> <p>The reason type.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetsHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>type</code>, <code>coin_type</code>, and <code>reason_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_assets_history(  # type: ignore[override]\n    self,\n    type: str | enums.TransactionType | None = None,  # noqa: A002\n    symbol: str | None = None,\n    coin_type: str | enums.CoinType | None = None,\n    reason_type: str | enums.ReasonType | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n    \"\"\"\n    Get the assets' history.\n\n    Args:\n        type (str | enums.TransactionType | None): The transaction type.\n        symbol (str | None): The symbol.\n        coin_type (str | enums.CoinType | None): The coin type.\n        reason_type (str | enums.ReasonType | None): The reason type.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ASSETS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_assets_information","title":"<code>get_assets_information(name=None, alphabet=None, without_irt=None, without_zero=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the assets' information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name.</p> <code>None</code> <code>alphabet</code> <code>str | None</code> <p>The starting alphabet.</p> <code>None</code> <code>without_irt</code> <code>str | WithoutIrt | None</code> <p>If the IRT should be excluded.</p> <code>None</code> <code>without_zero</code> <code>str | WithoutZero | None</code> <p>If the zero balances should be excluded.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetInformationResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>without_irt</code> and <code>without_zero</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_assets_information(  # type: ignore[override]\n    self,\n    name: str | None = None,\n    alphabet: str | None = None,\n    without_irt: str | None = None,\n    without_zero: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n    \"\"\"\n    Get the assets' information.\n\n    Args:\n        name (str | None): The name.\n        alphabet (str | None): The starting alphabet.\n        without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n        without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `without_irt` and `without_zero` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_deposit_networks","title":"<code>get_deposit_networks(symbol, **kwargs)</code>  <code>async</code>","text":"<p>Get the deposit networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[DepositNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_deposit_networks(  # type: ignore[override]\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n    \"\"\"\n    Get the deposit networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_markets_information","title":"<code>get_markets_information(page=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the markets' information.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int | None</code> <p>The page.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[MarketListResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_markets_information(  # type: ignore[override]\n    self, page: int | None = None, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n    \"\"\"\n    Get the markets' information.\n\n    Args:\n        page (int | None): The page.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_order_book","title":"<code>get_order_book(base_coin, quote_coin, **kwargs)</code>  <code>async</code>","text":"<p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin</code> <code>str</code> <p>The base coin.</p> required <code>quote_coin</code> <code>str</code> <p>The quote coin.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[dict[str, OrderBookResponse]]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_order_book(  # type: ignore[override]\n    self, base_coin: str, quote_coin: str, **kwargs: Any\n) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n    \"\"\"\n    Get the order book.\n\n    Args:\n        base_coin (str): The base coin.\n        quote_coin (str): The quote coin.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ORDER_BOOK_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_orders_history","title":"<code>get_orders_history(is_trade, market_id=None, type=None, category_type=None, from_date=None, to_date=None, **kwargs)</code>  <code>async</code>","text":"<p>Get the orders' history.</p> <p>Parameters:</p> Name Type Description Default <code>is_trade</code> <code>str | IsTrade</code> <p>If the order is a trade.</p> required <code>market_id</code> <code>int | None</code> <p>The market ID.</p> <code>None</code> <code>type</code> <code>str | OrderType | None</code> <p>The order type.</p> <code>None</code> <code>category_type</code> <code>str | OrderCategoryType | None</code> <p>The order category type.</p> <code>None</code> <code>from_date</code> <code>str | None</code> <p>The start date.</p> <code>None</code> <code>to_date</code> <code>str | None</code> <p>The end date.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[OrdersHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>is_trade</code>, <code>type</code>, and <code>category_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_orders_history(  # type: ignore[override] # noqa: PLR0913, PLR0917\n    self,\n    is_trade: str | enums.IsTrade,\n    market_id: int | None = None,\n    type: str | enums.OrderType | None = None,  # noqa: A002\n    category_type: str | enums.OrderCategoryType | None = None,\n    from_date: str | None = None,\n    to_date: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n    \"\"\"\n    Get the orders' history.\n\n    Args:\n        is_trade (str | enums.IsTrade): If the order is a trade.\n        market_id (int | None): The market ID.\n        type (str | enums.OrderType | None): The order type.\n        category_type (str | enums.OrderCategoryType | None): The order category type.\n        from_date (str | None): The start date.\n        to_date (str | None): The end date.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.ORDERS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.get_withdraw_networks","title":"<code>get_withdraw_networks(symbol, **kwargs)</code>  <code>async</code>","text":"<p>Get the withdrawal networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[WithdrawalNetworksResponse]</code> <p>BaseResponse[WithdrawalNetworksResponse]: The response.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>An error occurred.</p> <code>RequestError</code> <p>An error occurred.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def get_withdraw_networks(  # type: ignore[override]\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n    \"\"\"\n    Get the withdrawal networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        BaseResponse[WithdrawalNetworksResponse]: The response.\n\n    Raises:\n        APIError: An error occurred.\n        RequestError: An error occurred.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return await self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bit24.clients.async_client.AsyncClient.submit_withdraw","title":"<code>submit_withdraw(symbol, network_id, address, value, memo=None, **kwargs)</code>  <code>async</code>","text":"<p>Submit a withdrawal.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol</p> required <code>network_id</code> <code>int</code> <p>The network ID.</p> required <code>address</code> <code>str</code> <p>The address.</p> required <code>value</code> <code>str</code> <p>The value.</p> required <code>memo</code> <code>str | None</code> <p>The memo.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[SubmitWithdrawResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/async_client.py</code> <pre><code>async def submit_withdraw(  # type: ignore[override] # noqa: PLR0913\n    self,\n    symbol: str,\n    network_id: int,\n    address: str,\n    value: str,\n    memo: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n    \"\"\"\n    Submit a withdrawal.\n\n    Args:\n        symbol (str): The symbol\n        network_id (int): The network ID.\n        address (str): The address.\n        value (str): The value.\n        memo (str | None): The memo.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return await self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/","title":"client","text":""},{"location":"reference/clients/client/#src.bit24.clients.client--client","title":"Client","text":"<p>This module contains the main client class that is used to interact with the API.</p>"},{"location":"reference/clients/client/#src.bit24.clients.client--classes","title":"Classes","text":"<ul> <li><code>Client</code>: The main client class.</li> </ul>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client","title":"<code>Client</code>","text":"<p>             Bases: <code>AbstractClient</code>, <code>CoreClient</code></p> <p>Main client class that is used to interact with the API.</p> <p>Attributes:</p> Name Type Description <code>BASE_URL</code> <code>str</code> <p>The base URL of the API.</p> <code>API_VERSION</code> <code>str</code> <p>The API version.</p> <code>REQUEST_TIMEOUT</code> <code>int</code> <p>The request timeout.</p> <code>WITHDRAW_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the withdrawal networks.</p> <code>SUBMIT_WITHDRAW_URI</code> <code>str</code> <p>The URI for submitting a withdrawal.</p> <code>DEPOSIT_NETWORKS_URI</code> <code>str</code> <p>The URI for getting the deposit networks.</p> <code>ASSETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the assets' information.</p> <code>ASSETS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the assets' history.</p> <code>CREATE_ORDER_URI</code> <code>str</code> <p>The URI for creating an order.</p> <code>CANCEL_ORDER_URI</code> <code>str</code> <p>The URI for cancelling an order.</p> <code>ORDERS_HISTORY_URI</code> <code>str</code> <p>The URI for getting the orders' history.</p> <code>MARKETS_INFORMATION_URI</code> <code>str</code> <p>The URI for getting the markets' information.</p> <code>ORDER_BOOK_URI</code> <code>str</code> <p>The URI for getting the order book.</p> <p>Methods:</p> Name Description <code>_get_headers</code> <p>Get the headers.</p> <code>_get_request_kwargs</code> <p>Get the request keyword arguments.</p> <code>_hmac_signature</code> <p>Generate the HMAC signature.</p> <code>_order_params</code> <p>Order the parameters.</p> <code>_generate_signature</code> <p>Generate the signature.</p> <code>_create_api_uri</code> <p>Create the API URI.</p> <code>_get_kwargs_from_locals</code> <p>Get the keyword arguments from the locals.</p> <code>_init_session</code> <p>Initialize the session.</p> <code>_request</code> <p>Make a request.</p> <code>_request_api</code> <p>Make a request to the API.</p> <code>_get</code> <p>Make a GET request to the API.</p> <code>_post</code> <p>Make a POST request to the API.</p> <code>_handle_response</code> <p>Handle the response.</p> <code>get_withdraw_networks</code> <p>Get the withdrawal networks.</p> <code>submit_withdraw</code> <p>Submit a withdrawal.</p> <code>get_deposit_networks</code> <p>Get the deposit networks.</p> <code>get_assets_information</code> <p>Get the assets' information.</p> <code>get_assets_history</code> <p>Get the assets' history.</p> <code>create_order</code> <p>Create an order.</p> <code>cancel_order</code> <p>Cancel an order.</p> <code>get_orders_history</code> <p>Get the orders' history.</p> <code>get_markets_information</code> <p>Get the markets' information.</p> <code>get_order_book</code> <p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>Optional[Dict[str, Any]]</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>Optional[Dict[str, Any]]</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/client.py</code> <pre><code>class Client(AbstractClient, CoreClient):\n    \"\"\"\n    Main client class that is used to interact with the API.\n\n    Attributes:\n        BASE_URL (str): The base URL of the API.\n        API_VERSION (str): The API version.\n        REQUEST_TIMEOUT (int): The request timeout.\n        WITHDRAW_NETWORKS_URI (str): The URI for getting the withdrawal networks.\n        SUBMIT_WITHDRAW_URI (str): The URI for submitting a withdrawal.\n        DEPOSIT_NETWORKS_URI (str): The URI for getting the deposit networks.\n        ASSETS_INFORMATION_URI (str): The URI for getting the assets' information.\n        ASSETS_HISTORY_URI (str): The URI for getting the assets' history.\n        CREATE_ORDER_URI (str): The URI for creating an order.\n        CANCEL_ORDER_URI (str): The URI for cancelling an order.\n        ORDERS_HISTORY_URI (str): The URI for getting the orders' history.\n        MARKETS_INFORMATION_URI (str): The URI for getting the markets' information.\n        ORDER_BOOK_URI (str): The URI for getting the order book.\n\n    Methods:\n        _get_headers: Get the headers.\n        _get_request_kwargs: Get the request keyword arguments.\n        _hmac_signature: Generate the HMAC signature.\n        _order_params: Order the parameters.\n        _generate_signature: Generate the signature.\n        _create_api_uri: Create the API URI.\n        _get_kwargs_from_locals: Get the keyword arguments from the locals.\n        _init_session: Initialize the session.\n        _request: Make a request.\n        _request_api: Make a request to the API.\n        _get: Make a GET request to the API.\n        _post: Make a POST request to the API.\n        _handle_response: Handle the response.\n        get_withdraw_networks: Get the withdrawal networks.\n        submit_withdraw: Submit a withdrawal.\n        get_deposit_networks: Get the deposit networks.\n        get_assets_information: Get the assets' information.\n        get_assets_history: Get the assets' history.\n        create_order: Create an order.\n        cancel_order: Cancel an order.\n        get_orders_history: Get the orders' history.\n        get_markets_information: Get the markets' information.\n        get_order_book: Get the order book.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (Optional[Dict[str, Any]]): The session parameters.\n        requests_params (Optional[Dict[str, Any]]): The requests parameters.\n    \"\"\"\n\n    def __init__(\n        self,\n        api_key: str,\n        api_secret: str | None = None,\n        session_params: dict[str, Any] | None = None,\n        requests_params: dict[str, Any] | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the core client.\n\n        Args:\n            api_key (str): The API key.\n            api_secret (str | None): The API secret.\n            session_params (dict[str, Any] | None): The session parameters.\n            requests_params (dict[str, Any] | None): The requests parameters.\n        \"\"\"\n        super().__init__(api_key, api_secret, session_params, requests_params)\n        self.session = self._init_session()\n\n    def _init_session(self) -&gt; requests.Session:\n        \"\"\"\n        (Private)\n\n        Initialize the session.\n\n        Returns:\n            requests.Session: The session.\n        \"\"\"\n        session = requests.Session()\n        session.headers.update(self._get_headers())\n        return session\n\n    def _request(\n        self,\n        method: enums.HTTPMethod | str,\n        uri: str,\n        signed: bool = False,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            uri (str): The URI.\n            signed (bool): If the request is signed.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        with getattr(self.session, method.lower())(uri, **kwargs) as response:\n            return self._handle_response(response)\n\n    def _request_api(\n        self,\n        method: enums.HTTPMethod | str,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a request to the API.\n\n        Args:\n            method (HTTPMethod | str): The HTTP method.\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        uri = self._create_api_uri(path, version)\n        return self._request(method, uri, signed, **kwargs)\n\n    def _get(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a GET request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return self._request_api(enums.HTTPMethod.GET, path, signed, version, **kwargs)\n\n    def _post(\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.API_VERSION,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse:\n        \"\"\"\n        (Private)\n\n        Make a POST request to the API.\n\n        Args:\n            path (str): The path.\n            signed (bool): If the request is signed.\n            version (str): The API version.\n            **kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        return self._request_api(enums.HTTPMethod.POST, path, signed, version, **kwargs)\n\n    @staticmethod\n    def _handle_response(response: requests.Response) -&gt; rt.BaseResponse:  # type: ignore[override]\n        \"\"\"\n        (Private)\n\n        Handle the response.\n\n        Args:\n            response (HttpResponse): The response.\n\n        Returns:\n            BaseResponse: The response.\n        \"\"\"\n        if not str(response.status_code).startswith(\"2\"):\n            raise APIError(response, response.status_code, response.text)\n        try:\n            _: rt.BaseResponse = response.json()\n        except ValueError as exc:\n            msg = f\"Invalid Response: {response.text}\"\n            raise RequestError(msg) from exc\n        else:\n            return _\n\n    def get_withdraw_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n        \"\"\"\n        Get the withdrawal networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            BaseResponse[WithdrawalNetworksResponse]: The response.\n\n        Raises:\n            APIError: An error occurred.\n            RequestError: An error occurred.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n\n    def submit_withdraw(  # noqa: PLR0913\n        self,\n        symbol: str,\n        network_id: int,\n        address: str,\n        value: str,\n        memo: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n        \"\"\"\n        Submit a withdrawal.\n\n        Args:\n            symbol (str): The symbol\n            network_id (int): The network ID.\n            address (str): The address.\n            value (str): The value.\n            memo (Optional[str]): The memo.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n\n    def get_deposit_networks(\n        self, symbol: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n        \"\"\"\n        Get the deposit networks.\n\n        Args:\n            symbol (str): The symbol.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n\n    def get_assets_information(\n        self,\n        name: str | None = None,\n        alphabet: str | None = None,\n        without_irt: str | None = None,\n        without_zero: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n        \"\"\"\n        Get the assets' information.\n\n        Args:\n            name (str | None): The name.\n            alphabet (str | None): The starting alphabet.\n            without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n            without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `without_irt` and `without_zero` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n\n    def get_assets_history(\n        self,\n        type: str | enums.TransactionType | None = None,  # noqa: A002\n        symbol: str | None = None,\n        coin_type: str | enums.CoinType | None = None,\n        reason_type: str | enums.ReasonType | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n        \"\"\"\n        Get the assets' history.\n\n        Args:\n            type (str | enums.TransactionType): The transaction type.\n            symbol (str | None): The symbol.\n            coin_type (str | enums.CoinType | None): The coin type.\n            reason_type (str | enums.ReasonType | None): The reason type.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ASSETS_HISTORY_URI, **kwargs)\n\n    def create_order(  # noqa: PLR0913, PLR0917\n        self,\n        base_coin_symbol: str,\n        quote_coin_symbol: str,\n        category_type: str | enums.OrderCategoryType,\n        type: str | enums.OrderType,  # noqa: A002\n        amount: float | None = None,\n        price: float | None = None,\n        quote_coin_amount: float | None = None,\n        stop_price: float | None = None,\n        trigger_price: float | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n        \"\"\"\n        Create an order.\n\n        Args:\n            base_coin_symbol (str): The base coin symbol.\n            quote_coin_symbol (str): The quote coin symbol.\n            category_type (str | enums.OrderCategoryType): The order category type.\n            type (str | enums.OrderType): The order type.\n            amount (float | None): The amount.\n            price (float | None): The price.\n            quote_coin_amount (float | None): The quote coin amount.\n            stop_price (float | None): The stop price.\n            trigger_price (float | None): The trigger price.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `category_type` and `type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n\n    def cancel_order(\n        self, order_id: int, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n        \"\"\"\n        Cancel an order.\n\n        Args:\n            order_id (int): The order ID.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n        return self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n\n    def get_orders_history(  # noqa: PLR0913, PLR0917\n        self,\n        is_trade: str | enums.IsTrade,\n        market_id: int | None = None,\n        type: str | enums.OrderType | None = None,  # noqa: A002\n        category_type: str | enums.OrderCategoryType | None = None,\n        from_date: str | None = None,\n        to_date: str | None = None,\n        **kwargs: Any,\n    ) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n        \"\"\"\n        Get the orders; history.\n\n        Args:\n            is_trade (str | enums.IsTrade): If the order is a trade.\n            market_id (int | None): The market ID.\n            type (str | enums.OrderType | None): The order type.\n            category_type (str | enums.OrderCategoryType | None): The order category type.\n            from_date (str | None): The start date.\n            to_date (str | None): The end date.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n\n        Notes:\n            Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ORDERS_HISTORY_URI, **kwargs)\n\n    def get_markets_information(\n        self, page: int | None = None, **kwargs: Any\n    ) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n        \"\"\"\n        Get the markets' information.\n\n        Args:\n            page (int | None): The page.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n\n    def get_order_book(\n        self, base_coin: str, quote_coin: str, **kwargs: Any\n    ) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n        \"\"\"\n        Get the order book.\n\n        Args:\n            base_coin (str): The base coin.\n            quote_coin (str): The quote coin.\n            kwargs (Any): The keyword arguments.\n\n        Returns:\n            rt.BaseResponse: The response.\n        \"\"\"\n        kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n        return self._get(self.ORDER_BOOK_URI, **kwargs)\n\n    def close_connection(self) -&gt; None:\n        \"\"\"\n        Close the connection.\n\n        Returns:\n            None\n        \"\"\"\n        self.session.close()\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.__init__","title":"<code>__init__(api_key, api_secret=None, session_params=None, requests_params=None)</code>","text":"<p>Initialize the core client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key.</p> required <code>api_secret</code> <code>str | None</code> <p>The API secret.</p> <code>None</code> <code>session_params</code> <code>dict[str, Any] | None</code> <p>The session parameters.</p> <code>None</code> <code>requests_params</code> <code>dict[str, Any] | None</code> <p>The requests parameters.</p> <code>None</code> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def __init__(\n    self,\n    api_key: str,\n    api_secret: str | None = None,\n    session_params: dict[str, Any] | None = None,\n    requests_params: dict[str, Any] | None = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the core client.\n\n    Args:\n        api_key (str): The API key.\n        api_secret (str | None): The API secret.\n        session_params (dict[str, Any] | None): The session parameters.\n        requests_params (dict[str, Any] | None): The requests parameters.\n    \"\"\"\n    super().__init__(api_key, api_secret, session_params, requests_params)\n    self.session = self._init_session()\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>","text":"<p>Cancel an order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>int</code> <p>The order ID.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CancelOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def cancel_order(\n    self, order_id: int, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.CancelOrderResponse]:\n    \"\"\"\n    Cancel an order.\n\n    Args:\n        order_id (int): The order ID.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.CANCEL_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.close_connection","title":"<code>close_connection()</code>","text":"<p>Close the connection.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def close_connection(self) -&gt; None:\n    \"\"\"\n    Close the connection.\n\n    Returns:\n        None\n    \"\"\"\n    self.session.close()\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.create_order","title":"<code>create_order(base_coin_symbol, quote_coin_symbol, category_type, type, amount=None, price=None, quote_coin_amount=None, stop_price=None, trigger_price=None, **kwargs)</code>","text":"<p>Create an order.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin_symbol</code> <code>str</code> <p>The base coin symbol.</p> required <code>quote_coin_symbol</code> <code>str</code> <p>The quote coin symbol.</p> required <code>category_type</code> <code>str | OrderCategoryType</code> <p>The order category type.</p> required <code>type</code> <code>str | OrderType</code> <p>The order type.</p> required <code>amount</code> <code>float | None</code> <p>The amount.</p> <code>None</code> <code>price</code> <code>float | None</code> <p>The price.</p> <code>None</code> <code>quote_coin_amount</code> <code>float | None</code> <p>The quote coin amount.</p> <code>None</code> <code>stop_price</code> <code>float | None</code> <p>The stop price.</p> <code>None</code> <code>trigger_price</code> <code>float | None</code> <p>The trigger price.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[CreateOrderResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>category_type</code> and <code>type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def create_order(  # noqa: PLR0913, PLR0917\n    self,\n    base_coin_symbol: str,\n    quote_coin_symbol: str,\n    category_type: str | enums.OrderCategoryType,\n    type: str | enums.OrderType,  # noqa: A002\n    amount: float | None = None,\n    price: float | None = None,\n    quote_coin_amount: float | None = None,\n    stop_price: float | None = None,\n    trigger_price: float | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.CreateOrderResponse]:\n    \"\"\"\n    Create an order.\n\n    Args:\n        base_coin_symbol (str): The base coin symbol.\n        quote_coin_symbol (str): The quote coin symbol.\n        category_type (str | enums.OrderCategoryType): The order category type.\n        type (str | enums.OrderType): The order type.\n        amount (float | None): The amount.\n        price (float | None): The price.\n        quote_coin_amount (float | None): The quote coin amount.\n        stop_price (float | None): The stop price.\n        trigger_price (float | None): The trigger price.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `category_type` and `type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.CREATE_ORDER_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_assets_history","title":"<code>get_assets_history(type=None, symbol=None, coin_type=None, reason_type=None, **kwargs)</code>","text":"<p>Get the assets' history.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | TransactionType</code> <p>The transaction type.</p> <code>None</code> <code>symbol</code> <code>str | None</code> <p>The symbol.</p> <code>None</code> <code>coin_type</code> <code>str | CoinType | None</code> <p>The coin type.</p> <code>None</code> <code>reason_type</code> <code>str | ReasonType | None</code> <p>The reason type.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetsHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>type</code>, <code>coin_type</code>, and <code>reason_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_assets_history(\n    self,\n    type: str | enums.TransactionType | None = None,  # noqa: A002\n    symbol: str | None = None,\n    coin_type: str | enums.CoinType | None = None,\n    reason_type: str | enums.ReasonType | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetsHistoryResponse]:\n    \"\"\"\n    Get the assets' history.\n\n    Args:\n        type (str | enums.TransactionType): The transaction type.\n        symbol (str | None): The symbol.\n        coin_type (str | enums.CoinType | None): The coin type.\n        reason_type (str | enums.ReasonType | None): The reason type.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `type`, `coin_type`, and `reason_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ASSETS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_assets_information","title":"<code>get_assets_information(name=None, alphabet=None, without_irt=None, without_zero=None, **kwargs)</code>","text":"<p>Get the assets' information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name.</p> <code>None</code> <code>alphabet</code> <code>str | None</code> <p>The starting alphabet.</p> <code>None</code> <code>without_irt</code> <code>str | WithoutIrt | None</code> <p>If the IRT should be excluded.</p> <code>None</code> <code>without_zero</code> <code>str | WithoutZero | None</code> <p>If the zero balances should be excluded.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[AssetInformationResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>without_irt</code> and <code>without_zero</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_assets_information(\n    self,\n    name: str | None = None,\n    alphabet: str | None = None,\n    without_irt: str | None = None,\n    without_zero: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.AssetInformationResponse]:\n    \"\"\"\n    Get the assets' information.\n\n    Args:\n        name (str | None): The name.\n        alphabet (str | None): The starting alphabet.\n        without_irt (str | enums.WithoutIrt | None): If the IRT should be excluded.\n        without_zero (str | enums.WithoutZero | None): If the zero balances should be excluded.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `without_irt` and `without_zero` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ASSETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_deposit_networks","title":"<code>get_deposit_networks(symbol, **kwargs)</code>","text":"<p>Get the deposit networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[DepositNetworksResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_deposit_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.DepositNetworksResponse]:\n    \"\"\"\n    Get the deposit networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.DEPOSIT_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_markets_information","title":"<code>get_markets_information(page=None, **kwargs)</code>","text":"<p>Get the markets' information.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int | None</code> <p>The page.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[MarketListResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_markets_information(\n    self, page: int | None = None, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.MarketListResponse]:\n    \"\"\"\n    Get the markets' information.\n\n    Args:\n        page (int | None): The page.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.MARKETS_INFORMATION_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_order_book","title":"<code>get_order_book(base_coin, quote_coin, **kwargs)</code>","text":"<p>Get the order book.</p> <p>Parameters:</p> Name Type Description Default <code>base_coin</code> <code>str</code> <p>The base coin.</p> required <code>quote_coin</code> <code>str</code> <p>The quote coin.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[dict[str, OrderBookResponse]]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_order_book(\n    self, base_coin: str, quote_coin: str, **kwargs: Any\n) -&gt; rt.BaseResponse[dict[str, rt.OrderBookResponse]]:\n    \"\"\"\n    Get the order book.\n\n    Args:\n        base_coin (str): The base coin.\n        quote_coin (str): The quote coin.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ORDER_BOOK_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_orders_history","title":"<code>get_orders_history(is_trade, market_id=None, type=None, category_type=None, from_date=None, to_date=None, **kwargs)</code>","text":"<p>Get the orders; history.</p> <p>Parameters:</p> Name Type Description Default <code>is_trade</code> <code>str | IsTrade</code> <p>If the order is a trade.</p> required <code>market_id</code> <code>int | None</code> <p>The market ID.</p> <code>None</code> <code>type</code> <code>str | OrderType | None</code> <p>The order type.</p> <code>None</code> <code>category_type</code> <code>str | OrderCategoryType | None</code> <p>The order category type.</p> <code>None</code> <code>from_date</code> <code>str | None</code> <p>The start date.</p> <code>None</code> <code>to_date</code> <code>str | None</code> <p>The end date.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[OrdersHistoryResponse]</code> <p>rt.BaseResponse: The response.</p> Notes <p>Use <code>is_trade</code>, <code>type</code>, and <code>category_type</code> respective enums for better readability.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_orders_history(  # noqa: PLR0913, PLR0917\n    self,\n    is_trade: str | enums.IsTrade,\n    market_id: int | None = None,\n    type: str | enums.OrderType | None = None,  # noqa: A002\n    category_type: str | enums.OrderCategoryType | None = None,\n    from_date: str | None = None,\n    to_date: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.OrdersHistoryResponse]:\n    \"\"\"\n    Get the orders; history.\n\n    Args:\n        is_trade (str | enums.IsTrade): If the order is a trade.\n        market_id (int | None): The market ID.\n        type (str | enums.OrderType | None): The order type.\n        category_type (str | enums.OrderCategoryType | None): The order category type.\n        from_date (str | None): The start date.\n        to_date (str | None): The end date.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n\n    Notes:\n        Use `is_trade`, `type`, and `category_type` respective enums for better readability.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.ORDERS_HISTORY_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.get_withdraw_networks","title":"<code>get_withdraw_networks(symbol, **kwargs)</code>","text":"<p>Get the withdrawal networks.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol.</p> required <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[WithdrawalNetworksResponse]</code> <p>BaseResponse[WithdrawalNetworksResponse]: The response.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>An error occurred.</p> <code>RequestError</code> <p>An error occurred.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def get_withdraw_networks(\n    self, symbol: str, **kwargs: Any\n) -&gt; rt.BaseResponse[rt.WithdrawalNetworksResponse]:\n    \"\"\"\n    Get the withdrawal networks.\n\n    Args:\n        symbol (str): The symbol.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        BaseResponse[WithdrawalNetworksResponse]: The response.\n\n    Raises:\n        APIError: An error occurred.\n        RequestError: An error occurred.\n    \"\"\"\n    kwargs[\"params\"] = self._get_kwargs_from_locals(locals())\n    return self._get(self.WITHDRAW_NETWORKS_URI, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bit24.clients.client.Client.submit_withdraw","title":"<code>submit_withdraw(symbol, network_id, address, value, memo=None, **kwargs)</code>","text":"<p>Submit a withdrawal.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol</p> required <code>network_id</code> <code>int</code> <p>The network ID.</p> required <code>address</code> <code>str</code> <p>The address.</p> required <code>value</code> <code>str</code> <p>The value.</p> required <code>memo</code> <code>Optional[str]</code> <p>The memo.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>BaseResponse[SubmitWithdrawResponse]</code> <p>rt.BaseResponse: The response.</p> Source code in <code>src/bit24/clients/client.py</code> <pre><code>def submit_withdraw(  # noqa: PLR0913\n    self,\n    symbol: str,\n    network_id: int,\n    address: str,\n    value: str,\n    memo: str | None = None,\n    **kwargs: Any,\n) -&gt; rt.BaseResponse[rt.SubmitWithdrawResponse]:\n    \"\"\"\n    Submit a withdrawal.\n\n    Args:\n        symbol (str): The symbol\n        network_id (int): The network ID.\n        address (str): The address.\n        value (str): The value.\n        memo (Optional[str]): The memo.\n        kwargs (Any): The keyword arguments.\n\n    Returns:\n        rt.BaseResponse: The response.\n    \"\"\"\n    kwargs[\"data\"] = self._get_kwargs_from_locals(locals())\n    return self._post(self.SUBMIT_WITHDRAW_URI, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/types/","title":"types","text":""},{"location":"reference/types/#src.bit24.types--types","title":"Types","text":"<p>This module contains the type definitions for the response of the withdrawal networks endpoint.</p>"},{"location":"reference/types/#src.bit24.types--client-types-for-the-client","title":"Client - Types for the client.","text":""},{"location":"reference/types/client/","title":"client","text":""},{"location":"reference/types/client/#src.bit24.types.client--client-type","title":"Client Type","text":"<p>This module contains the type hints for the client.</p>"},{"location":"reference/types/client/#src.bit24.types.client--types","title":"Types","text":"<ul> <li><code>HttpSession</code>: The HTTP session type.</li> <li><code>HttpResponse</code>: The HTTP response type.</li> <li><code>HttpPreparedRequest</code>: The HTTP prepared request type.</li> </ul>"},{"location":"reference/types/responses/","title":"responses","text":""},{"location":"reference/types/responses/#src.bit24.types.responses--responses-type","title":"Responses Type","text":"<p>This module contains the endpoints for the client.</p>"},{"location":"reference/types/responses/#src.bit24.types.responses.AssetInfo","title":"<code>AssetInfo</code>","text":"<p>             Bases: <code>TypedDict</code>, <code>CoinInfo</code></p> <p>Asset Information.</p> <p>Attributes:</p> Name Type Description <code>coin_type</code> <code>int</code> <p>Coin type.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>change_24hr</code> <code>str</code> <p>Change 24hr.</p> <code>balance</code> <code>str</code> <p>Balance.</p> <code>available_balance</code> <code>str</code> <p>Available balance.</p> <code>in_orders</code> <code>str</code> <p>In orders.</p> <code>balance_irt</code> <code>str</code> <p>Balance IRT.</p> <code>balance_usdt</code> <code>str</code> <p>Balance USDT.</p> <code>markets</code> <code>list[AssetMarketInfo]</code> <p>Markets.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetInfo(\n...     coin_type=1,\n...     each_price=\"each_price\",\n...     change_24hr=\"change_24hr\",\n...     balance=\"balance\",\n...     available_balance=\"available_balance\",\n...     in_orders=\"in_orders\",\n...     balance_irt=\"balance_irt\",\n...     balance_usdt=\"balance_usdt\",\n...     markets=[...],  # AssetMarketInfo\n... )\n{\n    'coin_type': 1,\n    'each_price': 'each_price',\n    'change_24hr': 'change_24hr',\n    'balance': 'balance',\n    'available_balance': 'available_balance',\n    'in_orders': 'in_orders',\n    'balance_irt': 'balance_irt',\n    'balance_usdt': 'balance_usdt',\n    'markets': [...] # AssetMarketInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetInfo(TypedDict, CoinInfo):\n    \"\"\"\n    Asset Information.\n\n    Attributes:\n        coin_type (int): Coin type.\n        each_price (str): Each price.\n        change_24hr (str): Change 24hr.\n        balance (str): Balance.\n        available_balance (str): Available balance.\n        in_orders (str): In orders.\n        balance_irt (str): Balance IRT.\n        balance_usdt (str): Balance USDT.\n        markets (list[AssetMarketInfo]): Markets.\n\n    Examples:\n        &gt;&gt;&gt; AssetInfo(\n        ...     coin_type=1,\n        ...     each_price=\"each_price\",\n        ...     change_24hr=\"change_24hr\",\n        ...     balance=\"balance\",\n        ...     available_balance=\"available_balance\",\n        ...     in_orders=\"in_orders\",\n        ...     balance_irt=\"balance_irt\",\n        ...     balance_usdt=\"balance_usdt\",\n        ...     markets=[...],  # AssetMarketInfo\n        ... )\n        {\n            'coin_type': 1,\n            'each_price': 'each_price',\n            'change_24hr': 'change_24hr',\n            'balance': 'balance',\n            'available_balance': 'available_balance',\n            'in_orders': 'in_orders',\n            'balance_irt': 'balance_irt',\n            'balance_usdt': 'balance_usdt',\n            'markets': [...] # AssetMarketInfo\n        }\n    \"\"\"\n\n    coin_type: int\n    each_price: str\n    change_24hr: str\n    balance: str\n    available_balance: str\n    in_orders: str\n    balance_irt: str\n    balance_usdt: str\n    markets: list[AssetMarketInfo]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.AssetInformationResponse","title":"<code>AssetInformationResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Asset Information Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>asset</code> <code>list[AssetInfo]</code> <p>Asset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetInformationResponse(\n...     message=\"message\",\n...     asset=[...],  # AssetInfo\n... )\n{\n    'message': 'message',\n    'asset': [...] # AssetInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetInformationResponse(TypedDict):\n    \"\"\"\n    Asset Information Response.\n\n    Attributes:\n        message (str): Message.\n        asset (list[AssetInfo]): Asset.\n\n    Examples:\n        &gt;&gt;&gt; AssetInformationResponse(\n        ...     message=\"message\",\n        ...     asset=[...],  # AssetInfo\n        ... )\n        {\n            'message': 'message',\n            'asset': [...] # AssetInfo\n        }\n    \"\"\"\n\n    message: str\n    asset: list[AssetInfo]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.AssetMarketInfo","title":"<code>AssetMarketInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market Information.</p> <p>Attributes:</p> Name Type Description <code>base_coin_symbol</code> <code>str</code> <p>Base coin symbol.</p> <code>quote_coin_symbol</code> <code>str</code> <p>Quote coin symbol.</p> <code>is_active</code> <code>int</code> <p>Is active.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetMarketInfo(\n...     base_coin_symbol=\"base_coin_symbol\",\n...     quote_coin_symbol=\"quote_coin_symbol\",\n...     is_active=1,\n... )\n{\n    'base_coin_symbol': 'base_coin_symbol',\n    'quote_coin_symbol': 'quote_coin_symbol',\n    'is_active': 1\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetMarketInfo(TypedDict):\n    \"\"\"\n    Market Information.\n\n    Attributes:\n        base_coin_symbol (str): Base coin symbol.\n        quote_coin_symbol (str): Quote coin symbol.\n        is_active (int): Is active.\n\n    Examples:\n        &gt;&gt;&gt; AssetMarketInfo(\n        ...     base_coin_symbol=\"base_coin_symbol\",\n        ...     quote_coin_symbol=\"quote_coin_symbol\",\n        ...     is_active=1,\n        ... )\n        {\n            'base_coin_symbol': 'base_coin_symbol',\n            'quote_coin_symbol': 'quote_coin_symbol',\n            'is_active': 1\n        }\n    \"\"\"\n\n    base_coin_symbol: str\n    quote_coin_symbol: str\n    is_active: int\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.AssetsHistoryResponse","title":"<code>AssetsHistoryResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Assets history response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[Transaction]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetsHistoryResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[\n...         {\n...             \"id\": 1,\n...             \"name\": \"name\",\n...             \"fa_name\": \"fa_name\",\n...             \"symbol\": \"symbol\",\n...             \"logo\": \"logo\",\n...             \"value\": \"value\",\n...             \"done_value\": \"done_value\",\n...             \"type\": 1,\n...             \"transaction_code\": \"transaction_code\",\n...             \"type_text\": \"type_text\",\n...             \"reason_type\": \"reason_type\",\n...             \"reason_text\": \"reason_text\",\n...             \"reason_type_text\": \"reason_type_text\",\n...             \"reason_id\": 1,\n...             \"balance_status\": 1,\n...             \"balance_status_text\": \"balance_status_text\",\n...             \"commission\": 1,\n...             \"created_at\": \"created_at\",\n...             \"created_at_jalali\": \"created_at_jalali\",\n...         }\n...     ],\n... )\n{\n    \"message\": \"message\",\n    \"has_paginate\": 1,\n    \"total_data\": 1,\n    \"current_page\": 1,\n    \"from_\": 1,\n    \"to\": 1,\n    \"per_page\": 1,\n    \"results\": [\n        {\n            \"id\": 1,\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"symbol\": \"symbol\",\n            \"logo\": \"logo\",\n            \"value\": \"value\",\n            \"done_value\": \"done_value\",\n            \"type\": 1,\n            \"transaction_code\": \"transaction_code\",\n            \"type_text\": \"type_text\",\n            \"reason_type\": \"reason_type\",\n            \"reason_text\": \"reason_text\",\n            \"reason_type_text\": \"reason_type_text\",\n            \"reason_id\": 1,\n            \"balance_status\": 1,\n            \"balance_status_text\": \"balance_status_text\",\n            \"commission\": 1,\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\"\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_history.py</code> <pre><code>class AssetsHistoryResponse(TypedDict):\n    \"\"\"\n    Assets history response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to (int): To.\n        per_page (int): Per page.\n        results (list[Transaction]): Results.\n\n    Examples:\n        &gt;&gt;&gt; AssetsHistoryResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[\n        ...         {\n        ...             \"id\": 1,\n        ...             \"name\": \"name\",\n        ...             \"fa_name\": \"fa_name\",\n        ...             \"symbol\": \"symbol\",\n        ...             \"logo\": \"logo\",\n        ...             \"value\": \"value\",\n        ...             \"done_value\": \"done_value\",\n        ...             \"type\": 1,\n        ...             \"transaction_code\": \"transaction_code\",\n        ...             \"type_text\": \"type_text\",\n        ...             \"reason_type\": \"reason_type\",\n        ...             \"reason_text\": \"reason_text\",\n        ...             \"reason_type_text\": \"reason_type_text\",\n        ...             \"reason_id\": 1,\n        ...             \"balance_status\": 1,\n        ...             \"balance_status_text\": \"balance_status_text\",\n        ...             \"commission\": 1,\n        ...             \"created_at\": \"created_at\",\n        ...             \"created_at_jalali\": \"created_at_jalali\",\n        ...         }\n        ...     ],\n        ... )\n        {\n            \"message\": \"message\",\n            \"has_paginate\": 1,\n            \"total_data\": 1,\n            \"current_page\": 1,\n            \"from_\": 1,\n            \"to\": 1,\n            \"per_page\": 1,\n            \"results\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"symbol\": \"symbol\",\n                    \"logo\": \"logo\",\n                    \"value\": \"value\",\n                    \"done_value\": \"done_value\",\n                    \"type\": 1,\n                    \"transaction_code\": \"transaction_code\",\n                    \"type_text\": \"type_text\",\n                    \"reason_type\": \"reason_type\",\n                    \"reason_text\": \"reason_text\",\n                    \"reason_type_text\": \"reason_type_text\",\n                    \"reason_id\": 1,\n                    \"balance_status\": 1,\n                    \"balance_status_text\": \"balance_status_text\",\n                    \"commission\": 1,\n                    \"created_at\": \"created_at\",\n                    \"created_at_jalali\": \"created_at_jalali\"\n                }\n            ]\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[Transaction]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.BaseResponse","title":"<code>BaseResponse</code>","text":"<p>             Bases: <code>TypedDict</code>, <code>Generic[T]</code></p> <p>Base Response.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>T</code> <p>Data.</p> <code>error</code> <code>dict[str, str] | None</code> <p>Error.</p> <code>status_code</code> <code>int</code> <p>Status code.</p> <code>success</code> <code>bool</code> <p>Success.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; BaseResponse(data=..., error=..., status_code=..., success=...)\n{\n    'data': ...,\n    'error': ...,\n    'status_code': ...,\n    'success': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class BaseResponse(TypedDict, Generic[T]):\n    \"\"\"\n    Base Response.\n\n    Attributes:\n        data (T): Data.\n        error (dict[str, str] | None): Error.\n        status_code (int): Status code.\n        success (bool): Success.\n\n    Examples:\n        &gt;&gt;&gt; BaseResponse(data=..., error=..., status_code=..., success=...)\n        {\n            'data': ...,\n            'error': ...,\n            'status_code': ...,\n            'success': ...\n        }\n    \"\"\"\n\n    data: T\n    error: Error | None\n    status_code: int\n    success: bool\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.CancelOrderResponse","title":"<code>CancelOrderResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Cancel Order Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CancelOrderResponse(message=\"message\")\n{'message': 'message'}\n</code></pre> Source code in <code>src/bit24/types/responses/cancel_order.py</code> <pre><code>class CancelOrderResponse(TypedDict):\n    \"\"\"\n    Cancel Order Response.\n\n    Attributes:\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; CancelOrderResponse(message=\"message\")\n        {'message': 'message'}\n    \"\"\"\n\n    message: str\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.CreateOrderResponse","title":"<code>CreateOrderResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Create Order Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>order</code> <code>OrderInfo</code> <p>Order.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CreateOrderResponse(\n...     message=\"message\",\n...     order=OrderInfo(\n...         id=1,\n...         type=1,\n...         each_price=\"each_price\",\n...         stop_price=\"stop_price\",\n...         trigger_price=\"trigger_price\",\n...         amount=\"amount\",\n...         available_amount=\"available_amount\",\n...         done_value=\"done_value\",\n...         done_percent=\"done_percent\",\n...         mean_value=1,\n...         commission=\"commission\",\n...         total=\"total\",\n...         created_at=\"created_at\",\n...         created_at_jalali=\"created_at_jalali\",\n...         base_coin=CoinInfo(\n...             id=1,\n...             symbol=\"symbol\",\n...             name=\"name\",\n...             fa_name=\"fa_name\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...         ),\n...         quote_coin=CoinInfo(\n...             id=1,\n...             symbol=\"symbol\",\n...             name=\"name\",\n...             fa_name=\"fa_name\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...         ),\n...         status=1,\n...         status_text=\"status_text\",\n...         category_type=\"category_type\",\n...         category_type_text=\"category_type_text\",\n...         conditions=\"conditions\",\n...         triggered_category_type=\"triggered_category_type\",\n...         is_trade=1,\n...     ),\n... )\n{\n    \"message\": \"message\",\n    \"order\": {\n        \"id\": 1,\n        \"type\": 1,\n        \"each_price\": \"each_price\",\n        \"stop_price\": \"stop_price\",\n        \"trigger_price\": \"trigger_price\",\n        \"amount\": \"amount\",\n        \"available_amount\": \"available_amount\",\n        \"done_value\": \"done_value\",\n        \"done_percent\": \"done_percent\",\n        \"mean_value\": 1,\n        \"commission\": \"commission\",\n        \"total\": \"total\",\n        \"created_at\": \"created_at\",\n        \"created_at_jalali\": \"created_at_jalali\",\n        \"base_coin\": {\n            \"id\": 1,\n            \"symbol\": \"symbol\",\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"web_icon\": \"web_icon\",\n            \"app_icon\": \"app_icon\"\n        },\n        \"quote_coin\": {\n            \"id\": 1,\n            \"symbol\": \"symbol\",\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"web_icon\": \"web_icon\",\n            \"app_icon\": \"app_icon\"\n        },\n        \"status\": 1,\n        \"status_text\": \"status_text\",\n        \"category_type\": \"category_type\",\n        \"category_type_text\": \"category_type_text\",\n        \"conditions\": \"conditions\",\n        \"triggered_category_type\": \"triggered_category_type\",\n        \"is_trade\": 1\n    }\n}\n</code></pre> Source code in <code>src/bit24/types/responses/create_order.py</code> <pre><code>class CreateOrderResponse(TypedDict):\n    \"\"\"\n    Create Order Response.\n\n    Attributes:\n        message (str): Message.\n        order (OrderInfo): Order.\n\n    Examples:\n        &gt;&gt;&gt; CreateOrderResponse(\n        ...     message=\"message\",\n        ...     order=OrderInfo(\n        ...         id=1,\n        ...         type=1,\n        ...         each_price=\"each_price\",\n        ...         stop_price=\"stop_price\",\n        ...         trigger_price=\"trigger_price\",\n        ...         amount=\"amount\",\n        ...         available_amount=\"available_amount\",\n        ...         done_value=\"done_value\",\n        ...         done_percent=\"done_percent\",\n        ...         mean_value=1,\n        ...         commission=\"commission\",\n        ...         total=\"total\",\n        ...         created_at=\"created_at\",\n        ...         created_at_jalali=\"created_at_jalali\",\n        ...         base_coin=CoinInfo(\n        ...             id=1,\n        ...             symbol=\"symbol\",\n        ...             name=\"name\",\n        ...             fa_name=\"fa_name\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...         ),\n        ...         quote_coin=CoinInfo(\n        ...             id=1,\n        ...             symbol=\"symbol\",\n        ...             name=\"name\",\n        ...             fa_name=\"fa_name\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...         ),\n        ...         status=1,\n        ...         status_text=\"status_text\",\n        ...         category_type=\"category_type\",\n        ...         category_type_text=\"category_type_text\",\n        ...         conditions=\"conditions\",\n        ...         triggered_category_type=\"triggered_category_type\",\n        ...         is_trade=1,\n        ...     ),\n        ... )\n        {\n            \"message\": \"message\",\n            \"order\": {\n                \"id\": 1,\n                \"type\": 1,\n                \"each_price\": \"each_price\",\n                \"stop_price\": \"stop_price\",\n                \"trigger_price\": \"trigger_price\",\n                \"amount\": \"amount\",\n                \"available_amount\": \"available_amount\",\n                \"done_value\": \"done_value\",\n                \"done_percent\": \"done_percent\",\n                \"mean_value\": 1,\n                \"commission\": \"commission\",\n                \"total\": \"total\",\n                \"created_at\": \"created_at\",\n                \"created_at_jalali\": \"created_at_jalali\",\n                \"base_coin\": {\n                    \"id\": 1,\n                    \"symbol\": \"symbol\",\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"web_icon\": \"web_icon\",\n                    \"app_icon\": \"app_icon\"\n                },\n                \"quote_coin\": {\n                    \"id\": 1,\n                    \"symbol\": \"symbol\",\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"web_icon\": \"web_icon\",\n                    \"app_icon\": \"app_icon\"\n                },\n                \"status\": 1,\n                \"status_text\": \"status_text\",\n                \"category_type\": \"category_type\",\n                \"category_type_text\": \"category_type_text\",\n                \"conditions\": \"conditions\",\n                \"triggered_category_type\": \"triggered_category_type\",\n                \"is_trade\": 1\n            }\n        }\n    \"\"\"\n\n    message: str\n    order: OrderInfo\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.DepositNetworkInfo","title":"<code>DepositNetworkInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Network Information.</p> <p>Attributes:</p> Name Type Description <code>network_name</code> <code> (str</code> <p>Network name.</p> <code>network_layer</code> <code>str</code> <p>Network layer.</p> <code>description_deposit</code> <code>str</code> <p>Description deposit.</p> <code>min_deposit</code> <code>str</code> <p>Min deposit.</p> <code>address</code> <code>str</code> <p>Address.</p> <code>memo</code> <code>str</code> <p>Memo.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DepositNetworkInfo(\n...     network_name=\"network_name\",\n...     network_layer=\"network_layer\",\n...     description_deposit=\"description_deposit\",\n...     min_deposit=\"min_deposit\",\n...     address=\"address\",\n...     memo=\"memo\",\n... )\n{\n    'network_name': 'network_name',\n    'network_layer': 'network_layer',\n    'description_deposit': 'description_deposit',\n    'min_deposit': 'min_deposit',\n    'address': 'address',\n    'memo': 'memo'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/deposit_networks.py</code> <pre><code>class DepositNetworkInfo(TypedDict):\n    \"\"\"\n    Network Information.\n\n    Attributes:\n        network_name  (str): Network name.\n        network_layer (str): Network layer.\n        description_deposit (str): Description deposit.\n        min_deposit (str): Min deposit.\n        address (str): Address.\n        memo (str): Memo.\n\n    Examples:\n        &gt;&gt;&gt; DepositNetworkInfo(\n        ...     network_name=\"network_name\",\n        ...     network_layer=\"network_layer\",\n        ...     description_deposit=\"description_deposit\",\n        ...     min_deposit=\"min_deposit\",\n        ...     address=\"address\",\n        ...     memo=\"memo\",\n        ... )\n        {\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'description_deposit': 'description_deposit',\n            'min_deposit': 'min_deposit',\n            'address': 'address',\n            'memo': 'memo'\n        }\n    \"\"\"\n\n    network_name: str\n    network_layer: str\n    description_deposit: str\n    min_deposit: str\n    address: str\n    memo: str | None\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.DepositNetworksResponse","title":"<code>DepositNetworksResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Deposit Networks Response.</p> <p>Attributes:</p> Name Type Description <code>networks</code> <code>list[DepositNetworkInfo]</code> <p>Networks.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DepositNetworksResponse(\n...     networks=[\n...         DepositNetworkInfo(\n...             network_name=\"network_name\",\n...             network_layer=\"network_layer\",\n...             description_deposit=\"description_deposit\",\n...             min_deposit=\"min_deposit\",\n...             address=\"address\",\n...             memo=\"memo\",\n...         )\n...     ]\n... )\n{\n    'networks': [\n        {\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'description_deposit': 'description_deposit',\n            'min_deposit': 'min_deposit',\n            'address': 'address',\n            'memo': 'memo'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/deposit_networks.py</code> <pre><code>class DepositNetworksResponse(TypedDict):\n    \"\"\"\n    Deposit Networks Response.\n\n    Attributes:\n        networks (list[DepositNetworkInfo]): Networks.\n\n    Examples:\n        &gt;&gt;&gt; DepositNetworksResponse(\n        ...     networks=[\n        ...         DepositNetworkInfo(\n        ...             network_name=\"network_name\",\n        ...             network_layer=\"network_layer\",\n        ...             description_deposit=\"description_deposit\",\n        ...             min_deposit=\"min_deposit\",\n        ...             address=\"address\",\n        ...             memo=\"memo\",\n        ...         )\n        ...     ]\n        ... )\n        {\n            'networks': [\n                {\n                    'network_name': 'network_name',\n                    'network_layer': 'network_layer',\n                    'description_deposit': 'description_deposit',\n                    'min_deposit': 'min_deposit',\n                    'address': 'address',\n                    'memo': 'memo'\n                }\n            ]\n        }\n    \"\"\"\n\n    networks: list[DepositNetworkInfo]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.Error","title":"<code>Error</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Error.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>errors</code> <code>list[ErrorInformation]</code> <p>Errors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Error(message=..., errors=...)\n{\n    'message': ...,\n    'errors': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class Error(TypedDict):\n    \"\"\"\n    Error.\n\n    Attributes:\n        message (str): Message.\n        errors (list[ErrorInformation]): Errors.\n\n    Examples:\n        &gt;&gt;&gt; Error(message=..., errors=...)\n        {\n            'message': ...,\n            'errors': ...\n        }\n    \"\"\"\n\n    message: str\n    errors: list[ErrorInformation] | None\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.ErrorInformation","title":"<code>ErrorInformation</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Error Information.</p> <p>Attributes:</p> Name Type Description <code>reason</code> <code>str</code> <p>Reason.</p> <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ErrorInformation(reason=..., message=...)\n{\n    'reason': ...,\n    'message': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class ErrorInformation(TypedDict):\n    \"\"\"\n    Error Information.\n\n    Attributes:\n        reason (str): Reason.\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; ErrorInformation(reason=..., message=...)\n        {\n            'reason': ...,\n            'message': ...\n        }\n    \"\"\"\n\n    reason: str\n    message: str\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.MarketInfo","title":"<code>MarketInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market Information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Market ID.</p> <code>base_coin_id</code> <code>int</code> <p>Base coin ID.</p> <code>base_coin_name</code> <code>str</code> <p>Base coin name.</p> <code>base_coin_fa_name</code> <code>str</code> <p>Base coin Farsi name.</p> <code>base_coin_symbol</code> <code>str</code> <p>Base coin symbol.</p> <code>quote_coin_id</code> <code>int</code> <p>Quote coin ID.</p> <code>quote_coin_symbol</code> <code>str</code> <p>Quote coin symbol.</p> <code>quote_coin_name</code> <code>str</code> <p>Quote coin name.</p> <code>quote_coin_fa_name</code> <code>str</code> <p>Quote coin Farsi name.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>other_side_each_price</code> <code>str</code> <p>Other side each price.</p> <code>quote_coin_volume</code> <code>str</code> <p>Quote coin volume.</p> <code>base_coin_volume</code> <code>str</code> <p>Base coin volume.</p> <code>_24h_change</code> <code>str</code> <p>24-hour change.</p> <code>_24h_change_volume</code> <code>str</code> <p>24-hour change volume.</p> <code>total_min</code> <code>str</code> <p>Total min.</p> <code>market_order_quote_coin_total_min</code> <code>str</code> <p>Market order quote coin total min.</p> <code>market_order_base_coin_total_min</code> <code>str</code> <p>Market order base coin total min.</p> <code>web_icon</code> <code>str</code> <p>Web icon.</p> <code>app_icon</code> <code>str</code> <p>App icon.</p> <code>quote_web_icon</code> <code>str</code> <p>Quote web icon.</p> <code>quote_app_icon</code> <code>str</code> <p>Quote app icon.</p> <code>is_active</code> <code>int</code> <p>Is active.</p> <code>first_order</code> <code>str</code> <p>First order.</p> <code>last_order</code> <code>str</code> <p>Last order.</p> <code>min_price</code> <code>str</code> <p>Min price.</p> <code>max_price</code> <code>str</code> <p>Max price.</p> <code>base_coin_decimal</code> <code>int</code> <p>Base coin decimal.</p> <code>quote_coin_decimal</code> <code>int</code> <p>Quote coin decimal.</p> <code>daily_chart_icon</code> <code>str</code> <p>Daily chart icon.</p> <code>is_favorite</code> <code>bool</code> <p>Is favorite.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MarketInfo(\n...     id=1,\n...     base_coin_id=1,\n...     base_coin_name=\"base_coin_name\",\n...     base_coin_fa_name=\"base_coin_fa_name\",\n...     base_coin_symbol=\"base_coin_symbol\",\n...     quote_coin_id=1,\n...     quote_coin_symbol=\"quote_coin_symbol\",\n...     quote_coin_name=\"quote_coin_name\",\n...     quote_coin_fa_name=\"quote_coin_fa_name\",\n...     each_price=\"each_price\",\n...     other_side_each_price=\"other_side_each_price\",\n...     quote_coin_volume=\"quote_coin_volume\",\n...     base_coin_volume=\"base_coin_volume\",\n...     _24h_change=\"_24h_change\",\n...     _24h_change_volume=\"_24h_change_volume\",\n...     total_min=\"total_min\",\n...     market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n...     market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n...     web_icon=\"web_icon\",\n...     app_icon=\"app_icon\",\n...     quote_web_icon=\"quote_web_icon\",\n...     quote_app_icon=\"quote_app_icon\",\n...     is_active=1,\n...     first_order=\"first_order\",\n...     last_order=\"last_order\",\n...     min_price=\"min_price\",\n...     max_price=\"max_price\",\n...     base_coin_decimal=1,\n...     quote_coin_decimal=1,\n...     daily_chart_icon=\"daily_chart_icon\",\n...     is_favorite=True,\n... )\n{\n    'id': 1,\n    'base_coin_id': 1,\n    'base_coin_name': 'base_coin_name',\n    'base_coin_fa_name': 'base_coin_fa_name',\n    'base_coin_symbol': 'base_coin_symbol',\n    'quote_coin_id': 1,\n    'quote_coin_symbol': 'quote_coin_symbol',\n    'quote_coin_name': 'quote_coin_name',\n    'quote_coin_fa_name': 'quote_coin_fa_name',\n    'each_price': 'each_price',\n    'other_side_each_price': 'other_side_each_price',\n    'quote_coin_volume': 'quote_coin_volume',\n    'base_coin_volume': 'base_coin_volume',\n    '_24h_change': '_24h_change',\n    '_24h_change_volume': '_24h_change_volume',\n    'total_min': 'total_min',\n    'market_order_quote_coin_total_min': 'market_order_quote_coin_total_min',\n    'market_order_base_coin_total_min': 'market_order_base_coin_total_min',\n    'web_icon': 'web_icon',\n    'app_icon': 'app_icon',\n    'quote_web_icon': 'quote_web_icon',\n    'quote_app_icon': 'quote_app_icon',\n    'is_active': 1,\n    'first_order': 'first_order',\n    'last_order': 'last_order',\n    'min_price': 'min_price',\n    'max_price': 'max_price',\n    'base_coin_decimal': 1,\n    'quote_coin_decimal': 1,\n    'daily_chart_icon': 'daily_chart_icon',\n    'is_favorite': True\n}\n</code></pre> Source code in <code>src/bit24/types/responses/markets_info.py</code> <pre><code>class MarketInfo(TypedDict):\n    \"\"\"\n    Market Information.\n\n    Attributes:\n        id (int): Market ID.\n        base_coin_id (int): Base coin ID.\n        base_coin_name (str): Base coin name.\n        base_coin_fa_name (str): Base coin Farsi name.\n        base_coin_symbol (str): Base coin symbol.\n        quote_coin_id (int): Quote coin ID.\n        quote_coin_symbol (str): Quote coin symbol.\n        quote_coin_name (str): Quote coin name.\n        quote_coin_fa_name (str): Quote coin Farsi name.\n        each_price (str): Each price.\n        other_side_each_price (str): Other side each price.\n        quote_coin_volume (str): Quote coin volume.\n        base_coin_volume (str): Base coin volume.\n        _24h_change (str): 24-hour change.\n        _24h_change_volume (str): 24-hour change volume.\n        total_min (str): Total min.\n        market_order_quote_coin_total_min (str): Market order quote coin total min.\n        market_order_base_coin_total_min (str): Market order base coin total min.\n        web_icon (str): Web icon.\n        app_icon (str): App icon.\n        quote_web_icon (str): Quote web icon.\n        quote_app_icon (str): Quote app icon.\n        is_active (int): Is active.\n        first_order (str): First order.\n        last_order (str): Last order.\n        min_price (str): Min price.\n        max_price (str): Max price.\n        base_coin_decimal (int): Base coin decimal.\n        quote_coin_decimal (int): Quote coin decimal.\n        daily_chart_icon (str): Daily chart icon.\n        is_favorite (bool): Is favorite.\n\n    Examples:\n        &gt;&gt;&gt; MarketInfo(\n        ...     id=1,\n        ...     base_coin_id=1,\n        ...     base_coin_name=\"base_coin_name\",\n        ...     base_coin_fa_name=\"base_coin_fa_name\",\n        ...     base_coin_symbol=\"base_coin_symbol\",\n        ...     quote_coin_id=1,\n        ...     quote_coin_symbol=\"quote_coin_symbol\",\n        ...     quote_coin_name=\"quote_coin_name\",\n        ...     quote_coin_fa_name=\"quote_coin_fa_name\",\n        ...     each_price=\"each_price\",\n        ...     other_side_each_price=\"other_side_each_price\",\n        ...     quote_coin_volume=\"quote_coin_volume\",\n        ...     base_coin_volume=\"base_coin_volume\",\n        ...     _24h_change=\"_24h_change\",\n        ...     _24h_change_volume=\"_24h_change_volume\",\n        ...     total_min=\"total_min\",\n        ...     market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n        ...     market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n        ...     web_icon=\"web_icon\",\n        ...     app_icon=\"app_icon\",\n        ...     quote_web_icon=\"quote_web_icon\",\n        ...     quote_app_icon=\"quote_app_icon\",\n        ...     is_active=1,\n        ...     first_order=\"first_order\",\n        ...     last_order=\"last_order\",\n        ...     min_price=\"min_price\",\n        ...     max_price=\"max_price\",\n        ...     base_coin_decimal=1,\n        ...     quote_coin_decimal=1,\n        ...     daily_chart_icon=\"daily_chart_icon\",\n        ...     is_favorite=True,\n        ... )\n        {\n            'id': 1,\n            'base_coin_id': 1,\n            'base_coin_name': 'base_coin_name',\n            'base_coin_fa_name': 'base_coin_fa_name',\n            'base_coin_symbol': 'base_coin_symbol',\n            'quote_coin_id': 1,\n            'quote_coin_symbol': 'quote_coin_symbol',\n            'quote_coin_name': 'quote_coin_name',\n            'quote_coin_fa_name': 'quote_coin_fa_name',\n            'each_price': 'each_price',\n            'other_side_each_price': 'other_side_each_price',\n            'quote_coin_volume': 'quote_coin_volume',\n            'base_coin_volume': 'base_coin_volume',\n            '_24h_change': '_24h_change',\n            '_24h_change_volume': '_24h_change_volume',\n            'total_min': 'total_min',\n            'market_order_quote_coin_total_min': 'market_order_quote_coin_total_min',\n            'market_order_base_coin_total_min': 'market_order_base_coin_total_min',\n            'web_icon': 'web_icon',\n            'app_icon': 'app_icon',\n            'quote_web_icon': 'quote_web_icon',\n            'quote_app_icon': 'quote_app_icon',\n            'is_active': 1,\n            'first_order': 'first_order',\n            'last_order': 'last_order',\n            'min_price': 'min_price',\n            'max_price': 'max_price',\n            'base_coin_decimal': 1,\n            'quote_coin_decimal': 1,\n            'daily_chart_icon': 'daily_chart_icon',\n            'is_favorite': True\n        }\n    \"\"\"\n\n    id: int\n    base_coin_id: int\n    base_coin_name: str\n    base_coin_fa_name: str\n    base_coin_symbol: str\n    quote_coin_id: int\n    quote_coin_symbol: str\n    quote_coin_name: str\n    quote_coin_fa_name: str\n    each_price: str\n    other_side_each_price: str\n    quote_coin_volume: str\n    base_coin_volume: str\n    _24h_change: str\n    _24h_change_volume: str\n    total_min: str\n    market_order_quote_coin_total_min: str\n    market_order_base_coin_total_min: str\n    web_icon: str\n    app_icon: str\n    quote_web_icon: str\n    quote_app_icon: str\n    is_active: int\n    first_order: str\n    last_order: str\n    min_price: str\n    max_price: str\n    base_coin_decimal: int\n    quote_coin_decimal: int\n    daily_chart_icon: str\n    is_favorite: bool\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.MarketListResponse","title":"<code>MarketListResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market List Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[MarketInfo]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MarketListResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[\n...         MarketInfo(\n...             id=1,\n...             base_coin_id=1,\n...             base_coin_name=\"base_coin_name\",\n...             base_coin_fa_name=\"base_coin_fa_name\",\n...             base_coin_symbol=\"base_coin_symbol\",\n...             quote_coin_id=1,\n...             quote_coin_symbol=\"quote_coin_symbol\",\n...             quote_coin_name=\"quote_coin_name\",\n...             quote_coin_fa_name=\"quote_coin_fa_name\",\n...             each_price=\"each_price\",\n...             other_side_each_price=\"other_side_each_price\",\n...             quote_coin_volume=\"quote_coin_volume\",\n...             base_coin_volume=\"base_coin_volume\",\n...             _24h_change=\"_24h_change\",\n...             _24h_change_volume=\"_24h_change_volume\",\n...             total_min=\"total_min\",\n...             market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n...             market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...             quote_web_icon=\"quote_web_icon\",\n...             quote_app_icon=\"quote_app_icon\",\n...             is_active=1,\n...             first_order=\"first_order\",\n...             last_order=\"last_order\",\n...             min_price=\"min_price\",\n...             max_price=\"max_price\",\n...             base_coin_decimal=1,\n...             quote_coin_decimal=1,\n...             daily_chart_icon=\"daily_chart_icon\",\n...             is_favorite=True\n...     ]\n... )\n{\n    'message': 'message',\n    'has_paginate': 1,\n    'total_data': 1,\n    'current_page': 1,\n    'from': 1,\n    'to': 1,\n    'per_page': 1,\n    'results': [\n        {\n            'id': 1,\n            'base_coin_id': 1,\n            'base_coin_name\n            ...\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/markets_info.py</code> <pre><code>class MarketListResponse(TypedDict):\n    \"\"\"\n    Market List Response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to (int): To.\n        per_page (int): Per page.\n        results (list[MarketInfo]): Results.\n\n    Examples:\n        &gt;&gt;&gt; MarketListResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[\n        ...         MarketInfo(\n        ...             id=1,\n        ...             base_coin_id=1,\n        ...             base_coin_name=\"base_coin_name\",\n        ...             base_coin_fa_name=\"base_coin_fa_name\",\n        ...             base_coin_symbol=\"base_coin_symbol\",\n        ...             quote_coin_id=1,\n        ...             quote_coin_symbol=\"quote_coin_symbol\",\n        ...             quote_coin_name=\"quote_coin_name\",\n        ...             quote_coin_fa_name=\"quote_coin_fa_name\",\n        ...             each_price=\"each_price\",\n        ...             other_side_each_price=\"other_side_each_price\",\n        ...             quote_coin_volume=\"quote_coin_volume\",\n        ...             base_coin_volume=\"base_coin_volume\",\n        ...             _24h_change=\"_24h_change\",\n        ...             _24h_change_volume=\"_24h_change_volume\",\n        ...             total_min=\"total_min\",\n        ...             market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n        ...             market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...             quote_web_icon=\"quote_web_icon\",\n        ...             quote_app_icon=\"quote_app_icon\",\n        ...             is_active=1,\n        ...             first_order=\"first_order\",\n        ...             last_order=\"last_order\",\n        ...             min_price=\"min_price\",\n        ...             max_price=\"max_price\",\n        ...             base_coin_decimal=1,\n        ...             quote_coin_decimal=1,\n        ...             daily_chart_icon=\"daily_chart_icon\",\n        ...             is_favorite=True\n        ...     ]\n        ... )\n        {\n            'message': 'message',\n            'has_paginate': 1,\n            'total_data': 1,\n            'current_page': 1,\n            'from': 1,\n            'to': 1,\n            'per_page': 1,\n            'results': [\n                {\n                    'id': 1,\n                    'base_coin_id': 1,\n                    'base_coin_name\n                    ...\n                }\n            ]\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[MarketInfo]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.OrderBookItem","title":"<code>OrderBookItem</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Book Item.</p> <p>Attributes:</p> Name Type Description <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>available_amount</code> <code>str</code> <p>Available amount.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderBookItem(\n...     market_id=1, each_price=\"each_price\", available_amount=\"available_amount\"\n... )\n{\n    'market_id': 1,\n    'each_price': 'each_price',\n    'available_amount': 'available_amount'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/order_book.py</code> <pre><code>class OrderBookItem(TypedDict):\n    \"\"\"\n    Order Book Item.\n\n    Attributes:\n        market_id (int): Market ID.\n        each_price (str): Each price.\n        available_amount (str): Available amount.\n\n    Examples:\n        &gt;&gt;&gt; OrderBookItem(\n        ...     market_id=1, each_price=\"each_price\", available_amount=\"available_amount\"\n        ... )\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    \"\"\"\n\n    market_id: int\n    each_price: str\n    available_amount: str\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.OrderBookResponse","title":"<code>OrderBookResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Book Response.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>market_symbol</code> <code>str</code> <p>Market symbol.</p> <code>buy_orders</code> <code>list[OrderBookItem]</code> <p>Buy orders.</p> <code>sell_orders</code> <code>list[OrderBookItem]</code> <p>Sell orders.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderBookResponse(\n...     id=1,\n...     market_symbol=\"market_symbol\",\n...     buy_orders=[\n...         OrderBookItem(\n...             market_id=1,\n...             each_price=\"each_price\",\n...             available_amount=\"available_amount\",\n...         )\n...     ],\n...     sell_orders=[\n...         OrderBookItem(\n...             market_id=1,\n...             each_price=\"each_price\",\n...             available_amount=\"available_amount\",\n...         )\n...     ],\n... )\n{\n    'id': 1,\n    'market_symbol': 'market_symbol',\n    'buy_orders': [\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    ],\n    'sell_orders': [\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/order_book.py</code> <pre><code>class OrderBookResponse(TypedDict):\n    \"\"\"\n    Order Book Response.\n\n    Attributes:\n        id (int): ID.\n        market_symbol (str): Market symbol.\n        buy_orders (list[OrderBookItem]): Buy orders.\n        sell_orders (list[OrderBookItem]): Sell orders.\n\n    Examples:\n        &gt;&gt;&gt; OrderBookResponse(\n        ...     id=1,\n        ...     market_symbol=\"market_symbol\",\n        ...     buy_orders=[\n        ...         OrderBookItem(\n        ...             market_id=1,\n        ...             each_price=\"each_price\",\n        ...             available_amount=\"available_amount\",\n        ...         )\n        ...     ],\n        ...     sell_orders=[\n        ...         OrderBookItem(\n        ...             market_id=1,\n        ...             each_price=\"each_price\",\n        ...             available_amount=\"available_amount\",\n        ...         )\n        ...     ],\n        ... )\n        {\n            'id': 1,\n            'market_symbol': 'market_symbol',\n            'buy_orders': [\n                {\n                    'market_id': 1,\n                    'each_price': 'each_price',\n                    'available_amount': 'available_amount'\n                }\n            ],\n            'sell_orders': [\n                {\n                    'market_id': 1,\n                    'each_price': 'each_price',\n                    'available_amount': 'available_amount'\n                }\n            ]\n        }\n    \"\"\"\n\n    id: int\n    market_symbol: str\n    buy_orders: list[OrderBookItem]\n    sell_orders: list[OrderBookItem]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.OrderInfo","title":"<code>OrderInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>type</code> <code>int</code> <p>Type.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>stop_price</code> <code>str</code> <p>Stop price.</p> <code>trigger_price</code> <code>str</code> <p>Trigger price.</p> <code>amount</code> <code>str</code> <p>Amount.</p> <code>available_amount</code> <code>str</code> <p>Available amount.</p> <code>done_value</code> <code>str</code> <p>Done value.</p> <code>done_percent</code> <code>str</code> <p>Done percent.</p> <code>mean_value</code> <code>int</code> <p>Mean value.</p> <code>commission</code> <code>str</code> <p>Commission.</p> <code>total</code> <code>str</code> <p>Total.</p> <code>created_at</code> <code>str</code> <p>Created at.</p> <code>created_at_jalali</code> <code>str</code> <p>Created at jalali.</p> <code>base_coin</code> <code>CoinInfo</code> <p>Base coin.</p> <code>quote_coin</code> <code>CoinInfo</code> <p>Quote coin.</p> <code>status</code> <code>int</code> <p>Status.</p> <code>status_text</code> <code>str</code> <p>Status text.</p> <code>category_type</code> <code>str</code> <p>Category type.</p> <code>category_type_text</code> <code>str</code> <p>Category type text.</p> <code>conditions</code> <code>str</code> <p>Conditions.</p> <code>triggered_category_type</code> <code>str</code> <p>Triggered category type.</p> <code>is_trade</code> <code>int</code> <p>Is trade.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderInfo(\n...     id=1,\n...     type=1,\n...     each_price=\"each_price\",\n...     stop_price=\"stop_price\",\n...     trigger_price=\"trigger_price\",\n...     amount=\"amount\",\n...     available_amount=\"available_amount\",\n...     done_value=\"done_value\",\n...     done_percent=\"done_percent\",\n...     mean_value=1,\n...     commission=\"commission\",\n...     total=\"total\",\n...     created_at=\"created_at\",\n...     created_at_jalali=\"created_at_jalali\",\n...     base_coin=CoinInfo(\n...         id=1,\n...         symbol=\"symbol\",\n...         name=\"name\",\n...         fa_name=\"fa_name\",\n...         web_icon=\"web_icon\",\n...         app_icon=\"app_icon\",\n...     ),\n...     quote_coin=CoinInfo(\n...         id=1,\n...         symbol=\"symbol\",\n...         name=\"name\",\n...         fa_name=\"fa_name\",\n...         web_icon=\"web_icon\",\n...         app_icon=\"app_icon\",\n...     ),\n...     status=1,\n...     status_text=\"status_text\",\n...     category_type=\"category_type\",\n...     category_type_text=\"category_type_text\",\n...     conditions=\"conditions\",\n...     triggered_category_type=\"triggered_category_type\",\n...     is_trade=1,\n... )\n{\n    \"id\": 1,\n    \"type\": 1,\n    \"each_price\": \"each_price\",\n    \"stop_price\": \"stop_price\",\n    \"trigger_price\": \"trigger_price\",\n    \"amount\": \"amount\",\n    \"available_amount\": \"available_amount\",\n    \"done_value\": \"done_value\",\n    \"done_percent\": \"done_percent\",\n    \"mean_value\": 1,\n    \"commission\": \"commission\",\n    \"total\": \"total\",\n    \"created_at\": \"created_at\",\n    \"created_at_jalali\": \"created_at_jalali\",\n    \"base_coin\": {\n        \"id\": 1,\n        \"symbol\": \"symbol\",\n        \"name\": \"name\",\n        \"fa_name\": \"fa_name\",\n        \"web_icon\": \"web_icon\",\n        \"app_icon\": \"app_icon\"\n    },\n    \"quote_coin\": {\n        \"id\": 1,\n        \"symbol\": \"symbol\",\n        \"name\": \"name\",\n        \"fa_name\": \"fa_name\",\n        \"web_icon\": \"web_icon\",\n        \"app_icon\": \"app_icon\"\n    },\n    \"status\": 1,\n    \"status_text\": \"status_text\",\n    \"category_type\": \"category_type\",\n    \"category_type_text\": \"category_type_text\",\n    \"conditions\": \"conditions\",\n    \"triggered_category_type\": \"triggered_category_type\",\n    \"is_trade\": 1\n}\n</code></pre> Source code in <code>src/bit24/types/responses/create_order.py</code> <pre><code>class OrderInfo(TypedDict):\n    \"\"\"\n    Order Information.\n\n    Attributes:\n        id (int): ID.\n        type (int): Type.\n        each_price (str): Each price.\n        stop_price (str): Stop price.\n        trigger_price (str): Trigger price.\n        amount (str): Amount.\n        available_amount (str): Available amount.\n        done_value (str): Done value.\n        done_percent (str): Done percent.\n        mean_value (int): Mean value.\n        commission (str): Commission.\n        total (str): Total.\n        created_at (str): Created at.\n        created_at_jalali (str): Created at jalali.\n        base_coin (CoinInfo): Base coin.\n        quote_coin (CoinInfo): Quote coin.\n        status (int): Status.\n        status_text (str): Status text.\n        category_type (str): Category type.\n        category_type_text (str): Category type text.\n        conditions (str): Conditions.\n        triggered_category_type (str): Triggered category type.\n        is_trade (int): Is trade.\n\n    Examples:\n        &gt;&gt;&gt; OrderInfo(\n        ...     id=1,\n        ...     type=1,\n        ...     each_price=\"each_price\",\n        ...     stop_price=\"stop_price\",\n        ...     trigger_price=\"trigger_price\",\n        ...     amount=\"amount\",\n        ...     available_amount=\"available_amount\",\n        ...     done_value=\"done_value\",\n        ...     done_percent=\"done_percent\",\n        ...     mean_value=1,\n        ...     commission=\"commission\",\n        ...     total=\"total\",\n        ...     created_at=\"created_at\",\n        ...     created_at_jalali=\"created_at_jalali\",\n        ...     base_coin=CoinInfo(\n        ...         id=1,\n        ...         symbol=\"symbol\",\n        ...         name=\"name\",\n        ...         fa_name=\"fa_name\",\n        ...         web_icon=\"web_icon\",\n        ...         app_icon=\"app_icon\",\n        ...     ),\n        ...     quote_coin=CoinInfo(\n        ...         id=1,\n        ...         symbol=\"symbol\",\n        ...         name=\"name\",\n        ...         fa_name=\"fa_name\",\n        ...         web_icon=\"web_icon\",\n        ...         app_icon=\"app_icon\",\n        ...     ),\n        ...     status=1,\n        ...     status_text=\"status_text\",\n        ...     category_type=\"category_type\",\n        ...     category_type_text=\"category_type_text\",\n        ...     conditions=\"conditions\",\n        ...     triggered_category_type=\"triggered_category_type\",\n        ...     is_trade=1,\n        ... )\n        {\n            \"id\": 1,\n            \"type\": 1,\n            \"each_price\": \"each_price\",\n            \"stop_price\": \"stop_price\",\n            \"trigger_price\": \"trigger_price\",\n            \"amount\": \"amount\",\n            \"available_amount\": \"available_amount\",\n            \"done_value\": \"done_value\",\n            \"done_percent\": \"done_percent\",\n            \"mean_value\": 1,\n            \"commission\": \"commission\",\n            \"total\": \"total\",\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\",\n            \"base_coin\": {\n                \"id\": 1,\n                \"symbol\": \"symbol\",\n                \"name\": \"name\",\n                \"fa_name\": \"fa_name\",\n                \"web_icon\": \"web_icon\",\n                \"app_icon\": \"app_icon\"\n            },\n            \"quote_coin\": {\n                \"id\": 1,\n                \"symbol\": \"symbol\",\n                \"name\": \"name\",\n                \"fa_name\": \"fa_name\",\n                \"web_icon\": \"web_icon\",\n                \"app_icon\": \"app_icon\"\n            },\n            \"status\": 1,\n            \"status_text\": \"status_text\",\n            \"category_type\": \"category_type\",\n            \"category_type_text\": \"category_type_text\",\n            \"conditions\": \"conditions\",\n            \"triggered_category_type\": \"triggered_category_type\",\n            \"is_trade\": 1\n        }\n    \"\"\"\n\n    id: int\n    type: int\n    each_price: str\n    stop_price: str\n    trigger_price: str\n    amount: str\n    available_amount: str\n    done_value: str\n    done_percent: str\n    mean_value: int\n    commission: str\n    total: str\n    created_at: str\n    created_at_jalali: str\n    base_coin: CoinInfo\n    quote_coin: CoinInfo\n    status: int\n    status_text: str\n    category_type: str\n    category_type_text: str\n    conditions: str\n    triggered_category_type: str\n    is_trade: int\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.OrdersHistoryResponse","title":"<code>OrdersHistoryResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Orders History Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to(</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[OrderInfo]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrdersHistoryResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[...],  # OrderInfo\n... )\n{\n    'message': 'message',\n    'has_paginate': 1,\n    'total_data': 1,\n    'current_page': 1,\n    'from_': 1,\n    'to': 1,\n    'per_page': 1,\n    'results': [...] # OrderInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/orders_history.py</code> <pre><code>class OrdersHistoryResponse(TypedDict):\n    \"\"\"\n    Orders History Response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to( int): To.\n        per_page (int): Per page.\n        results (list[OrderInfo]): Results.\n\n    Examples:\n        &gt;&gt;&gt; OrdersHistoryResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[...],  # OrderInfo\n        ... )\n        {\n            'message': 'message',\n            'has_paginate': 1,\n            'total_data': 1,\n            'current_page': 1,\n            'from_': 1,\n            'to': 1,\n            'per_page': 1,\n            'results': [...] # OrderInfo\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[OrderInfo]\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.SubmitWithdrawResponse","title":"<code>SubmitWithdrawResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Submit Withdraw Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SubmitWithdrawResponse(message=\"message\")\n{\n    'message': 'message'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/submit_withdraw.py</code> <pre><code>class SubmitWithdrawResponse(TypedDict):\n    \"\"\"\n    Submit Withdraw Response.\n\n    Attributes:\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; SubmitWithdrawResponse(message=\"message\")\n        {\n            'message': 'message'\n        }\n    \"\"\"\n\n    message: str\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.Transaction","title":"<code>Transaction</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Transaction.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>name</code> <code>str</code> <p>Name.</p> <code>fa_name</code> <code>str</code> <p>Fa name.</p> <code>symbol</code> <code>str</code> <p>Symbol.</p> <code>logo</code> <code>str</code> <p>Logo.</p> <code>value</code> <code>str</code> <p>Value.</p> <code>done_value</code> <code>str</code> <p>Done value.</p> <code>type</code> <code>int</code> <p>Type.</p> <code>transaction_code</code> <code>str</code> <p>Transaction code.</p> <code>type_text</code> <code>str</code> <p>Type text.</p> <code>reason_type</code> <code>str</code> <p>Reason type.</p> <code>reason_text</code> <code>str</code> <p>Reason text.</p> <code>reason_type_text</code> <code>str</code> <p>Reason type text.</p> <code>reason_id</code> <code>int</code> <p>Reason ID.</p> <code>balance_status</code> <code>int</code> <p>Balance status.</p> <code>balance_status_text</code> <code>str</code> <p>Balance status text.</p> <code>commission</code> <code>int</code> <p>Commission.</p> <code>created_at</code> <code>str</code> <p>Created at.</p> <code>created_at_jalali</code> <code>str</code> <p>Created at jalali.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Transaction(\n...     id=1,\n...     name=\"name\",\n...     fa_name=\"fa_name\",\n...     symbol=\"symbol\",\n...     logo=\"logo\",\n...     value=\"value\",\n...     done_value=\"done_value\",\n...     type=1,\n...     transaction_code=\"transaction_code\",\n...     type_text=\"type_text\",\n...     reason_type=\"reason_type\",\n...     reason_text=\"reason_text\",\n...     reason_type_text=\"reason_type_text\",\n...     reason_id=1,\n...     balance_status=1,\n...     balance_status_text=\"balance_status_text\",\n...     commission=1,\n...     created_at=\"created_at\",\n...     created_at_jalali=\"created_at_jalali\",\n... )\n{\n    \"id\": 1,\n    \"name\": \"name\",\n    \"fa_name\": \"fa_name\",\n    \"symbol\": \"symbol\",\n    \"logo\": \"logo\",\n    \"value\": \"value\",\n    \"done_value\": \"done_value\",\n    \"type\": 1,\n    \"transaction_code\": \"transaction_code\",\n    \"type_text\": \"type_text\",\n    \"reason_type\": \"reason_type\",\n    \"reason_text\": \"reason_text\",\n    \"reason_type_text\": \"reason_type_text\",\n    \"reason_id\": 1,\n    \"balance_status\": 1,\n    \"balance_status_text\": \"balance_status_text\",\n    \"commission\": 1,\n    \"created_at\": \"created_at\",\n    \"created_at_jalali\": \"created_at_jalali\"\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_history.py</code> <pre><code>class Transaction(TypedDict):\n    \"\"\"\n    Transaction.\n\n    Attributes:\n        id (int): ID.\n        name (str): Name.\n        fa_name (str): Fa name.\n        symbol (str): Symbol.\n        logo (str): Logo.\n        value (str): Value.\n        done_value (str): Done value.\n        type (int): Type.\n        transaction_code (str): Transaction code.\n        type_text (str): Type text.\n        reason_type (str): Reason type.\n        reason_text (str): Reason text.\n        reason_type_text (str): Reason type text.\n        reason_id (int): Reason ID.\n        balance_status (int): Balance status.\n        balance_status_text (str): Balance status text.\n        commission (int): Commission.\n        created_at (str): Created at.\n        created_at_jalali (str): Created at jalali.\n\n    Examples:\n        &gt;&gt;&gt; Transaction(\n        ...     id=1,\n        ...     name=\"name\",\n        ...     fa_name=\"fa_name\",\n        ...     symbol=\"symbol\",\n        ...     logo=\"logo\",\n        ...     value=\"value\",\n        ...     done_value=\"done_value\",\n        ...     type=1,\n        ...     transaction_code=\"transaction_code\",\n        ...     type_text=\"type_text\",\n        ...     reason_type=\"reason_type\",\n        ...     reason_text=\"reason_text\",\n        ...     reason_type_text=\"reason_type_text\",\n        ...     reason_id=1,\n        ...     balance_status=1,\n        ...     balance_status_text=\"balance_status_text\",\n        ...     commission=1,\n        ...     created_at=\"created_at\",\n        ...     created_at_jalali=\"created_at_jalali\",\n        ... )\n        {\n            \"id\": 1,\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"symbol\": \"symbol\",\n            \"logo\": \"logo\",\n            \"value\": \"value\",\n            \"done_value\": \"done_value\",\n            \"type\": 1,\n            \"transaction_code\": \"transaction_code\",\n            \"type_text\": \"type_text\",\n            \"reason_type\": \"reason_type\",\n            \"reason_text\": \"reason_text\",\n            \"reason_type_text\": \"reason_type_text\",\n            \"reason_id\": 1,\n            \"balance_status\": 1,\n            \"balance_status_text\": \"balance_status_text\",\n            \"commission\": 1,\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\"\n        }\n    \"\"\"\n\n    id: int\n    name: str\n    fa_name: str\n    symbol: str\n    logo: str\n    value: str\n    done_value: str\n    type: int\n    transaction_code: str\n    type_text: str\n    reason_type: str\n    reason_text: str\n    reason_type_text: str\n    reason_id: int\n    balance_status: int\n    balance_status_text: str\n    commission: int\n    created_at: str\n    created_at_jalali: str\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.WithdrawNetworkInfo","title":"<code>WithdrawNetworkInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Network Information.</p> <p>Attributes:</p> Name Type Description <code>network_id</code> <code>int</code> <p>Network ID.</p> <code>network_name</code> <code>str</code> <p>Network name.</p> <code>network_layer</code> <code>str</code> <p>Network layer.</p> <code>min_withdraw</code> <code>str</code> <p>Min withdraw.</p> <code>max_withdraw</code> <code>str</code> <p>Max withdraw.</p> <code>fee</code> <code>str</code> <p>Fee.</p> <code>address_regex</code> <code>str</code> <p>Address regex.</p> <code>memo_regex</code> <code>str</code> <p>Memo regex.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithdrawNetworkInfo(\n...     network_id=1,\n...     network_name=\"network_name\",\n...     network_layer=\"network_layer\",\n...     min_withdraw=\"min_withdraw\",\n...     max_withdraw=\"max_withdraw\",\n...     fee=\"fee\",\n...     address_regex=\"address_regex\",\n...     memo_regex=\"memo_regex\",\n... )\n{\n    'network_id': 1,\n    'network_name': 'network_name',\n    'network_layer': 'network_layer',\n    'min_withdraw': 'min_withdraw',\n    'max_withdraw': 'max_withdraw',\n    'fee': 'fee',\n    'address_regex': 'address_regex',\n    'memo_regex': 'memo_regex'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/withdraw_networks.py</code> <pre><code>class WithdrawNetworkInfo(TypedDict):\n    \"\"\"\n    Network Information.\n\n    Attributes:\n        network_id (int): Network ID.\n        network_name (str): Network name.\n        network_layer (str): Network layer.\n        min_withdraw (str): Min withdraw.\n        max_withdraw (str): Max withdraw.\n        fee (str): Fee.\n        address_regex (str): Address regex.\n        memo_regex (str): Memo regex.\n\n    Examples:\n        &gt;&gt;&gt; WithdrawNetworkInfo(\n        ...     network_id=1,\n        ...     network_name=\"network_name\",\n        ...     network_layer=\"network_layer\",\n        ...     min_withdraw=\"min_withdraw\",\n        ...     max_withdraw=\"max_withdraw\",\n        ...     fee=\"fee\",\n        ...     address_regex=\"address_regex\",\n        ...     memo_regex=\"memo_regex\",\n        ... )\n        {\n            'network_id': 1,\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'min_withdraw': 'min_withdraw',\n            'max_withdraw': 'max_withdraw',\n            'fee': 'fee',\n            'address_regex': 'address_regex',\n            'memo_regex': 'memo_regex'\n        }\n    \"\"\"\n\n    network_id: int\n    network_name: str\n    network_layer: str\n    min_withdraw: str\n    max_withdraw: str | None\n    fee: str\n    address_regex: str\n    memo_regex: str | None\n</code></pre>"},{"location":"reference/types/responses/#src.bit24.types.responses.WithdrawalNetworksResponse","title":"<code>WithdrawalNetworksResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Withdrawal Networks Response.</p> <p>Attributes:</p> Name Type Description <code>balance</code> <code>str</code> <p>Balance.</p> <code>networks</code> <code>list[NetworkInfo]</code> <p>Networks.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithdrawalNetworksResponse(\n...     balance=\"balance\",\n...     networks=[\n...         WithdrawNetworkInfo(\n...             network_id=1,\n...             network_name=\"network_name\",\n...             network_layer=\"network_layer\",\n...             min_withdraw=\"min_withdraw\",\n...             max_withdraw=\"max_withdraw\",\n...             fee=\"fee\",\n...             address_regex=\"address_regex\",\n...             memo_regex=\"memo_regex\",\n...         )\n...     ],\n... )\n{\n    'balance': 'balance',\n    'networks': [\n        {\n            'network_id': 1,\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'min_withdraw': 'min_withdraw',\n            'max_withdraw': 'max_withdraw',\n            'fee': 'fee',\n            'address_regex': 'address_regex',\n            'memo_regex': 'memo_regex'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/withdraw_networks.py</code> <pre><code>class WithdrawalNetworksResponse(TypedDict):\n    \"\"\"\n    Withdrawal Networks Response.\n\n    Attributes:\n        balance (str): Balance.\n        networks (list[NetworkInfo]): Networks.\n\n    Examples:\n        &gt;&gt;&gt; WithdrawalNetworksResponse(\n        ...     balance=\"balance\",\n        ...     networks=[\n        ...         WithdrawNetworkInfo(\n        ...             network_id=1,\n        ...             network_name=\"network_name\",\n        ...             network_layer=\"network_layer\",\n        ...             min_withdraw=\"min_withdraw\",\n        ...             max_withdraw=\"max_withdraw\",\n        ...             fee=\"fee\",\n        ...             address_regex=\"address_regex\",\n        ...             memo_regex=\"memo_regex\",\n        ...         )\n        ...     ],\n        ... )\n        {\n            'balance': 'balance',\n            'networks': [\n                {\n                    'network_id': 1,\n                    'network_name': 'network_name',\n                    'network_layer': 'network_layer',\n                    'min_withdraw': 'min_withdraw',\n                    'max_withdraw': 'max_withdraw',\n                    'fee': 'fee',\n                    'address_regex': 'address_regex',\n                    'memo_regex': 'memo_regex'\n                }\n            ]\n        }\n    \"\"\"\n\n    balance: str\n    networks: list[WithdrawNetworkInfo]\n</code></pre>"},{"location":"reference/types/responses/assets_history/","title":"assets_history","text":""},{"location":"reference/types/responses/assets_history/#src.bit24.types.responses.assets_history--assets-history","title":"Assets history.","text":"<p>This module contains the data classes for the assets history response.</p>"},{"location":"reference/types/responses/assets_history/#src.bit24.types.responses.assets_history--classes","title":"Classes:","text":"<ul> <li><code>Transaction</code>: A <code>TypedDict</code> that represents the structure of the transaction</li> <li><code>AssetsHistoryResponse</code>: A <code>TypedDict</code> that represents the structure of the assets history response</li> </ul>"},{"location":"reference/types/responses/assets_history/#src.bit24.types.responses.assets_history.AssetsHistoryResponse","title":"<code>AssetsHistoryResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Assets history response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[Transaction]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetsHistoryResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[\n...         {\n...             \"id\": 1,\n...             \"name\": \"name\",\n...             \"fa_name\": \"fa_name\",\n...             \"symbol\": \"symbol\",\n...             \"logo\": \"logo\",\n...             \"value\": \"value\",\n...             \"done_value\": \"done_value\",\n...             \"type\": 1,\n...             \"transaction_code\": \"transaction_code\",\n...             \"type_text\": \"type_text\",\n...             \"reason_type\": \"reason_type\",\n...             \"reason_text\": \"reason_text\",\n...             \"reason_type_text\": \"reason_type_text\",\n...             \"reason_id\": 1,\n...             \"balance_status\": 1,\n...             \"balance_status_text\": \"balance_status_text\",\n...             \"commission\": 1,\n...             \"created_at\": \"created_at\",\n...             \"created_at_jalali\": \"created_at_jalali\",\n...         }\n...     ],\n... )\n{\n    \"message\": \"message\",\n    \"has_paginate\": 1,\n    \"total_data\": 1,\n    \"current_page\": 1,\n    \"from_\": 1,\n    \"to\": 1,\n    \"per_page\": 1,\n    \"results\": [\n        {\n            \"id\": 1,\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"symbol\": \"symbol\",\n            \"logo\": \"logo\",\n            \"value\": \"value\",\n            \"done_value\": \"done_value\",\n            \"type\": 1,\n            \"transaction_code\": \"transaction_code\",\n            \"type_text\": \"type_text\",\n            \"reason_type\": \"reason_type\",\n            \"reason_text\": \"reason_text\",\n            \"reason_type_text\": \"reason_type_text\",\n            \"reason_id\": 1,\n            \"balance_status\": 1,\n            \"balance_status_text\": \"balance_status_text\",\n            \"commission\": 1,\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\"\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_history.py</code> <pre><code>class AssetsHistoryResponse(TypedDict):\n    \"\"\"\n    Assets history response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to (int): To.\n        per_page (int): Per page.\n        results (list[Transaction]): Results.\n\n    Examples:\n        &gt;&gt;&gt; AssetsHistoryResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[\n        ...         {\n        ...             \"id\": 1,\n        ...             \"name\": \"name\",\n        ...             \"fa_name\": \"fa_name\",\n        ...             \"symbol\": \"symbol\",\n        ...             \"logo\": \"logo\",\n        ...             \"value\": \"value\",\n        ...             \"done_value\": \"done_value\",\n        ...             \"type\": 1,\n        ...             \"transaction_code\": \"transaction_code\",\n        ...             \"type_text\": \"type_text\",\n        ...             \"reason_type\": \"reason_type\",\n        ...             \"reason_text\": \"reason_text\",\n        ...             \"reason_type_text\": \"reason_type_text\",\n        ...             \"reason_id\": 1,\n        ...             \"balance_status\": 1,\n        ...             \"balance_status_text\": \"balance_status_text\",\n        ...             \"commission\": 1,\n        ...             \"created_at\": \"created_at\",\n        ...             \"created_at_jalali\": \"created_at_jalali\",\n        ...         }\n        ...     ],\n        ... )\n        {\n            \"message\": \"message\",\n            \"has_paginate\": 1,\n            \"total_data\": 1,\n            \"current_page\": 1,\n            \"from_\": 1,\n            \"to\": 1,\n            \"per_page\": 1,\n            \"results\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"symbol\": \"symbol\",\n                    \"logo\": \"logo\",\n                    \"value\": \"value\",\n                    \"done_value\": \"done_value\",\n                    \"type\": 1,\n                    \"transaction_code\": \"transaction_code\",\n                    \"type_text\": \"type_text\",\n                    \"reason_type\": \"reason_type\",\n                    \"reason_text\": \"reason_text\",\n                    \"reason_type_text\": \"reason_type_text\",\n                    \"reason_id\": 1,\n                    \"balance_status\": 1,\n                    \"balance_status_text\": \"balance_status_text\",\n                    \"commission\": 1,\n                    \"created_at\": \"created_at\",\n                    \"created_at_jalali\": \"created_at_jalali\"\n                }\n            ]\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[Transaction]\n</code></pre>"},{"location":"reference/types/responses/assets_history/#src.bit24.types.responses.assets_history.Transaction","title":"<code>Transaction</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Transaction.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>name</code> <code>str</code> <p>Name.</p> <code>fa_name</code> <code>str</code> <p>Fa name.</p> <code>symbol</code> <code>str</code> <p>Symbol.</p> <code>logo</code> <code>str</code> <p>Logo.</p> <code>value</code> <code>str</code> <p>Value.</p> <code>done_value</code> <code>str</code> <p>Done value.</p> <code>type</code> <code>int</code> <p>Type.</p> <code>transaction_code</code> <code>str</code> <p>Transaction code.</p> <code>type_text</code> <code>str</code> <p>Type text.</p> <code>reason_type</code> <code>str</code> <p>Reason type.</p> <code>reason_text</code> <code>str</code> <p>Reason text.</p> <code>reason_type_text</code> <code>str</code> <p>Reason type text.</p> <code>reason_id</code> <code>int</code> <p>Reason ID.</p> <code>balance_status</code> <code>int</code> <p>Balance status.</p> <code>balance_status_text</code> <code>str</code> <p>Balance status text.</p> <code>commission</code> <code>int</code> <p>Commission.</p> <code>created_at</code> <code>str</code> <p>Created at.</p> <code>created_at_jalali</code> <code>str</code> <p>Created at jalali.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Transaction(\n...     id=1,\n...     name=\"name\",\n...     fa_name=\"fa_name\",\n...     symbol=\"symbol\",\n...     logo=\"logo\",\n...     value=\"value\",\n...     done_value=\"done_value\",\n...     type=1,\n...     transaction_code=\"transaction_code\",\n...     type_text=\"type_text\",\n...     reason_type=\"reason_type\",\n...     reason_text=\"reason_text\",\n...     reason_type_text=\"reason_type_text\",\n...     reason_id=1,\n...     balance_status=1,\n...     balance_status_text=\"balance_status_text\",\n...     commission=1,\n...     created_at=\"created_at\",\n...     created_at_jalali=\"created_at_jalali\",\n... )\n{\n    \"id\": 1,\n    \"name\": \"name\",\n    \"fa_name\": \"fa_name\",\n    \"symbol\": \"symbol\",\n    \"logo\": \"logo\",\n    \"value\": \"value\",\n    \"done_value\": \"done_value\",\n    \"type\": 1,\n    \"transaction_code\": \"transaction_code\",\n    \"type_text\": \"type_text\",\n    \"reason_type\": \"reason_type\",\n    \"reason_text\": \"reason_text\",\n    \"reason_type_text\": \"reason_type_text\",\n    \"reason_id\": 1,\n    \"balance_status\": 1,\n    \"balance_status_text\": \"balance_status_text\",\n    \"commission\": 1,\n    \"created_at\": \"created_at\",\n    \"created_at_jalali\": \"created_at_jalali\"\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_history.py</code> <pre><code>class Transaction(TypedDict):\n    \"\"\"\n    Transaction.\n\n    Attributes:\n        id (int): ID.\n        name (str): Name.\n        fa_name (str): Fa name.\n        symbol (str): Symbol.\n        logo (str): Logo.\n        value (str): Value.\n        done_value (str): Done value.\n        type (int): Type.\n        transaction_code (str): Transaction code.\n        type_text (str): Type text.\n        reason_type (str): Reason type.\n        reason_text (str): Reason text.\n        reason_type_text (str): Reason type text.\n        reason_id (int): Reason ID.\n        balance_status (int): Balance status.\n        balance_status_text (str): Balance status text.\n        commission (int): Commission.\n        created_at (str): Created at.\n        created_at_jalali (str): Created at jalali.\n\n    Examples:\n        &gt;&gt;&gt; Transaction(\n        ...     id=1,\n        ...     name=\"name\",\n        ...     fa_name=\"fa_name\",\n        ...     symbol=\"symbol\",\n        ...     logo=\"logo\",\n        ...     value=\"value\",\n        ...     done_value=\"done_value\",\n        ...     type=1,\n        ...     transaction_code=\"transaction_code\",\n        ...     type_text=\"type_text\",\n        ...     reason_type=\"reason_type\",\n        ...     reason_text=\"reason_text\",\n        ...     reason_type_text=\"reason_type_text\",\n        ...     reason_id=1,\n        ...     balance_status=1,\n        ...     balance_status_text=\"balance_status_text\",\n        ...     commission=1,\n        ...     created_at=\"created_at\",\n        ...     created_at_jalali=\"created_at_jalali\",\n        ... )\n        {\n            \"id\": 1,\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"symbol\": \"symbol\",\n            \"logo\": \"logo\",\n            \"value\": \"value\",\n            \"done_value\": \"done_value\",\n            \"type\": 1,\n            \"transaction_code\": \"transaction_code\",\n            \"type_text\": \"type_text\",\n            \"reason_type\": \"reason_type\",\n            \"reason_text\": \"reason_text\",\n            \"reason_type_text\": \"reason_type_text\",\n            \"reason_id\": 1,\n            \"balance_status\": 1,\n            \"balance_status_text\": \"balance_status_text\",\n            \"commission\": 1,\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\"\n        }\n    \"\"\"\n\n    id: int\n    name: str\n    fa_name: str\n    symbol: str\n    logo: str\n    value: str\n    done_value: str\n    type: int\n    transaction_code: str\n    type_text: str\n    reason_type: str\n    reason_text: str\n    reason_type_text: str\n    reason_id: int\n    balance_status: int\n    balance_status_text: str\n    commission: int\n    created_at: str\n    created_at_jalali: str\n</code></pre>"},{"location":"reference/types/responses/assets_information/","title":"assets_information","text":""},{"location":"reference/types/responses/assets_information/#src.bit24.types.responses.assets_information--assets-information","title":"Assets Information","text":"<p>This module contains the data classes for the assets information response.</p>"},{"location":"reference/types/responses/assets_information/#src.bit24.types.responses.assets_information--classes","title":"Classes:","text":"<ul> <li><code>AssetMarketInfo</code>: A <code>TypedDict</code> that represents the structure of the market information</li> <li><code>AssetInfo</code>: A <code>TypedDict</code> that represents the structure of the asset information</li> <li><code>AssetInformationResponse</code>: A <code>TypedDict</code> that represents the structure of the asset information response</li> </ul>"},{"location":"reference/types/responses/assets_information/#src.bit24.types.responses.assets_information.AssetInfo","title":"<code>AssetInfo</code>","text":"<p>             Bases: <code>TypedDict</code>, <code>CoinInfo</code></p> <p>Asset Information.</p> <p>Attributes:</p> Name Type Description <code>coin_type</code> <code>int</code> <p>Coin type.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>change_24hr</code> <code>str</code> <p>Change 24hr.</p> <code>balance</code> <code>str</code> <p>Balance.</p> <code>available_balance</code> <code>str</code> <p>Available balance.</p> <code>in_orders</code> <code>str</code> <p>In orders.</p> <code>balance_irt</code> <code>str</code> <p>Balance IRT.</p> <code>balance_usdt</code> <code>str</code> <p>Balance USDT.</p> <code>markets</code> <code>list[AssetMarketInfo]</code> <p>Markets.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetInfo(\n...     coin_type=1,\n...     each_price=\"each_price\",\n...     change_24hr=\"change_24hr\",\n...     balance=\"balance\",\n...     available_balance=\"available_balance\",\n...     in_orders=\"in_orders\",\n...     balance_irt=\"balance_irt\",\n...     balance_usdt=\"balance_usdt\",\n...     markets=[...],  # AssetMarketInfo\n... )\n{\n    'coin_type': 1,\n    'each_price': 'each_price',\n    'change_24hr': 'change_24hr',\n    'balance': 'balance',\n    'available_balance': 'available_balance',\n    'in_orders': 'in_orders',\n    'balance_irt': 'balance_irt',\n    'balance_usdt': 'balance_usdt',\n    'markets': [...] # AssetMarketInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetInfo(TypedDict, CoinInfo):\n    \"\"\"\n    Asset Information.\n\n    Attributes:\n        coin_type (int): Coin type.\n        each_price (str): Each price.\n        change_24hr (str): Change 24hr.\n        balance (str): Balance.\n        available_balance (str): Available balance.\n        in_orders (str): In orders.\n        balance_irt (str): Balance IRT.\n        balance_usdt (str): Balance USDT.\n        markets (list[AssetMarketInfo]): Markets.\n\n    Examples:\n        &gt;&gt;&gt; AssetInfo(\n        ...     coin_type=1,\n        ...     each_price=\"each_price\",\n        ...     change_24hr=\"change_24hr\",\n        ...     balance=\"balance\",\n        ...     available_balance=\"available_balance\",\n        ...     in_orders=\"in_orders\",\n        ...     balance_irt=\"balance_irt\",\n        ...     balance_usdt=\"balance_usdt\",\n        ...     markets=[...],  # AssetMarketInfo\n        ... )\n        {\n            'coin_type': 1,\n            'each_price': 'each_price',\n            'change_24hr': 'change_24hr',\n            'balance': 'balance',\n            'available_balance': 'available_balance',\n            'in_orders': 'in_orders',\n            'balance_irt': 'balance_irt',\n            'balance_usdt': 'balance_usdt',\n            'markets': [...] # AssetMarketInfo\n        }\n    \"\"\"\n\n    coin_type: int\n    each_price: str\n    change_24hr: str\n    balance: str\n    available_balance: str\n    in_orders: str\n    balance_irt: str\n    balance_usdt: str\n    markets: list[AssetMarketInfo]\n</code></pre>"},{"location":"reference/types/responses/assets_information/#src.bit24.types.responses.assets_information.AssetInformationResponse","title":"<code>AssetInformationResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Asset Information Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>asset</code> <code>list[AssetInfo]</code> <p>Asset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetInformationResponse(\n...     message=\"message\",\n...     asset=[...],  # AssetInfo\n... )\n{\n    'message': 'message',\n    'asset': [...] # AssetInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetInformationResponse(TypedDict):\n    \"\"\"\n    Asset Information Response.\n\n    Attributes:\n        message (str): Message.\n        asset (list[AssetInfo]): Asset.\n\n    Examples:\n        &gt;&gt;&gt; AssetInformationResponse(\n        ...     message=\"message\",\n        ...     asset=[...],  # AssetInfo\n        ... )\n        {\n            'message': 'message',\n            'asset': [...] # AssetInfo\n        }\n    \"\"\"\n\n    message: str\n    asset: list[AssetInfo]\n</code></pre>"},{"location":"reference/types/responses/assets_information/#src.bit24.types.responses.assets_information.AssetMarketInfo","title":"<code>AssetMarketInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market Information.</p> <p>Attributes:</p> Name Type Description <code>base_coin_symbol</code> <code>str</code> <p>Base coin symbol.</p> <code>quote_coin_symbol</code> <code>str</code> <p>Quote coin symbol.</p> <code>is_active</code> <code>int</code> <p>Is active.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; AssetMarketInfo(\n...     base_coin_symbol=\"base_coin_symbol\",\n...     quote_coin_symbol=\"quote_coin_symbol\",\n...     is_active=1,\n... )\n{\n    'base_coin_symbol': 'base_coin_symbol',\n    'quote_coin_symbol': 'quote_coin_symbol',\n    'is_active': 1\n}\n</code></pre> Source code in <code>src/bit24/types/responses/assets_information.py</code> <pre><code>class AssetMarketInfo(TypedDict):\n    \"\"\"\n    Market Information.\n\n    Attributes:\n        base_coin_symbol (str): Base coin symbol.\n        quote_coin_symbol (str): Quote coin symbol.\n        is_active (int): Is active.\n\n    Examples:\n        &gt;&gt;&gt; AssetMarketInfo(\n        ...     base_coin_symbol=\"base_coin_symbol\",\n        ...     quote_coin_symbol=\"quote_coin_symbol\",\n        ...     is_active=1,\n        ... )\n        {\n            'base_coin_symbol': 'base_coin_symbol',\n            'quote_coin_symbol': 'quote_coin_symbol',\n            'is_active': 1\n        }\n    \"\"\"\n\n    base_coin_symbol: str\n    quote_coin_symbol: str\n    is_active: int\n</code></pre>"},{"location":"reference/types/responses/base/","title":"base","text":""},{"location":"reference/types/responses/base/#src.bit24.types.responses.base--base-response","title":"Base Response","text":"<p>This module contains the base response class for the API.</p>"},{"location":"reference/types/responses/base/#src.bit24.types.responses.base--classes","title":"Classes:","text":"<ul> <li><code>BaseResponse</code>: A <code>TypedDict</code> that represents the structure of the base response</li> <li><code>Error</code>: A <code>TypedDict</code> that represents the structure of the error</li> <li><code>ErrorInformation</code>: A <code>TypedDict</code> that represents the structure of the error information</li> </ul>"},{"location":"reference/types/responses/base/#src.bit24.types.responses.base.BaseResponse","title":"<code>BaseResponse</code>","text":"<p>             Bases: <code>TypedDict</code>, <code>Generic[T]</code></p> <p>Base Response.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>T</code> <p>Data.</p> <code>error</code> <code>dict[str, str] | None</code> <p>Error.</p> <code>status_code</code> <code>int</code> <p>Status code.</p> <code>success</code> <code>bool</code> <p>Success.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; BaseResponse(data=..., error=..., status_code=..., success=...)\n{\n    'data': ...,\n    'error': ...,\n    'status_code': ...,\n    'success': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class BaseResponse(TypedDict, Generic[T]):\n    \"\"\"\n    Base Response.\n\n    Attributes:\n        data (T): Data.\n        error (dict[str, str] | None): Error.\n        status_code (int): Status code.\n        success (bool): Success.\n\n    Examples:\n        &gt;&gt;&gt; BaseResponse(data=..., error=..., status_code=..., success=...)\n        {\n            'data': ...,\n            'error': ...,\n            'status_code': ...,\n            'success': ...\n        }\n    \"\"\"\n\n    data: T\n    error: Error | None\n    status_code: int\n    success: bool\n</code></pre>"},{"location":"reference/types/responses/base/#src.bit24.types.responses.base.Error","title":"<code>Error</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Error.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>errors</code> <code>list[ErrorInformation]</code> <p>Errors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Error(message=..., errors=...)\n{\n    'message': ...,\n    'errors': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class Error(TypedDict):\n    \"\"\"\n    Error.\n\n    Attributes:\n        message (str): Message.\n        errors (list[ErrorInformation]): Errors.\n\n    Examples:\n        &gt;&gt;&gt; Error(message=..., errors=...)\n        {\n            'message': ...,\n            'errors': ...\n        }\n    \"\"\"\n\n    message: str\n    errors: list[ErrorInformation] | None\n</code></pre>"},{"location":"reference/types/responses/base/#src.bit24.types.responses.base.ErrorInformation","title":"<code>ErrorInformation</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Error Information.</p> <p>Attributes:</p> Name Type Description <code>reason</code> <code>str</code> <p>Reason.</p> <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ErrorInformation(reason=..., message=...)\n{\n    'reason': ...,\n    'message': ...\n}\n</code></pre> Source code in <code>src/bit24/types/responses/base.py</code> <pre><code>class ErrorInformation(TypedDict):\n    \"\"\"\n    Error Information.\n\n    Attributes:\n        reason (str): Reason.\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; ErrorInformation(reason=..., message=...)\n        {\n            'reason': ...,\n            'message': ...\n        }\n    \"\"\"\n\n    reason: str\n    message: str\n</code></pre>"},{"location":"reference/types/responses/cancel_order/","title":"cancel_order","text":""},{"location":"reference/types/responses/cancel_order/#src.bit24.types.responses.cancel_order--cancel-order-response","title":"Cancel Order Response","text":"<p>This module contains the response class for the Cancel Order API.</p>"},{"location":"reference/types/responses/cancel_order/#src.bit24.types.responses.cancel_order--classes","title":"Classes:","text":"<ul> <li><code>CancelOrderResponse</code>: A <code>TypedDict</code> that represents the structure of the cancel order response</li> </ul>"},{"location":"reference/types/responses/cancel_order/#src.bit24.types.responses.cancel_order.CancelOrderResponse","title":"<code>CancelOrderResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Cancel Order Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CancelOrderResponse(message=\"message\")\n{'message': 'message'}\n</code></pre> Source code in <code>src/bit24/types/responses/cancel_order.py</code> <pre><code>class CancelOrderResponse(TypedDict):\n    \"\"\"\n    Cancel Order Response.\n\n    Attributes:\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; CancelOrderResponse(message=\"message\")\n        {'message': 'message'}\n    \"\"\"\n\n    message: str\n</code></pre>"},{"location":"reference/types/responses/coin_info/","title":"coin_info","text":""},{"location":"reference/types/responses/coin_info/#src.bit24.types.responses.coin_info--coin-info","title":"Coin Info","text":"<p>This module contains the <code>CoinInfo</code> type hint which is a <code>TypedDict</code> that represents the structure of the coin information</p>"},{"location":"reference/types/responses/coin_info/#src.bit24.types.responses.coin_info--classes","title":"Classes","text":"<ul> <li><code>CoinInfo</code>: A <code>TypedDict</code> that represents the structure of the coin information</li> </ul>"},{"location":"reference/types/responses/coin_info/#src.bit24.types.responses.coin_info.CoinInfo","title":"<code>CoinInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Coin Information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>symbol</code> <code>str</code> <p>Symbol.</p> <code>name</code> <code>str</code> <p>Name.</p> <code>fa_name</code> <code>str</code> <p>Fa name.</p> <code>web_icon</code> <code>str</code> <p>Web icon.</p> <code>app_icon</code> <code>str</code> <p>App icon.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CoinInfo(\n...     id=1,\n...     symbol=\"symbol\",\n...     name=\"name\",\n...     fa_name=\"fa_name\",\n...     web_icon=\"web_icon\",\n...     app_icon=\"app_icon\",\n... )\n{'id': 1, 'symbol': 'symbol', 'name': 'name', 'fa_name': 'fa_name', 'web_icon': 'web_icon', 'app_icon': 'app_icon'}\n</code></pre> Source code in <code>src/bit24/types/responses/coin_info.py</code> <pre><code>class CoinInfo(TypedDict):\n    \"\"\"\n    Coin Information.\n\n    Attributes:\n        id (int): ID.\n        symbol (str): Symbol.\n        name (str): Name.\n        fa_name (str): Fa name.\n        web_icon (str): Web icon.\n        app_icon (str): App icon.\n\n    Examples:\n        &gt;&gt;&gt; CoinInfo(\n        ...     id=1,\n        ...     symbol=\"symbol\",\n        ...     name=\"name\",\n        ...     fa_name=\"fa_name\",\n        ...     web_icon=\"web_icon\",\n        ...     app_icon=\"app_icon\",\n        ... )\n        {'id': 1, 'symbol': 'symbol', 'name': 'name', 'fa_name': 'fa_name', 'web_icon': 'web_icon', 'app_icon': 'app_icon'}\n    \"\"\"\n\n    id: int\n    symbol: str\n    name: str\n    fa_name: str\n    web_icon: str\n    app_icon: str\n</code></pre>"},{"location":"reference/types/responses/create_order/","title":"create_order","text":""},{"location":"reference/types/responses/create_order/#src.bit24.types.responses.create_order--create-order-response","title":"Create Order Response","text":"<p>This module contains the response class for the Create Order API.</p>"},{"location":"reference/types/responses/create_order/#src.bit24.types.responses.create_order--classes","title":"Classes:","text":"<ul> <li><code>OrderInfo</code>: A <code>TypedDict</code> that represents the structure of the order information</li> <li><code>CreateOrderResponse</code>: A <code>TypedDict</code> that represents the structure of the create order response</li> </ul>"},{"location":"reference/types/responses/create_order/#src.bit24.types.responses.create_order.CreateOrderResponse","title":"<code>CreateOrderResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Create Order Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>order</code> <code>OrderInfo</code> <p>Order.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CreateOrderResponse(\n...     message=\"message\",\n...     order=OrderInfo(\n...         id=1,\n...         type=1,\n...         each_price=\"each_price\",\n...         stop_price=\"stop_price\",\n...         trigger_price=\"trigger_price\",\n...         amount=\"amount\",\n...         available_amount=\"available_amount\",\n...         done_value=\"done_value\",\n...         done_percent=\"done_percent\",\n...         mean_value=1,\n...         commission=\"commission\",\n...         total=\"total\",\n...         created_at=\"created_at\",\n...         created_at_jalali=\"created_at_jalali\",\n...         base_coin=CoinInfo(\n...             id=1,\n...             symbol=\"symbol\",\n...             name=\"name\",\n...             fa_name=\"fa_name\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...         ),\n...         quote_coin=CoinInfo(\n...             id=1,\n...             symbol=\"symbol\",\n...             name=\"name\",\n...             fa_name=\"fa_name\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...         ),\n...         status=1,\n...         status_text=\"status_text\",\n...         category_type=\"category_type\",\n...         category_type_text=\"category_type_text\",\n...         conditions=\"conditions\",\n...         triggered_category_type=\"triggered_category_type\",\n...         is_trade=1,\n...     ),\n... )\n{\n    \"message\": \"message\",\n    \"order\": {\n        \"id\": 1,\n        \"type\": 1,\n        \"each_price\": \"each_price\",\n        \"stop_price\": \"stop_price\",\n        \"trigger_price\": \"trigger_price\",\n        \"amount\": \"amount\",\n        \"available_amount\": \"available_amount\",\n        \"done_value\": \"done_value\",\n        \"done_percent\": \"done_percent\",\n        \"mean_value\": 1,\n        \"commission\": \"commission\",\n        \"total\": \"total\",\n        \"created_at\": \"created_at\",\n        \"created_at_jalali\": \"created_at_jalali\",\n        \"base_coin\": {\n            \"id\": 1,\n            \"symbol\": \"symbol\",\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"web_icon\": \"web_icon\",\n            \"app_icon\": \"app_icon\"\n        },\n        \"quote_coin\": {\n            \"id\": 1,\n            \"symbol\": \"symbol\",\n            \"name\": \"name\",\n            \"fa_name\": \"fa_name\",\n            \"web_icon\": \"web_icon\",\n            \"app_icon\": \"app_icon\"\n        },\n        \"status\": 1,\n        \"status_text\": \"status_text\",\n        \"category_type\": \"category_type\",\n        \"category_type_text\": \"category_type_text\",\n        \"conditions\": \"conditions\",\n        \"triggered_category_type\": \"triggered_category_type\",\n        \"is_trade\": 1\n    }\n}\n</code></pre> Source code in <code>src/bit24/types/responses/create_order.py</code> <pre><code>class CreateOrderResponse(TypedDict):\n    \"\"\"\n    Create Order Response.\n\n    Attributes:\n        message (str): Message.\n        order (OrderInfo): Order.\n\n    Examples:\n        &gt;&gt;&gt; CreateOrderResponse(\n        ...     message=\"message\",\n        ...     order=OrderInfo(\n        ...         id=1,\n        ...         type=1,\n        ...         each_price=\"each_price\",\n        ...         stop_price=\"stop_price\",\n        ...         trigger_price=\"trigger_price\",\n        ...         amount=\"amount\",\n        ...         available_amount=\"available_amount\",\n        ...         done_value=\"done_value\",\n        ...         done_percent=\"done_percent\",\n        ...         mean_value=1,\n        ...         commission=\"commission\",\n        ...         total=\"total\",\n        ...         created_at=\"created_at\",\n        ...         created_at_jalali=\"created_at_jalali\",\n        ...         base_coin=CoinInfo(\n        ...             id=1,\n        ...             symbol=\"symbol\",\n        ...             name=\"name\",\n        ...             fa_name=\"fa_name\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...         ),\n        ...         quote_coin=CoinInfo(\n        ...             id=1,\n        ...             symbol=\"symbol\",\n        ...             name=\"name\",\n        ...             fa_name=\"fa_name\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...         ),\n        ...         status=1,\n        ...         status_text=\"status_text\",\n        ...         category_type=\"category_type\",\n        ...         category_type_text=\"category_type_text\",\n        ...         conditions=\"conditions\",\n        ...         triggered_category_type=\"triggered_category_type\",\n        ...         is_trade=1,\n        ...     ),\n        ... )\n        {\n            \"message\": \"message\",\n            \"order\": {\n                \"id\": 1,\n                \"type\": 1,\n                \"each_price\": \"each_price\",\n                \"stop_price\": \"stop_price\",\n                \"trigger_price\": \"trigger_price\",\n                \"amount\": \"amount\",\n                \"available_amount\": \"available_amount\",\n                \"done_value\": \"done_value\",\n                \"done_percent\": \"done_percent\",\n                \"mean_value\": 1,\n                \"commission\": \"commission\",\n                \"total\": \"total\",\n                \"created_at\": \"created_at\",\n                \"created_at_jalali\": \"created_at_jalali\",\n                \"base_coin\": {\n                    \"id\": 1,\n                    \"symbol\": \"symbol\",\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"web_icon\": \"web_icon\",\n                    \"app_icon\": \"app_icon\"\n                },\n                \"quote_coin\": {\n                    \"id\": 1,\n                    \"symbol\": \"symbol\",\n                    \"name\": \"name\",\n                    \"fa_name\": \"fa_name\",\n                    \"web_icon\": \"web_icon\",\n                    \"app_icon\": \"app_icon\"\n                },\n                \"status\": 1,\n                \"status_text\": \"status_text\",\n                \"category_type\": \"category_type\",\n                \"category_type_text\": \"category_type_text\",\n                \"conditions\": \"conditions\",\n                \"triggered_category_type\": \"triggered_category_type\",\n                \"is_trade\": 1\n            }\n        }\n    \"\"\"\n\n    message: str\n    order: OrderInfo\n</code></pre>"},{"location":"reference/types/responses/create_order/#src.bit24.types.responses.create_order.OrderInfo","title":"<code>OrderInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>type</code> <code>int</code> <p>Type.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>stop_price</code> <code>str</code> <p>Stop price.</p> <code>trigger_price</code> <code>str</code> <p>Trigger price.</p> <code>amount</code> <code>str</code> <p>Amount.</p> <code>available_amount</code> <code>str</code> <p>Available amount.</p> <code>done_value</code> <code>str</code> <p>Done value.</p> <code>done_percent</code> <code>str</code> <p>Done percent.</p> <code>mean_value</code> <code>int</code> <p>Mean value.</p> <code>commission</code> <code>str</code> <p>Commission.</p> <code>total</code> <code>str</code> <p>Total.</p> <code>created_at</code> <code>str</code> <p>Created at.</p> <code>created_at_jalali</code> <code>str</code> <p>Created at jalali.</p> <code>base_coin</code> <code>CoinInfo</code> <p>Base coin.</p> <code>quote_coin</code> <code>CoinInfo</code> <p>Quote coin.</p> <code>status</code> <code>int</code> <p>Status.</p> <code>status_text</code> <code>str</code> <p>Status text.</p> <code>category_type</code> <code>str</code> <p>Category type.</p> <code>category_type_text</code> <code>str</code> <p>Category type text.</p> <code>conditions</code> <code>str</code> <p>Conditions.</p> <code>triggered_category_type</code> <code>str</code> <p>Triggered category type.</p> <code>is_trade</code> <code>int</code> <p>Is trade.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderInfo(\n...     id=1,\n...     type=1,\n...     each_price=\"each_price\",\n...     stop_price=\"stop_price\",\n...     trigger_price=\"trigger_price\",\n...     amount=\"amount\",\n...     available_amount=\"available_amount\",\n...     done_value=\"done_value\",\n...     done_percent=\"done_percent\",\n...     mean_value=1,\n...     commission=\"commission\",\n...     total=\"total\",\n...     created_at=\"created_at\",\n...     created_at_jalali=\"created_at_jalali\",\n...     base_coin=CoinInfo(\n...         id=1,\n...         symbol=\"symbol\",\n...         name=\"name\",\n...         fa_name=\"fa_name\",\n...         web_icon=\"web_icon\",\n...         app_icon=\"app_icon\",\n...     ),\n...     quote_coin=CoinInfo(\n...         id=1,\n...         symbol=\"symbol\",\n...         name=\"name\",\n...         fa_name=\"fa_name\",\n...         web_icon=\"web_icon\",\n...         app_icon=\"app_icon\",\n...     ),\n...     status=1,\n...     status_text=\"status_text\",\n...     category_type=\"category_type\",\n...     category_type_text=\"category_type_text\",\n...     conditions=\"conditions\",\n...     triggered_category_type=\"triggered_category_type\",\n...     is_trade=1,\n... )\n{\n    \"id\": 1,\n    \"type\": 1,\n    \"each_price\": \"each_price\",\n    \"stop_price\": \"stop_price\",\n    \"trigger_price\": \"trigger_price\",\n    \"amount\": \"amount\",\n    \"available_amount\": \"available_amount\",\n    \"done_value\": \"done_value\",\n    \"done_percent\": \"done_percent\",\n    \"mean_value\": 1,\n    \"commission\": \"commission\",\n    \"total\": \"total\",\n    \"created_at\": \"created_at\",\n    \"created_at_jalali\": \"created_at_jalali\",\n    \"base_coin\": {\n        \"id\": 1,\n        \"symbol\": \"symbol\",\n        \"name\": \"name\",\n        \"fa_name\": \"fa_name\",\n        \"web_icon\": \"web_icon\",\n        \"app_icon\": \"app_icon\"\n    },\n    \"quote_coin\": {\n        \"id\": 1,\n        \"symbol\": \"symbol\",\n        \"name\": \"name\",\n        \"fa_name\": \"fa_name\",\n        \"web_icon\": \"web_icon\",\n        \"app_icon\": \"app_icon\"\n    },\n    \"status\": 1,\n    \"status_text\": \"status_text\",\n    \"category_type\": \"category_type\",\n    \"category_type_text\": \"category_type_text\",\n    \"conditions\": \"conditions\",\n    \"triggered_category_type\": \"triggered_category_type\",\n    \"is_trade\": 1\n}\n</code></pre> Source code in <code>src/bit24/types/responses/create_order.py</code> <pre><code>class OrderInfo(TypedDict):\n    \"\"\"\n    Order Information.\n\n    Attributes:\n        id (int): ID.\n        type (int): Type.\n        each_price (str): Each price.\n        stop_price (str): Stop price.\n        trigger_price (str): Trigger price.\n        amount (str): Amount.\n        available_amount (str): Available amount.\n        done_value (str): Done value.\n        done_percent (str): Done percent.\n        mean_value (int): Mean value.\n        commission (str): Commission.\n        total (str): Total.\n        created_at (str): Created at.\n        created_at_jalali (str): Created at jalali.\n        base_coin (CoinInfo): Base coin.\n        quote_coin (CoinInfo): Quote coin.\n        status (int): Status.\n        status_text (str): Status text.\n        category_type (str): Category type.\n        category_type_text (str): Category type text.\n        conditions (str): Conditions.\n        triggered_category_type (str): Triggered category type.\n        is_trade (int): Is trade.\n\n    Examples:\n        &gt;&gt;&gt; OrderInfo(\n        ...     id=1,\n        ...     type=1,\n        ...     each_price=\"each_price\",\n        ...     stop_price=\"stop_price\",\n        ...     trigger_price=\"trigger_price\",\n        ...     amount=\"amount\",\n        ...     available_amount=\"available_amount\",\n        ...     done_value=\"done_value\",\n        ...     done_percent=\"done_percent\",\n        ...     mean_value=1,\n        ...     commission=\"commission\",\n        ...     total=\"total\",\n        ...     created_at=\"created_at\",\n        ...     created_at_jalali=\"created_at_jalali\",\n        ...     base_coin=CoinInfo(\n        ...         id=1,\n        ...         symbol=\"symbol\",\n        ...         name=\"name\",\n        ...         fa_name=\"fa_name\",\n        ...         web_icon=\"web_icon\",\n        ...         app_icon=\"app_icon\",\n        ...     ),\n        ...     quote_coin=CoinInfo(\n        ...         id=1,\n        ...         symbol=\"symbol\",\n        ...         name=\"name\",\n        ...         fa_name=\"fa_name\",\n        ...         web_icon=\"web_icon\",\n        ...         app_icon=\"app_icon\",\n        ...     ),\n        ...     status=1,\n        ...     status_text=\"status_text\",\n        ...     category_type=\"category_type\",\n        ...     category_type_text=\"category_type_text\",\n        ...     conditions=\"conditions\",\n        ...     triggered_category_type=\"triggered_category_type\",\n        ...     is_trade=1,\n        ... )\n        {\n            \"id\": 1,\n            \"type\": 1,\n            \"each_price\": \"each_price\",\n            \"stop_price\": \"stop_price\",\n            \"trigger_price\": \"trigger_price\",\n            \"amount\": \"amount\",\n            \"available_amount\": \"available_amount\",\n            \"done_value\": \"done_value\",\n            \"done_percent\": \"done_percent\",\n            \"mean_value\": 1,\n            \"commission\": \"commission\",\n            \"total\": \"total\",\n            \"created_at\": \"created_at\",\n            \"created_at_jalali\": \"created_at_jalali\",\n            \"base_coin\": {\n                \"id\": 1,\n                \"symbol\": \"symbol\",\n                \"name\": \"name\",\n                \"fa_name\": \"fa_name\",\n                \"web_icon\": \"web_icon\",\n                \"app_icon\": \"app_icon\"\n            },\n            \"quote_coin\": {\n                \"id\": 1,\n                \"symbol\": \"symbol\",\n                \"name\": \"name\",\n                \"fa_name\": \"fa_name\",\n                \"web_icon\": \"web_icon\",\n                \"app_icon\": \"app_icon\"\n            },\n            \"status\": 1,\n            \"status_text\": \"status_text\",\n            \"category_type\": \"category_type\",\n            \"category_type_text\": \"category_type_text\",\n            \"conditions\": \"conditions\",\n            \"triggered_category_type\": \"triggered_category_type\",\n            \"is_trade\": 1\n        }\n    \"\"\"\n\n    id: int\n    type: int\n    each_price: str\n    stop_price: str\n    trigger_price: str\n    amount: str\n    available_amount: str\n    done_value: str\n    done_percent: str\n    mean_value: int\n    commission: str\n    total: str\n    created_at: str\n    created_at_jalali: str\n    base_coin: CoinInfo\n    quote_coin: CoinInfo\n    status: int\n    status_text: str\n    category_type: str\n    category_type_text: str\n    conditions: str\n    triggered_category_type: str\n    is_trade: int\n</code></pre>"},{"location":"reference/types/responses/deposit_networks/","title":"deposit_networks","text":""},{"location":"reference/types/responses/deposit_networks/#src.bit24.types.responses.deposit_networks--deposit-networks","title":"Deposit Networks","text":"<p>This module contains the type definitions for the response of the deposit networks endpoint.</p>"},{"location":"reference/types/responses/deposit_networks/#src.bit24.types.responses.deposit_networks--classes","title":"Classes","text":"<ul> <li><code>DepositNetworkInfo</code>: A <code>TypedDict</code> that represents the structure of the network information</li> <li><code>DepositNetworksResponse</code>: A <code>TypedDict</code> that represents the structure of the deposit networks response</li> </ul>"},{"location":"reference/types/responses/deposit_networks/#src.bit24.types.responses.deposit_networks.DepositNetworkInfo","title":"<code>DepositNetworkInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Network Information.</p> <p>Attributes:</p> Name Type Description <code>network_name</code> <code> (str</code> <p>Network name.</p> <code>network_layer</code> <code>str</code> <p>Network layer.</p> <code>description_deposit</code> <code>str</code> <p>Description deposit.</p> <code>min_deposit</code> <code>str</code> <p>Min deposit.</p> <code>address</code> <code>str</code> <p>Address.</p> <code>memo</code> <code>str</code> <p>Memo.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DepositNetworkInfo(\n...     network_name=\"network_name\",\n...     network_layer=\"network_layer\",\n...     description_deposit=\"description_deposit\",\n...     min_deposit=\"min_deposit\",\n...     address=\"address\",\n...     memo=\"memo\",\n... )\n{\n    'network_name': 'network_name',\n    'network_layer': 'network_layer',\n    'description_deposit': 'description_deposit',\n    'min_deposit': 'min_deposit',\n    'address': 'address',\n    'memo': 'memo'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/deposit_networks.py</code> <pre><code>class DepositNetworkInfo(TypedDict):\n    \"\"\"\n    Network Information.\n\n    Attributes:\n        network_name  (str): Network name.\n        network_layer (str): Network layer.\n        description_deposit (str): Description deposit.\n        min_deposit (str): Min deposit.\n        address (str): Address.\n        memo (str): Memo.\n\n    Examples:\n        &gt;&gt;&gt; DepositNetworkInfo(\n        ...     network_name=\"network_name\",\n        ...     network_layer=\"network_layer\",\n        ...     description_deposit=\"description_deposit\",\n        ...     min_deposit=\"min_deposit\",\n        ...     address=\"address\",\n        ...     memo=\"memo\",\n        ... )\n        {\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'description_deposit': 'description_deposit',\n            'min_deposit': 'min_deposit',\n            'address': 'address',\n            'memo': 'memo'\n        }\n    \"\"\"\n\n    network_name: str\n    network_layer: str\n    description_deposit: str\n    min_deposit: str\n    address: str\n    memo: str | None\n</code></pre>"},{"location":"reference/types/responses/deposit_networks/#src.bit24.types.responses.deposit_networks.DepositNetworksResponse","title":"<code>DepositNetworksResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Deposit Networks Response.</p> <p>Attributes:</p> Name Type Description <code>networks</code> <code>list[DepositNetworkInfo]</code> <p>Networks.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DepositNetworksResponse(\n...     networks=[\n...         DepositNetworkInfo(\n...             network_name=\"network_name\",\n...             network_layer=\"network_layer\",\n...             description_deposit=\"description_deposit\",\n...             min_deposit=\"min_deposit\",\n...             address=\"address\",\n...             memo=\"memo\",\n...         )\n...     ]\n... )\n{\n    'networks': [\n        {\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'description_deposit': 'description_deposit',\n            'min_deposit': 'min_deposit',\n            'address': 'address',\n            'memo': 'memo'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/deposit_networks.py</code> <pre><code>class DepositNetworksResponse(TypedDict):\n    \"\"\"\n    Deposit Networks Response.\n\n    Attributes:\n        networks (list[DepositNetworkInfo]): Networks.\n\n    Examples:\n        &gt;&gt;&gt; DepositNetworksResponse(\n        ...     networks=[\n        ...         DepositNetworkInfo(\n        ...             network_name=\"network_name\",\n        ...             network_layer=\"network_layer\",\n        ...             description_deposit=\"description_deposit\",\n        ...             min_deposit=\"min_deposit\",\n        ...             address=\"address\",\n        ...             memo=\"memo\",\n        ...         )\n        ...     ]\n        ... )\n        {\n            'networks': [\n                {\n                    'network_name': 'network_name',\n                    'network_layer': 'network_layer',\n                    'description_deposit': 'description_deposit',\n                    'min_deposit': 'min_deposit',\n                    'address': 'address',\n                    'memo': 'memo'\n                }\n            ]\n        }\n    \"\"\"\n\n    networks: list[DepositNetworkInfo]\n</code></pre>"},{"location":"reference/types/responses/markets_info/","title":"markets_info","text":""},{"location":"reference/types/responses/markets_info/#src.bit24.types.responses.markets_info--markets-info","title":"Markets Info","text":"<p>This module contains the type hints for the response of the <code>markets</code> endpoint.</p>"},{"location":"reference/types/responses/markets_info/#src.bit24.types.responses.markets_info--classes","title":"Classes:","text":"<ul> <li><code>MarketInfo</code>: A <code>TypedDict</code> that represents the structure of the market information.</li> <li><code>MarketListResponse</code>: A <code>TypedDict</code> that represents the structure of the market list response.</li> </ul>"},{"location":"reference/types/responses/markets_info/#src.bit24.types.responses.markets_info.MarketInfo","title":"<code>MarketInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market Information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Market ID.</p> <code>base_coin_id</code> <code>int</code> <p>Base coin ID.</p> <code>base_coin_name</code> <code>str</code> <p>Base coin name.</p> <code>base_coin_fa_name</code> <code>str</code> <p>Base coin Farsi name.</p> <code>base_coin_symbol</code> <code>str</code> <p>Base coin symbol.</p> <code>quote_coin_id</code> <code>int</code> <p>Quote coin ID.</p> <code>quote_coin_symbol</code> <code>str</code> <p>Quote coin symbol.</p> <code>quote_coin_name</code> <code>str</code> <p>Quote coin name.</p> <code>quote_coin_fa_name</code> <code>str</code> <p>Quote coin Farsi name.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>other_side_each_price</code> <code>str</code> <p>Other side each price.</p> <code>quote_coin_volume</code> <code>str</code> <p>Quote coin volume.</p> <code>base_coin_volume</code> <code>str</code> <p>Base coin volume.</p> <code>_24h_change</code> <code>str</code> <p>24-hour change.</p> <code>_24h_change_volume</code> <code>str</code> <p>24-hour change volume.</p> <code>total_min</code> <code>str</code> <p>Total min.</p> <code>market_order_quote_coin_total_min</code> <code>str</code> <p>Market order quote coin total min.</p> <code>market_order_base_coin_total_min</code> <code>str</code> <p>Market order base coin total min.</p> <code>web_icon</code> <code>str</code> <p>Web icon.</p> <code>app_icon</code> <code>str</code> <p>App icon.</p> <code>quote_web_icon</code> <code>str</code> <p>Quote web icon.</p> <code>quote_app_icon</code> <code>str</code> <p>Quote app icon.</p> <code>is_active</code> <code>int</code> <p>Is active.</p> <code>first_order</code> <code>str</code> <p>First order.</p> <code>last_order</code> <code>str</code> <p>Last order.</p> <code>min_price</code> <code>str</code> <p>Min price.</p> <code>max_price</code> <code>str</code> <p>Max price.</p> <code>base_coin_decimal</code> <code>int</code> <p>Base coin decimal.</p> <code>quote_coin_decimal</code> <code>int</code> <p>Quote coin decimal.</p> <code>daily_chart_icon</code> <code>str</code> <p>Daily chart icon.</p> <code>is_favorite</code> <code>bool</code> <p>Is favorite.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MarketInfo(\n...     id=1,\n...     base_coin_id=1,\n...     base_coin_name=\"base_coin_name\",\n...     base_coin_fa_name=\"base_coin_fa_name\",\n...     base_coin_symbol=\"base_coin_symbol\",\n...     quote_coin_id=1,\n...     quote_coin_symbol=\"quote_coin_symbol\",\n...     quote_coin_name=\"quote_coin_name\",\n...     quote_coin_fa_name=\"quote_coin_fa_name\",\n...     each_price=\"each_price\",\n...     other_side_each_price=\"other_side_each_price\",\n...     quote_coin_volume=\"quote_coin_volume\",\n...     base_coin_volume=\"base_coin_volume\",\n...     _24h_change=\"_24h_change\",\n...     _24h_change_volume=\"_24h_change_volume\",\n...     total_min=\"total_min\",\n...     market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n...     market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n...     web_icon=\"web_icon\",\n...     app_icon=\"app_icon\",\n...     quote_web_icon=\"quote_web_icon\",\n...     quote_app_icon=\"quote_app_icon\",\n...     is_active=1,\n...     first_order=\"first_order\",\n...     last_order=\"last_order\",\n...     min_price=\"min_price\",\n...     max_price=\"max_price\",\n...     base_coin_decimal=1,\n...     quote_coin_decimal=1,\n...     daily_chart_icon=\"daily_chart_icon\",\n...     is_favorite=True,\n... )\n{\n    'id': 1,\n    'base_coin_id': 1,\n    'base_coin_name': 'base_coin_name',\n    'base_coin_fa_name': 'base_coin_fa_name',\n    'base_coin_symbol': 'base_coin_symbol',\n    'quote_coin_id': 1,\n    'quote_coin_symbol': 'quote_coin_symbol',\n    'quote_coin_name': 'quote_coin_name',\n    'quote_coin_fa_name': 'quote_coin_fa_name',\n    'each_price': 'each_price',\n    'other_side_each_price': 'other_side_each_price',\n    'quote_coin_volume': 'quote_coin_volume',\n    'base_coin_volume': 'base_coin_volume',\n    '_24h_change': '_24h_change',\n    '_24h_change_volume': '_24h_change_volume',\n    'total_min': 'total_min',\n    'market_order_quote_coin_total_min': 'market_order_quote_coin_total_min',\n    'market_order_base_coin_total_min': 'market_order_base_coin_total_min',\n    'web_icon': 'web_icon',\n    'app_icon': 'app_icon',\n    'quote_web_icon': 'quote_web_icon',\n    'quote_app_icon': 'quote_app_icon',\n    'is_active': 1,\n    'first_order': 'first_order',\n    'last_order': 'last_order',\n    'min_price': 'min_price',\n    'max_price': 'max_price',\n    'base_coin_decimal': 1,\n    'quote_coin_decimal': 1,\n    'daily_chart_icon': 'daily_chart_icon',\n    'is_favorite': True\n}\n</code></pre> Source code in <code>src/bit24/types/responses/markets_info.py</code> <pre><code>class MarketInfo(TypedDict):\n    \"\"\"\n    Market Information.\n\n    Attributes:\n        id (int): Market ID.\n        base_coin_id (int): Base coin ID.\n        base_coin_name (str): Base coin name.\n        base_coin_fa_name (str): Base coin Farsi name.\n        base_coin_symbol (str): Base coin symbol.\n        quote_coin_id (int): Quote coin ID.\n        quote_coin_symbol (str): Quote coin symbol.\n        quote_coin_name (str): Quote coin name.\n        quote_coin_fa_name (str): Quote coin Farsi name.\n        each_price (str): Each price.\n        other_side_each_price (str): Other side each price.\n        quote_coin_volume (str): Quote coin volume.\n        base_coin_volume (str): Base coin volume.\n        _24h_change (str): 24-hour change.\n        _24h_change_volume (str): 24-hour change volume.\n        total_min (str): Total min.\n        market_order_quote_coin_total_min (str): Market order quote coin total min.\n        market_order_base_coin_total_min (str): Market order base coin total min.\n        web_icon (str): Web icon.\n        app_icon (str): App icon.\n        quote_web_icon (str): Quote web icon.\n        quote_app_icon (str): Quote app icon.\n        is_active (int): Is active.\n        first_order (str): First order.\n        last_order (str): Last order.\n        min_price (str): Min price.\n        max_price (str): Max price.\n        base_coin_decimal (int): Base coin decimal.\n        quote_coin_decimal (int): Quote coin decimal.\n        daily_chart_icon (str): Daily chart icon.\n        is_favorite (bool): Is favorite.\n\n    Examples:\n        &gt;&gt;&gt; MarketInfo(\n        ...     id=1,\n        ...     base_coin_id=1,\n        ...     base_coin_name=\"base_coin_name\",\n        ...     base_coin_fa_name=\"base_coin_fa_name\",\n        ...     base_coin_symbol=\"base_coin_symbol\",\n        ...     quote_coin_id=1,\n        ...     quote_coin_symbol=\"quote_coin_symbol\",\n        ...     quote_coin_name=\"quote_coin_name\",\n        ...     quote_coin_fa_name=\"quote_coin_fa_name\",\n        ...     each_price=\"each_price\",\n        ...     other_side_each_price=\"other_side_each_price\",\n        ...     quote_coin_volume=\"quote_coin_volume\",\n        ...     base_coin_volume=\"base_coin_volume\",\n        ...     _24h_change=\"_24h_change\",\n        ...     _24h_change_volume=\"_24h_change_volume\",\n        ...     total_min=\"total_min\",\n        ...     market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n        ...     market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n        ...     web_icon=\"web_icon\",\n        ...     app_icon=\"app_icon\",\n        ...     quote_web_icon=\"quote_web_icon\",\n        ...     quote_app_icon=\"quote_app_icon\",\n        ...     is_active=1,\n        ...     first_order=\"first_order\",\n        ...     last_order=\"last_order\",\n        ...     min_price=\"min_price\",\n        ...     max_price=\"max_price\",\n        ...     base_coin_decimal=1,\n        ...     quote_coin_decimal=1,\n        ...     daily_chart_icon=\"daily_chart_icon\",\n        ...     is_favorite=True,\n        ... )\n        {\n            'id': 1,\n            'base_coin_id': 1,\n            'base_coin_name': 'base_coin_name',\n            'base_coin_fa_name': 'base_coin_fa_name',\n            'base_coin_symbol': 'base_coin_symbol',\n            'quote_coin_id': 1,\n            'quote_coin_symbol': 'quote_coin_symbol',\n            'quote_coin_name': 'quote_coin_name',\n            'quote_coin_fa_name': 'quote_coin_fa_name',\n            'each_price': 'each_price',\n            'other_side_each_price': 'other_side_each_price',\n            'quote_coin_volume': 'quote_coin_volume',\n            'base_coin_volume': 'base_coin_volume',\n            '_24h_change': '_24h_change',\n            '_24h_change_volume': '_24h_change_volume',\n            'total_min': 'total_min',\n            'market_order_quote_coin_total_min': 'market_order_quote_coin_total_min',\n            'market_order_base_coin_total_min': 'market_order_base_coin_total_min',\n            'web_icon': 'web_icon',\n            'app_icon': 'app_icon',\n            'quote_web_icon': 'quote_web_icon',\n            'quote_app_icon': 'quote_app_icon',\n            'is_active': 1,\n            'first_order': 'first_order',\n            'last_order': 'last_order',\n            'min_price': 'min_price',\n            'max_price': 'max_price',\n            'base_coin_decimal': 1,\n            'quote_coin_decimal': 1,\n            'daily_chart_icon': 'daily_chart_icon',\n            'is_favorite': True\n        }\n    \"\"\"\n\n    id: int\n    base_coin_id: int\n    base_coin_name: str\n    base_coin_fa_name: str\n    base_coin_symbol: str\n    quote_coin_id: int\n    quote_coin_symbol: str\n    quote_coin_name: str\n    quote_coin_fa_name: str\n    each_price: str\n    other_side_each_price: str\n    quote_coin_volume: str\n    base_coin_volume: str\n    _24h_change: str\n    _24h_change_volume: str\n    total_min: str\n    market_order_quote_coin_total_min: str\n    market_order_base_coin_total_min: str\n    web_icon: str\n    app_icon: str\n    quote_web_icon: str\n    quote_app_icon: str\n    is_active: int\n    first_order: str\n    last_order: str\n    min_price: str\n    max_price: str\n    base_coin_decimal: int\n    quote_coin_decimal: int\n    daily_chart_icon: str\n    is_favorite: bool\n</code></pre>"},{"location":"reference/types/responses/markets_info/#src.bit24.types.responses.markets_info.MarketListResponse","title":"<code>MarketListResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Market List Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[MarketInfo]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MarketListResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[\n...         MarketInfo(\n...             id=1,\n...             base_coin_id=1,\n...             base_coin_name=\"base_coin_name\",\n...             base_coin_fa_name=\"base_coin_fa_name\",\n...             base_coin_symbol=\"base_coin_symbol\",\n...             quote_coin_id=1,\n...             quote_coin_symbol=\"quote_coin_symbol\",\n...             quote_coin_name=\"quote_coin_name\",\n...             quote_coin_fa_name=\"quote_coin_fa_name\",\n...             each_price=\"each_price\",\n...             other_side_each_price=\"other_side_each_price\",\n...             quote_coin_volume=\"quote_coin_volume\",\n...             base_coin_volume=\"base_coin_volume\",\n...             _24h_change=\"_24h_change\",\n...             _24h_change_volume=\"_24h_change_volume\",\n...             total_min=\"total_min\",\n...             market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n...             market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n...             web_icon=\"web_icon\",\n...             app_icon=\"app_icon\",\n...             quote_web_icon=\"quote_web_icon\",\n...             quote_app_icon=\"quote_app_icon\",\n...             is_active=1,\n...             first_order=\"first_order\",\n...             last_order=\"last_order\",\n...             min_price=\"min_price\",\n...             max_price=\"max_price\",\n...             base_coin_decimal=1,\n...             quote_coin_decimal=1,\n...             daily_chart_icon=\"daily_chart_icon\",\n...             is_favorite=True\n...     ]\n... )\n{\n    'message': 'message',\n    'has_paginate': 1,\n    'total_data': 1,\n    'current_page': 1,\n    'from': 1,\n    'to': 1,\n    'per_page': 1,\n    'results': [\n        {\n            'id': 1,\n            'base_coin_id': 1,\n            'base_coin_name\n            ...\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/markets_info.py</code> <pre><code>class MarketListResponse(TypedDict):\n    \"\"\"\n    Market List Response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to (int): To.\n        per_page (int): Per page.\n        results (list[MarketInfo]): Results.\n\n    Examples:\n        &gt;&gt;&gt; MarketListResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[\n        ...         MarketInfo(\n        ...             id=1,\n        ...             base_coin_id=1,\n        ...             base_coin_name=\"base_coin_name\",\n        ...             base_coin_fa_name=\"base_coin_fa_name\",\n        ...             base_coin_symbol=\"base_coin_symbol\",\n        ...             quote_coin_id=1,\n        ...             quote_coin_symbol=\"quote_coin_symbol\",\n        ...             quote_coin_name=\"quote_coin_name\",\n        ...             quote_coin_fa_name=\"quote_coin_fa_name\",\n        ...             each_price=\"each_price\",\n        ...             other_side_each_price=\"other_side_each_price\",\n        ...             quote_coin_volume=\"quote_coin_volume\",\n        ...             base_coin_volume=\"base_coin_volume\",\n        ...             _24h_change=\"_24h_change\",\n        ...             _24h_change_volume=\"_24h_change_volume\",\n        ...             total_min=\"total_min\",\n        ...             market_order_quote_coin_total_min=\"market_order_quote_coin_total_min\",\n        ...             market_order_base_coin_total_min=\"market_order_base_coin_total_min\",\n        ...             web_icon=\"web_icon\",\n        ...             app_icon=\"app_icon\",\n        ...             quote_web_icon=\"quote_web_icon\",\n        ...             quote_app_icon=\"quote_app_icon\",\n        ...             is_active=1,\n        ...             first_order=\"first_order\",\n        ...             last_order=\"last_order\",\n        ...             min_price=\"min_price\",\n        ...             max_price=\"max_price\",\n        ...             base_coin_decimal=1,\n        ...             quote_coin_decimal=1,\n        ...             daily_chart_icon=\"daily_chart_icon\",\n        ...             is_favorite=True\n        ...     ]\n        ... )\n        {\n            'message': 'message',\n            'has_paginate': 1,\n            'total_data': 1,\n            'current_page': 1,\n            'from': 1,\n            'to': 1,\n            'per_page': 1,\n            'results': [\n                {\n                    'id': 1,\n                    'base_coin_id': 1,\n                    'base_coin_name\n                    ...\n                }\n            ]\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[MarketInfo]\n</code></pre>"},{"location":"reference/types/responses/order_book/","title":"order_book","text":""},{"location":"reference/types/responses/order_book/#src.bit24.types.responses.order_book--order-book-response","title":"Order Book Response","text":"<p>This file contains the Order Book Response.</p>"},{"location":"reference/types/responses/order_book/#src.bit24.types.responses.order_book--classes","title":"Classes:","text":"<ul> <li><code>OrderBookItem</code>: A <code>TypedDict</code> that represents the structure of the order book item.</li> <li><code>OrderBookResponse</code>: A <code>TypedDict</code> that represents the structure of the order book response.</li> </ul>"},{"location":"reference/types/responses/order_book/#src.bit24.types.responses.order_book.OrderBookItem","title":"<code>OrderBookItem</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Book Item.</p> <p>Attributes:</p> Name Type Description <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>each_price</code> <code>str</code> <p>Each price.</p> <code>available_amount</code> <code>str</code> <p>Available amount.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderBookItem(\n...     market_id=1, each_price=\"each_price\", available_amount=\"available_amount\"\n... )\n{\n    'market_id': 1,\n    'each_price': 'each_price',\n    'available_amount': 'available_amount'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/order_book.py</code> <pre><code>class OrderBookItem(TypedDict):\n    \"\"\"\n    Order Book Item.\n\n    Attributes:\n        market_id (int): Market ID.\n        each_price (str): Each price.\n        available_amount (str): Available amount.\n\n    Examples:\n        &gt;&gt;&gt; OrderBookItem(\n        ...     market_id=1, each_price=\"each_price\", available_amount=\"available_amount\"\n        ... )\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    \"\"\"\n\n    market_id: int\n    each_price: str\n    available_amount: str\n</code></pre>"},{"location":"reference/types/responses/order_book/#src.bit24.types.responses.order_book.OrderBookResponse","title":"<code>OrderBookResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Order Book Response.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID.</p> <code>market_symbol</code> <code>str</code> <p>Market symbol.</p> <code>buy_orders</code> <code>list[OrderBookItem]</code> <p>Buy orders.</p> <code>sell_orders</code> <code>list[OrderBookItem]</code> <p>Sell orders.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrderBookResponse(\n...     id=1,\n...     market_symbol=\"market_symbol\",\n...     buy_orders=[\n...         OrderBookItem(\n...             market_id=1,\n...             each_price=\"each_price\",\n...             available_amount=\"available_amount\",\n...         )\n...     ],\n...     sell_orders=[\n...         OrderBookItem(\n...             market_id=1,\n...             each_price=\"each_price\",\n...             available_amount=\"available_amount\",\n...         )\n...     ],\n... )\n{\n    'id': 1,\n    'market_symbol': 'market_symbol',\n    'buy_orders': [\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    ],\n    'sell_orders': [\n        {\n            'market_id': 1,\n            'each_price': 'each_price',\n            'available_amount': 'available_amount'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/order_book.py</code> <pre><code>class OrderBookResponse(TypedDict):\n    \"\"\"\n    Order Book Response.\n\n    Attributes:\n        id (int): ID.\n        market_symbol (str): Market symbol.\n        buy_orders (list[OrderBookItem]): Buy orders.\n        sell_orders (list[OrderBookItem]): Sell orders.\n\n    Examples:\n        &gt;&gt;&gt; OrderBookResponse(\n        ...     id=1,\n        ...     market_symbol=\"market_symbol\",\n        ...     buy_orders=[\n        ...         OrderBookItem(\n        ...             market_id=1,\n        ...             each_price=\"each_price\",\n        ...             available_amount=\"available_amount\",\n        ...         )\n        ...     ],\n        ...     sell_orders=[\n        ...         OrderBookItem(\n        ...             market_id=1,\n        ...             each_price=\"each_price\",\n        ...             available_amount=\"available_amount\",\n        ...         )\n        ...     ],\n        ... )\n        {\n            'id': 1,\n            'market_symbol': 'market_symbol',\n            'buy_orders': [\n                {\n                    'market_id': 1,\n                    'each_price': 'each_price',\n                    'available_amount': 'available_amount'\n                }\n            ],\n            'sell_orders': [\n                {\n                    'market_id': 1,\n                    'each_price': 'each_price',\n                    'available_amount': 'available_amount'\n                }\n            ]\n        }\n    \"\"\"\n\n    id: int\n    market_symbol: str\n    buy_orders: list[OrderBookItem]\n    sell_orders: list[OrderBookItem]\n</code></pre>"},{"location":"reference/types/responses/orders_history/","title":"orders_history","text":""},{"location":"reference/types/responses/orders_history/#src.bit24.types.responses.orders_history--orders-history-response","title":"Orders History Response","text":"<p>This module contains the type definitions for the response of the orders history endpoint.</p>"},{"location":"reference/types/responses/orders_history/#src.bit24.types.responses.orders_history--classes","title":"Classes","text":"<ul> <li><code>OrdersHistoryResponse</code>: A <code>TypedDict</code> that represents the structure of the orders history response.</li> </ul>"},{"location":"reference/types/responses/orders_history/#src.bit24.types.responses.orders_history.OrdersHistoryResponse","title":"<code>OrdersHistoryResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Orders History Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>has_paginate</code> <code>int</code> <p>Has paginate.</p> <code>total_data</code> <code>int</code> <p>Total data.</p> <code>current_page</code> <code>int</code> <p>Current page.</p> <code>from_</code> <code>int</code> <p>From.</p> <code>to(</code> <code>int</code> <p>To.</p> <code>per_page</code> <code>int</code> <p>Per page.</p> <code>results</code> <code>list[OrderInfo]</code> <p>Results.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; OrdersHistoryResponse(\n...     message=\"message\",\n...     has_paginate=1,\n...     total_data=1,\n...     current_page=1,\n...     from_=1,\n...     to=1,\n...     per_page=1,\n...     results=[...],  # OrderInfo\n... )\n{\n    'message': 'message',\n    'has_paginate': 1,\n    'total_data': 1,\n    'current_page': 1,\n    'from_': 1,\n    'to': 1,\n    'per_page': 1,\n    'results': [...] # OrderInfo\n}\n</code></pre> Source code in <code>src/bit24/types/responses/orders_history.py</code> <pre><code>class OrdersHistoryResponse(TypedDict):\n    \"\"\"\n    Orders History Response.\n\n    Attributes:\n        message (str): Message.\n        has_paginate (int): Has paginate.\n        total_data (int): Total data.\n        current_page (int): Current page.\n        from_ (int): From.\n        to( int): To.\n        per_page (int): Per page.\n        results (list[OrderInfo]): Results.\n\n    Examples:\n        &gt;&gt;&gt; OrdersHistoryResponse(\n        ...     message=\"message\",\n        ...     has_paginate=1,\n        ...     total_data=1,\n        ...     current_page=1,\n        ...     from_=1,\n        ...     to=1,\n        ...     per_page=1,\n        ...     results=[...],  # OrderInfo\n        ... )\n        {\n            'message': 'message',\n            'has_paginate': 1,\n            'total_data': 1,\n            'current_page': 1,\n            'from_': 1,\n            'to': 1,\n            'per_page': 1,\n            'results': [...] # OrderInfo\n        }\n    \"\"\"\n\n    message: str\n    has_paginate: int\n    total_data: int\n    current_page: int\n    from_: int\n    to: int\n    per_page: int\n    results: list[OrderInfo]\n</code></pre>"},{"location":"reference/types/responses/submit_withdraw/","title":"submit_withdraw","text":""},{"location":"reference/types/responses/submit_withdraw/#src.bit24.types.responses.submit_withdraw--submit-withdraw-response","title":"Submit Withdraw Response","text":"<p>This module contains the type definitions for the response of the submit withdraw endpoint.</p>"},{"location":"reference/types/responses/submit_withdraw/#src.bit24.types.responses.submit_withdraw--classes","title":"Classes","text":"<ul> <li><code>SubmitWithdrawResponse</code>: A <code>TypedDict</code> that represents the structure of the submit withdraw response.</li> </ul>"},{"location":"reference/types/responses/submit_withdraw/#src.bit24.types.responses.submit_withdraw.SubmitWithdrawResponse","title":"<code>SubmitWithdrawResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Submit Withdraw Response.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SubmitWithdrawResponse(message=\"message\")\n{\n    'message': 'message'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/submit_withdraw.py</code> <pre><code>class SubmitWithdrawResponse(TypedDict):\n    \"\"\"\n    Submit Withdraw Response.\n\n    Attributes:\n        message (str): Message.\n\n    Examples:\n        &gt;&gt;&gt; SubmitWithdrawResponse(message=\"message\")\n        {\n            'message': 'message'\n        }\n    \"\"\"\n\n    message: str\n</code></pre>"},{"location":"reference/types/responses/withdraw_networks/","title":"withdraw_networks","text":""},{"location":"reference/types/responses/withdraw_networks/#src.bit24.types.responses.withdraw_networks--withdrawal-networks-response","title":"Withdrawal Networks Response.","text":"<p>This module contains the type definitions for the response of the withdrawal networks endpoint.</p>"},{"location":"reference/types/responses/withdraw_networks/#src.bit24.types.responses.withdraw_networks--classes","title":"Classes","text":"<ul> <li><code>WithdrawNetworkInfo</code>: A <code>TypedDict</code> that represents the structure of the network information.</li> <li><code>WithdrawalNetworksResponse</code>: A <code>TypedDict</code> that represents the structure of the withdrawal networks response.</li> </ul>"},{"location":"reference/types/responses/withdraw_networks/#src.bit24.types.responses.withdraw_networks.WithdrawNetworkInfo","title":"<code>WithdrawNetworkInfo</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Network Information.</p> <p>Attributes:</p> Name Type Description <code>network_id</code> <code>int</code> <p>Network ID.</p> <code>network_name</code> <code>str</code> <p>Network name.</p> <code>network_layer</code> <code>str</code> <p>Network layer.</p> <code>min_withdraw</code> <code>str</code> <p>Min withdraw.</p> <code>max_withdraw</code> <code>str</code> <p>Max withdraw.</p> <code>fee</code> <code>str</code> <p>Fee.</p> <code>address_regex</code> <code>str</code> <p>Address regex.</p> <code>memo_regex</code> <code>str</code> <p>Memo regex.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithdrawNetworkInfo(\n...     network_id=1,\n...     network_name=\"network_name\",\n...     network_layer=\"network_layer\",\n...     min_withdraw=\"min_withdraw\",\n...     max_withdraw=\"max_withdraw\",\n...     fee=\"fee\",\n...     address_regex=\"address_regex\",\n...     memo_regex=\"memo_regex\",\n... )\n{\n    'network_id': 1,\n    'network_name': 'network_name',\n    'network_layer': 'network_layer',\n    'min_withdraw': 'min_withdraw',\n    'max_withdraw': 'max_withdraw',\n    'fee': 'fee',\n    'address_regex': 'address_regex',\n    'memo_regex': 'memo_regex'\n}\n</code></pre> Source code in <code>src/bit24/types/responses/withdraw_networks.py</code> <pre><code>class WithdrawNetworkInfo(TypedDict):\n    \"\"\"\n    Network Information.\n\n    Attributes:\n        network_id (int): Network ID.\n        network_name (str): Network name.\n        network_layer (str): Network layer.\n        min_withdraw (str): Min withdraw.\n        max_withdraw (str): Max withdraw.\n        fee (str): Fee.\n        address_regex (str): Address regex.\n        memo_regex (str): Memo regex.\n\n    Examples:\n        &gt;&gt;&gt; WithdrawNetworkInfo(\n        ...     network_id=1,\n        ...     network_name=\"network_name\",\n        ...     network_layer=\"network_layer\",\n        ...     min_withdraw=\"min_withdraw\",\n        ...     max_withdraw=\"max_withdraw\",\n        ...     fee=\"fee\",\n        ...     address_regex=\"address_regex\",\n        ...     memo_regex=\"memo_regex\",\n        ... )\n        {\n            'network_id': 1,\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'min_withdraw': 'min_withdraw',\n            'max_withdraw': 'max_withdraw',\n            'fee': 'fee',\n            'address_regex': 'address_regex',\n            'memo_regex': 'memo_regex'\n        }\n    \"\"\"\n\n    network_id: int\n    network_name: str\n    network_layer: str\n    min_withdraw: str\n    max_withdraw: str | None\n    fee: str\n    address_regex: str\n    memo_regex: str | None\n</code></pre>"},{"location":"reference/types/responses/withdraw_networks/#src.bit24.types.responses.withdraw_networks.WithdrawalNetworksResponse","title":"<code>WithdrawalNetworksResponse</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>Withdrawal Networks Response.</p> <p>Attributes:</p> Name Type Description <code>balance</code> <code>str</code> <p>Balance.</p> <code>networks</code> <code>list[NetworkInfo]</code> <p>Networks.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; WithdrawalNetworksResponse(\n...     balance=\"balance\",\n...     networks=[\n...         WithdrawNetworkInfo(\n...             network_id=1,\n...             network_name=\"network_name\",\n...             network_layer=\"network_layer\",\n...             min_withdraw=\"min_withdraw\",\n...             max_withdraw=\"max_withdraw\",\n...             fee=\"fee\",\n...             address_regex=\"address_regex\",\n...             memo_regex=\"memo_regex\",\n...         )\n...     ],\n... )\n{\n    'balance': 'balance',\n    'networks': [\n        {\n            'network_id': 1,\n            'network_name': 'network_name',\n            'network_layer': 'network_layer',\n            'min_withdraw': 'min_withdraw',\n            'max_withdraw': 'max_withdraw',\n            'fee': 'fee',\n            'address_regex': 'address_regex',\n            'memo_regex': 'memo_regex'\n        }\n    ]\n}\n</code></pre> Source code in <code>src/bit24/types/responses/withdraw_networks.py</code> <pre><code>class WithdrawalNetworksResponse(TypedDict):\n    \"\"\"\n    Withdrawal Networks Response.\n\n    Attributes:\n        balance (str): Balance.\n        networks (list[NetworkInfo]): Networks.\n\n    Examples:\n        &gt;&gt;&gt; WithdrawalNetworksResponse(\n        ...     balance=\"balance\",\n        ...     networks=[\n        ...         WithdrawNetworkInfo(\n        ...             network_id=1,\n        ...             network_name=\"network_name\",\n        ...             network_layer=\"network_layer\",\n        ...             min_withdraw=\"min_withdraw\",\n        ...             max_withdraw=\"max_withdraw\",\n        ...             fee=\"fee\",\n        ...             address_regex=\"address_regex\",\n        ...             memo_regex=\"memo_regex\",\n        ...         )\n        ...     ],\n        ... )\n        {\n            'balance': 'balance',\n            'networks': [\n                {\n                    'network_id': 1,\n                    'network_name': 'network_name',\n                    'network_layer': 'network_layer',\n                    'min_withdraw': 'min_withdraw',\n                    'max_withdraw': 'max_withdraw',\n                    'fee': 'fee',\n                    'address_regex': 'address_regex',\n                    'memo_regex': 'memo_regex'\n                }\n            ]\n        }\n    \"\"\"\n\n    balance: str\n    networks: list[WithdrawNetworkInfo]\n</code></pre>"}]}